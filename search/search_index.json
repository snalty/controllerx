{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Create controller-based automations with ease to control your home devices and scenes from Home Assistant (HA). ControllerX brings the following functionalities for different controllers : Turn on/Turn off any home device (light, switch, media player, etc.) Manual increase/decrease of brightness and color temperature Smooth increase/decrease (holding button) of brightness, color temperature, volume, etc. Color loop changing if the light supports xy color Play/pause music Open/close covers ControllerX uses an async loop to make HA call services requests (e.g. to change the brightness, the color temperature, the xy color, the volume of a media player). This means that when a button is held, ControllerX calls periodically HA services until a release action is fired. Why ControllerX ? Solutions like Zigbee2MQTT, deCONZ and ZHA have their pros and cons, but if there is something good about these solutions is that we can remove the dependency of a propietary hub (e.g.: IKEA, Xiaomi, Phillips). However, there is a downside about removing this dependency and it is that not only the proprietary hubs let you integrate a controller with lights or media players, but it also gives a behaviour to them. This is why we end up using Home Assistant automations, however when it comes to create complex automations like this kind, it gets tricky and difficult to maintain. This is where ControllerX comes in together with AppDaemon, to give the behaviour to the devices we lose when not having the original hub as well as easily create automation focus on button events. Quick example With just this configuration placed in /config/appdaemon/apps/apps.yaml , you can have the E1810 controller from IKEA (5 buttons one) connected to the bedroom light and be able to change the brightness and color temperature or color. livingroom_controller : module : controllerx class : E1810Controller controller : sensor.livingroom_controller_action integration : z2m light : light.bedroom Videos examples E1810 (IKEA) controlling a light through MQTT Symfonisk controlling Chromecast volume Magic Xiaomi Cube controlling a colour light E1810 (IKEA) controlling a colour light with ZHA Symfonisk controlling Google Home mini Symfonisk controlling a light Showing the colour wheel from HA E1743 (IKEA) button as a cover controller E1810 (IKEA) as a TV remote Double click for the middle button for E1810 (IKEA) Community Thank you to all these people for putting out there content related to ControllerX: /u/canaletto - canaletto.fr (French) /u/jones - jbetzen.net (German) /u/fribse - YouTube (Danish) Questions can be asked in following channels: GitHub issue Home Assistant Community Forum topic","title":"Home"},{"location":"#why-controllerx","text":"Solutions like Zigbee2MQTT, deCONZ and ZHA have their pros and cons, but if there is something good about these solutions is that we can remove the dependency of a propietary hub (e.g.: IKEA, Xiaomi, Phillips). However, there is a downside about removing this dependency and it is that not only the proprietary hubs let you integrate a controller with lights or media players, but it also gives a behaviour to them. This is why we end up using Home Assistant automations, however when it comes to create complex automations like this kind, it gets tricky and difficult to maintain. This is where ControllerX comes in together with AppDaemon, to give the behaviour to the devices we lose when not having the original hub as well as easily create automation focus on button events.","title":"Why ControllerX?"},{"location":"#quick-example","text":"With just this configuration placed in /config/appdaemon/apps/apps.yaml , you can have the E1810 controller from IKEA (5 buttons one) connected to the bedroom light and be able to change the brightness and color temperature or color. livingroom_controller : module : controllerx class : E1810Controller controller : sensor.livingroom_controller_action integration : z2m light : light.bedroom","title":"Quick example"},{"location":"#videos-examples","text":"E1810 (IKEA) controlling a light through MQTT Symfonisk controlling Chromecast volume Magic Xiaomi Cube controlling a colour light E1810 (IKEA) controlling a colour light with ZHA Symfonisk controlling Google Home mini Symfonisk controlling a light Showing the colour wheel from HA E1743 (IKEA) button as a cover controller E1810 (IKEA) as a TV remote Double click for the middle button for E1810 (IKEA)","title":"Videos examples"},{"location":"#community","text":"Thank you to all these people for putting out there content related to ControllerX: /u/canaletto - canaletto.fr (French) /u/jones - jbetzen.net (German) /u/fribse - YouTube (Danish) Questions can be asked in following channels: GitHub issue Home Assistant Community Forum topic","title":"Community"},{"location":"controllers/","text":"Currently 54 devices are supported. Model Integrations Picture AUA1ZBR2GW ZHA E1743 Zigbee2MQTT, deCONZ, ZHA E1744 Zigbee2MQTT, deCONZ, ZHA E1766 Zigbee2MQTT, deCONZ, ZHA E1810 Zigbee2MQTT, deCONZ, ZHA E1812 Zigbee2MQTT, deCONZ, ZHA E1EG7F Zigbee2MQTT HG06323 Zigbee2MQTT, ZHA HMPB2WM552 Homematic HMPB6WM55 Homematic HMPBI4FM Homematic HMSenMDIRWM55 Homematic HueDimmer Zigbee2MQTT, deCONZ, ZHA HueSmartButton deCONZ ICTCG1 Zigbee2MQTT, deCONZ, ZHA LZL4BWHL01 deCONZ, ZHA Legrand600083 Zigbee2MQTT, ZHA Legrand600088 Zigbee2MQTT, ZHA LutronPJ22B State, Lutron Caseta LutronPJ22BRL State LutronPJ23BRL State, Lutron Caseta LutronPJ24B State MFKZQ01LM Zigbee2MQTT, deCONZ, ZHA MLI404002 Zigbee2MQTT, ZHA MLI404011 Zigbee2MQTT, deCONZ OsramAC025XX00NJ deCONZ, ZHA PTM215X Zigbee2MQTT, deCONZ Philips929002398602 Zigbee2MQTT Philips929003017102 Zigbee2MQTT, deCONZ SNZB01 Zigbee2MQTT, ZHA SmartThingsButton Zigbee2MQTT, deCONZ, ZHA TS0043 Zigbee2MQTT TS0044 Zigbee2MQTT TS0044F Zigbee2MQTT TerncyPP01 ZHA TerncySD01 ZHA W2049 Zigbee2MQTT, deCONZ, ZHA WXCJKG11LM Zigbee2MQTT WXCJKG12LM Zigbee2MQTT, ZHA WXCJKG13LM Zigbee2MQTT, deCONZ, ZHA WXKG01LM Zigbee2MQTT, deCONZ, ZHA WXKG02LM Zigbee2MQTT, deCONZ, ZHA WXKG06LM Zigbee2MQTT, deCONZ WXKG07LM Zigbee2MQTT, deCONZ, ZHA WXKG11LMRemote Zigbee2MQTT, deCONZ, ZHA WXKG11LMSensor deCONZ, ZHA WXKG12LM Zigbee2MQTT, deCONZ Z31BRL deCONZ ZB3009 Zigbee2MQTT ZB5121 ZHA ZB5122 ZHA ZNXNKG02LM Zigbee2MQTT ZS23000278 Zigbee2MQTT ZYCT202 Zigbee2MQTT","title":"Supported controllers"},{"location":"faq/","text":"1. I placed the configuration in configuration.yaml and it doesn't work ControllerX depends on AppDaemon and all the configuration for AppDaemon apps goes to /config/appdaemon/apps/apps.yaml and not /config/configuration.yaml . 2. I updated ControllerX to a new version and it does not work When updating ControllerX, the AppDaemon server (or addon) needs to be restarted. 3. I properly configured E1744 (symfonisk) with z2m but it doesn't work From the zigbee2mqtt documentation is recommended to set the debounce attribute. However, when set it does not send an empty state and the state of the controller stays active instead of being removed. This causes problems to ControllerX, so if you want to use this controller, I recommend to remove the debounce attribute since ControllerX handles repeated events by itself already. 4. I have a group of lights and it does not work properly Please see here to understand how grouped entities work. 5. Error: \"Value for X attribute could not be retrieved from light Y\" This error is shown when the light has support for the X attribute (e.g. brightness or color_temp) and the attribute is not in the state attribute of the entity. You can check whether the attribute X is shown in the state attributes from the \"Developer Tools > States\". 6. Light is not turning on to the previous brightness Zigbee does not support transition natively to lights, so this attribute depends on the integration you have installed for your light. ControllerX by default adds transition when changing brightness or color, but not when turning on/off the light. So if this is happening to you it might be because add_transition_turn_toggle: true is added in your controller configuration. These are the issues created related to this problem on the different integrations: Zigbee2MQTT (FIXED) Hue integration (CLOSED, but not fixed) 7. When holding or rotating the controller (especially the Symfonisk - E1744), it doesn't stop changing the brightness or volume This is a known issue that cannot be fixed in the code. Controllers with holding-release functionality fire 2 events, one when the holding/rotation starts and another when it stops rotating or is released. What ControllerX does for you is send periodically requests to HA via call services to update your brightness, volume, etc. This is probably happenning to you sometimes and is because the stop/release action has not been fired. This can happen due to: A rotation is too fast and confusing to know if it stopped or not. The network is overloaded. The server cannot handle the requests on time. The controller and the light are far distanced from the coordinator. However, these are some actions you can take to overcome this problem and reduce the number of times that this happens: If using z2m, change the integration to listen MQTT directly, this way it will avoid the HA state machine layer. Read more about in here . If using deCONZ and you just want to dim your lights smoothly, then you can consider using this AppDaemon app from @Burningstone91 . It brightens/dims your lights with a deCONZ calls instead of calling HA periodically, this means that deCONZ would handle the dimming for you. Play around with delay (default is 350ms) and automatic_steps (default is 10) attributes. You can read more about them in here . The lower the delay is, the more requests will go to HA. The more automatic_steps, the more steps it will take to get from min to max, and vice versa. Add more Zigbee routers to the network. 8. Symfonisk controller (E1744) is not working with Zigbee2MQTT integration Do you have a configuration that seems to be right, but is not working? Well, the default mapping for E1744 has the actions of the new implementation in Zigbee2MQTT for this controller. For this, you will need to deactivate the legacy mode for this controller in Zigbee2MQTT. If you have the Zigbee2MQTT addon, you will have a file in /share/zigbee2mqtt/devices.yaml with the device-specific configuration. You will need to add legacy: false to your E1744 controller as shown in the Zigbee2MQTT documentation. With this the problem will be solved once Zigbee2MQTT is restarted. While I have you here reading this, I strongly recommend to you to check the FAQ#9 if you are having slowness issues with your controller. 9. Symfonisk controller (E1744) works, but pretty laggy If you are using the sensor entity as your controller, then I recommend you to change this configuration to listen from MQTT directly instead of HA. For this, you will need to change your controller configuration ( apps.yaml ) and your AppDaemon configuration ( appdaemon.yaml ). Your new controller configurtion will look like this: example_app : module : controllerx class : E1744MediaPlayerController controller : my_z2m_friendly_name # This is the Zigbee2MQTT friendly name integration : name : z2m listen_to : mqtt media_player : media_player.my_media_player Notice how we added the listen_to attribute and change the controller to the Zigbee2MQTT friendly name. Then, you will also need to add the MQTT broker and the credentials in the appdaemon.yaml as described in the MQTT section from the integrations page. Then you can just restart the AppDaemon addon/server.","title":"Frequently asked questions (FAQ)"},{"location":"faq/#1-i-placed-the-configuration-in-configurationyaml-and-it-doesnt-work","text":"ControllerX depends on AppDaemon and all the configuration for AppDaemon apps goes to /config/appdaemon/apps/apps.yaml and not /config/configuration.yaml .","title":"1. I placed the configuration in configuration.yaml and it doesn't work"},{"location":"faq/#2-i-updated-controllerx-to-a-new-version-and-it-does-not-work","text":"When updating ControllerX, the AppDaemon server (or addon) needs to be restarted.","title":"2. I updated ControllerX to a new version and it does not work"},{"location":"faq/#3-i-properly-configured-e1744-symfonisk-with-z2m-but-it-doesnt-work","text":"From the zigbee2mqtt documentation is recommended to set the debounce attribute. However, when set it does not send an empty state and the state of the controller stays active instead of being removed. This causes problems to ControllerX, so if you want to use this controller, I recommend to remove the debounce attribute since ControllerX handles repeated events by itself already.","title":"3. I properly configured E1744 (symfonisk) with z2m but it doesn't work"},{"location":"faq/#4-i-have-a-group-of-lights-and-it-does-not-work-properly","text":"Please see here to understand how grouped entities work.","title":"4. I have a group of lights and it does not work properly"},{"location":"faq/#5-error-value-for-x-attribute-could-not-be-retrieved-from-light-y","text":"This error is shown when the light has support for the X attribute (e.g. brightness or color_temp) and the attribute is not in the state attribute of the entity. You can check whether the attribute X is shown in the state attributes from the \"Developer Tools > States\".","title":"5. Error: \"Value for X attribute could not be retrieved from light Y\""},{"location":"faq/#6-light-is-not-turning-on-to-the-previous-brightness","text":"Zigbee does not support transition natively to lights, so this attribute depends on the integration you have installed for your light. ControllerX by default adds transition when changing brightness or color, but not when turning on/off the light. So if this is happening to you it might be because add_transition_turn_toggle: true is added in your controller configuration. These are the issues created related to this problem on the different integrations: Zigbee2MQTT (FIXED) Hue integration (CLOSED, but not fixed)","title":"6. Light is not turning on to the previous brightness"},{"location":"faq/#7-when-holding-or-rotating-the-controller-especially-the-symfonisk-e1744-it-doesnt-stop-changing-the-brightness-or-volume","text":"This is a known issue that cannot be fixed in the code. Controllers with holding-release functionality fire 2 events, one when the holding/rotation starts and another when it stops rotating or is released. What ControllerX does for you is send periodically requests to HA via call services to update your brightness, volume, etc. This is probably happenning to you sometimes and is because the stop/release action has not been fired. This can happen due to: A rotation is too fast and confusing to know if it stopped or not. The network is overloaded. The server cannot handle the requests on time. The controller and the light are far distanced from the coordinator. However, these are some actions you can take to overcome this problem and reduce the number of times that this happens: If using z2m, change the integration to listen MQTT directly, this way it will avoid the HA state machine layer. Read more about in here . If using deCONZ and you just want to dim your lights smoothly, then you can consider using this AppDaemon app from @Burningstone91 . It brightens/dims your lights with a deCONZ calls instead of calling HA periodically, this means that deCONZ would handle the dimming for you. Play around with delay (default is 350ms) and automatic_steps (default is 10) attributes. You can read more about them in here . The lower the delay is, the more requests will go to HA. The more automatic_steps, the more steps it will take to get from min to max, and vice versa. Add more Zigbee routers to the network.","title":"7. When holding or rotating the controller (especially the Symfonisk - E1744), it doesn't stop changing the brightness or volume"},{"location":"faq/#8-symfonisk-controller-e1744-is-not-working-with-zigbee2mqtt-integration","text":"Do you have a configuration that seems to be right, but is not working? Well, the default mapping for E1744 has the actions of the new implementation in Zigbee2MQTT for this controller. For this, you will need to deactivate the legacy mode for this controller in Zigbee2MQTT. If you have the Zigbee2MQTT addon, you will have a file in /share/zigbee2mqtt/devices.yaml with the device-specific configuration. You will need to add legacy: false to your E1744 controller as shown in the Zigbee2MQTT documentation. With this the problem will be solved once Zigbee2MQTT is restarted. While I have you here reading this, I strongly recommend to you to check the FAQ#9 if you are having slowness issues with your controller.","title":"8. Symfonisk controller (E1744) is not working with Zigbee2MQTT integration"},{"location":"faq/#9-symfonisk-controller-e1744-works-but-pretty-laggy","text":"If you are using the sensor entity as your controller, then I recommend you to change this configuration to listen from MQTT directly instead of HA. For this, you will need to change your controller configuration ( apps.yaml ) and your AppDaemon configuration ( appdaemon.yaml ). Your new controller configurtion will look like this: example_app : module : controllerx class : E1744MediaPlayerController controller : my_z2m_friendly_name # This is the Zigbee2MQTT friendly name integration : name : z2m listen_to : mqtt media_player : media_player.my_media_player Notice how we added the listen_to attribute and change the controller to the Zigbee2MQTT friendly name. Then, you will also need to add the MQTT broker and the credentials in the appdaemon.yaml as described in the MQTT section from the integrations page. Then you can just restart the AppDaemon addon/server.","title":"9. Symfonisk controller (E1744) works, but pretty laggy"},{"location":"advanced/","text":"We can make us of the attribute mapping to overwrite completely the behaviour of our default controller, or merge_mapping to overwrite just the specified events. The content of both work the same way: key : The event to get fired from the controller. You can check these events in the individual pages from the supported controllers . Note that they change depending on the controller and the integration (z2m, deconz, zha). Mutliple click functionality can be configured in the key part. value : An action type or a list of them. This is/are the action(s) to be executed when the event ( key ) is fired. Let's see an example: example_app : module : controllerx class : E1743Controller controller : sensor.livingroom_controller_action integration : z2m light : light.livingroom merge_mapping : \"off\" : - scene : scene.night - service : notify.telegram data : message : \"off\" clicked In this example, the key is \"off\" (extracted from the Zigbee2MQTT mapping of the E1743 IKEA controller ) and the value is a list of 2 action types: one to activate an scene and the other to send a message through HA call service.","title":"Custom mapping"},{"location":"advanced/action-types/","text":"This page assumes you already know how the mapping attribute works. An action type is reduced version of Script Syntax from Home Assistant. It allows to one or a sequence of actions to execute when an event is fired. The available action types are predefined action , call service, scene activation and delay. ... mapping : # or merge_mapping ## Predefined actions # `toogle` is a light predefined action <event> : action : toggle # The previous action type can be reduced as: <event> : toggle ## Call services # Call any service the same way as it is done through `Developer Tools > Services` in HA <event> : service : script.my_script data : attr1 : 42 attr2 : foo # `entity_id` can be passed directly like this or through `data`. # Additionally, if the service is within the same domain # (light, media_player, etc) as the main entity from the configuration, # and entity_id is not passed, then it will use the one from the configuration. # This is handy, so there is no need to repeat the same entity over and over. # Priority order for entity_id: # - Inside data # - In the same level as \"service\" # - From the main config if the domain matches <event> : service : light.turn_on entity_id : light.my_light ## Scene activation # Activate any HA Scene <event> : scene : scene.my_scene ## Delay # `delay` is usefull when defining a list of actions, and you want # an action to be triggered after some defined time. # The value of the attribute only accepts seconds. <event> : - on_min_brightness # predefined action - delay : 5 # wait 5 seconds - on_full_brightness # predefined action The <event> key is the event from your controller and integration. If an action is still executing (most likely because of a delay in place), and another of the same type gets fired, the previous one will be cancelled and a new one will be executed. This is not configurable and it works the same as mode: restart from Home Assistant automations. Actions will be executed sequentially, so keep in mind that if using predefined actions, it is not recommended to use a list of hold actions since they will be executed sequentially, and it will not result in an expected behaviour. This is because the hold actions are blocking operations and they will not be finished until a release action is fired.","title":"Action types"},{"location":"advanced/entity-groups/","text":"This is supported from ControllerX v4.14.0 ControllerX allow for Entity Controllers (LightController, MediaPlayerController, CoverController, etc) to work with grouped entities. All is needed is an entity with entity_id attribute with a list of entities controlled by the grouped entity. For example, we can use a group entity from Group Integration , or from Light Group Integration . ControllerX will read attribute from the main entity (the first one from the list), but will run the actions on the grouped entity. Let's imagine we have a Light Group entity ( light.livingroom ): light : - platform : group name : livingroom entities : - light.livingroom_1 - light.livingroom_2 - light.livingroom_3 Then, we could for example configure the following in apps.yaml file: example_app : module : controllerx class : E1810Controller controller : sensor.livingroom_controller_action integration : z2m light : light.livingroom light.livingroom_1 will be the main light that ControllerX will read from, but light.livingroom will be the grouped entity that ControllerX will perform the actions. For example, if light.livingroom_1 does not support brightness , but light.livingroom_2 and light.livingroom_3 do, then the configuration will not work because ControllerX will not be able to read brightness attribute from light.livingroom_1 .","title":"Entity groups"},{"location":"advanced/hold-click-modes/","text":"This page assumes you already know how the mapping attribute and predefined actions work. A new feature that came with ControllerX v4.16.0 is the ability to configure the hold and click actions. Up until now, we had the {hold,click}_{brightness,color_temp,white_color,...}_{up,down,toggle} predefined actions like: hold_brightness_toggle hold_color_up click_colortemp_up click_brightness_down ... They allow to use click (1 step) or hold (smooth dim) with different attributes and directions. However, it became difficult to expand and add more functionality, so now the click and hold actions can be configured as follows: example_app : module : controllerx class : E1810Controller integration : deconz controller : my_controller light : light.my_light merge_mapping : 2001 : action : click # [click, hold] This is the predefined action. attribute : brightness # [brightness, color_temp, white_value, color, xy_color] direction : up # [up, down, toggle (only for hold)] mode : stop # [stop, loop, bounce (only for hold)] Stepper mode steps : 10 # It overrides the `manual_steps` and `automatic_steps` global attributes The fields are the following: action : This is the predefined action , which in this case is click or hold . attribute : Attribute we want to act on. The available values are: brightness , color_temp , white_value , color , and xy_color . However, xy_color will ignore the mode and steps attribute since it already loops through the color wheel. direction : Direction to start. Options are up , down , and toggle . In case of click action, it will not accept toggle . up : It goes up. down : It goes down. toggle : It changes direction everytime the action is performed. mode : This is the stepper mode. Options are stop , loop , and bounce . In case of click action, it will not accept bounce . stop : This is the default behaviour. It stops when it reaches the ends (min or max). loop : It loops through all the values under the same direction, so when reaching the end, it will start over. For example, if you configure the brightness with direction up , it will go from the value is currently in until 255 (default max), and then it will start over (1 default min) without releasing the button. This mode will not unless there is a release action or it reaches the max_loops attribute (default is 50 steps). bounce : It bounces the ends, so when reaching the end it will switch directions. For example, if you configure the brightness with direction down , it will go from the value is currently in until 1 (default min), then it will start going up until reaching 255 and bouncing back again. This mode will not unless there is a release action or it reaches the max_loops attribute (default is 50 steps). As you can see, the configuration is much flexible, however, it adds more lines than using the direct predefined actions. For this reason, the predefined actions like {hold,click}_{brightness,color_temp,white_color,...}_{up,down,toggle} will not be removed, but ControllerX will not have more of these since now it can be configured differently. This means for example that this configuration: example_app : module : controllerx class : E1810Controller integration : deconz controller : my_controller light : light.my_light merge_mapping : 2001 : action : hold attribute : brightness direction : up It is the same as: example_app : module : controllerx class : E1810Controller integration : deconz controller : my_controller light : light.my_light merge_mapping : 2001 : action : hold_brightness_up The old predefined actions have stop as a default mode.","title":"Hold/Click modes"},{"location":"advanced/multiple-clicks/","text":"This page assumes you already know how the mapping attribute works. Some controllers allow events like double, triple (even quadruple) clicks, but others only allow single clicks events coming from the controller. This feature, then, allows you to virtually manage multiple clicks, especially for those single click events. When adding a new custom mapping for your controller, you can use a new token ( $ ) to indicate how many times an events needs to occur, so the action gets fired. Let's see an example: example_app : module : controllerx class : E1810Controller controller : my_controller integration : name : z2m listen_to : mqtt light : light.my_light multiple_click_delay : 500 # default mapping : brightness_up_click : \"on\" toggle : click_color_down toggle$1 : click_color_up toggle$2 : \"off\" This could be a silly example, but it is enough to remark some points about this feature. In this configuration we see 2 actions: brightness_up_click (not \"multi-clickable\") and toggle (\"multi-clickable\"). We also see an attribute called multiple_click_delay , which indicates the delay (in milliseconds and 500 by default) when a multiple click action should be trigger. Let's go over the next scenarios: brightness_up_click is clicked once: The on action will be triggered immidiately, with no delay. toggle is clicked once: The click_color_up action will be triggered after 500ms. Also noticed that toggle and toggle$1 are basically the same, so if both are present, the one with the token ( $ ) will be the prevalent. So click_color_down will never be called. toggle is clicked twice (with less than 500ms between clicks): The off action will be triggered in 500ms after the second click. This next example will show a real use of this feature with the E1810 controller from IKEA. livingroom : module : controllerx class : E1810Controller controller : livingroom_controller integration : name : z2m listen_to : mqtt light : light.livingroom_lamp smooth_power_on : true merge_mapping : toggle$2 : service : light.toggle data : entity_id : light.livingroom_fairylights toggle$3 : service : light.toggle data : entity_id : light.bedroom This will keep the default mapping for the E1810 controller by using merge_mapping and add a new action when clicking 2 and 3 times the middle button to toggle the fairylights and the bedroom lamp.","title":"Multiple clicks"},{"location":"advanced/predefined-actions/","text":"This page assumes you already know how the mapping attribute works. Here you can find a list of predefined actions (one of the action types ) for each type of controller. Light When using a light controller (e.g. E1743Controller ) or LightController , the following actions can be used as a predefined action: value description parameters \"on\" It turns on the light - attributes : a mapping with attribute and value \"off\" It turns off the light toggle It toggles the light - attributes : a mapping with attribute and value toggle_full_brightness It toggles the light, setting the brightness to the maximum value when turning on. toggle_full_white_value It toggles the light, setting the white value to the maximum value when turning on. toggle_full_color_temp It toggles the light, setting the color temperature to the maximum value when turning on. toggle_min_brightness It toggles the light, setting the brightness to the minimum value when turning on. toggle_min_white_value It toggles the light, setting the white value to the minimum value when turning on. toggle_min_color_temp It toggles the light, setting the color temperature to the minimum value when turning on. release It stops hold actions on_full_brightness It puts the brightness to the maximum value on_full_white_value It puts the white value to the maximum value on_full_color_temp It puts the color temp to the maximum value on_min_brightness It puts the brightness to the minimum value on_min_white_value It puts the white value to the minimum value on_min_color_temp It puts the color temp to the minimum value on_min_max_brightness It puts the brightness to the minimum value if the light is off or brightness different to minimum value; else it puts the brightness to the maximum value. on_max_min_brightness It puts the brightness to the maximum value if the light is off or brightness different to maximum value; else it puts the brightness to the minimum value. on_min_max_color_temp It puts the color temp to the minimum value if the light is off or color temp different to minimum value; else it puts the color temp to the maximum value. on_max_min_color_temp It puts the color temp to the maximum value if the light is off or color temp different to maximum value; else it puts the color temp to the minimum value. set_half_brightness It sets the brightness to 50% set_half_white_value It sets the white value to 50% set_half_color_temp It sets the color temp to 50% sync It syncs the light(s) to full brightness and white colour or 2700K (370 mireds) - brightness - color_temp - xy_color click It brights up/down accordingly with the manual_steps attribute, and allow to pass parameters through YAML config. You can read more about it here - attribute - direction - mode - steps click_brightness_up It brights up accordingly with the manual_steps attribute click_brightness_down It brights down accordingly with the manual_steps attribute click_white_value_up It turns the white value up accordingly with the manual_steps attribute click_white_value_down It turns the white value down accordingly with the manual_steps attribute click_color_up It turns the color up accordingly with the manual_steps attribute click_color_down It turns the color down accordingly with the manual_steps attribute click_colortemp_up It turns the color temp up accordingly with the manual_steps attribute click_colortemp_down It turns the color temp down accordingly with the manual_steps attribute click_xycolor_up It turns the xy color up accordingly with the manual_steps attribute click_xycolor_down It turns the xy color down accordingly with the manual_steps attribute hold It brights up/down until release accordingly with the automatic_steps attribute, and allow to pass parameters through YAML config. You can read more about it here - attribute - direction - mode - steps hold_brightness_up It brights up until release accordingly with the automatic_steps attribute hold_brightness_down It brights down until release accordingly with the automatic_steps attribute hold_brightness_toggle It brights up/down until release accordingly with the automatic_steps attribute and alternates in each click hold_white_value_up It turns the white value up until release accordingly with the automatic_steps attribute hold_white_value_down It turns the white value down until release accordingly with the automatic_steps attribute hold_white_value_toggle It turns the white value up/down until release accordingly with the automatic_steps attribute and alternates in each click hold_color_up It turns the color up until release accordingly with the automatic_steps attribute hold_color_down It turns the color down until release accordingly with the automatic_steps attribute hold_color_toggle It turns the color up/down until release accordingly with the automatic_steps attribute and alternates in each click hold_colortemp_up It turns the color temp up until release accordingly with the automatic_steps attribute hold_colortemp_down It turns the color temp down until release accordingly with the automatic_steps attribute hold_colortemp_toggle It turns the color temp up/down until release accordingly with the automatic_steps attribute and alternates in each click hold_xycolor_up It turns the xy color up until release accordingly with the automatic_steps attribute hold_xycolor_down It turns the xy color down until release accordingly with the automatic_steps attribute hold_xycolor_toggle It turns the xy color up/down until release accordingly with the automatic_steps attribute and alternates in each click xycolor_from_controller It changes the xy color of the light from the value sent by the controller (if supported) colortemp_from_controller It changes the color temperature of the light from the value sent by the controller (if supported) brightness_from_controller_level It changes the brightness of the light from the value sent by the controller action_level (if supported) brightness_from_controller_angle It changes the brightness of the light from the value sent by the controller action_rotation_angle (if supported). This fires a hold action, so a release one will be needed to stop brightness change. - mode - steps Media Player When using a media player controller (e.g. E1743MediaPlayerController ) or MediaPlayerController , the following actions can be used as a predefined action: value description parameters hold_volume_down It turns the volume down until release is called hold_volume_up It turns the volume up until release is called click_volume_down It turns the volume down one step click_volume_up It turns the volume up one step volume_set It sets the volume to given level - volume_level : volume level (from 0 to 1) release It calls release for hold actions play_pause It toggles the play/pause media next_track It skips the track forward previous_track It skips the track backward next_source It changes to the next source previous_source It changes to the previous source mute It mutes the media player tts Text-to-Speech - message - service : the service to call without \"tts.\" (str; default: \"google_translate_say\") - cache (bool; default: None) - language (str; default: None) - options (dict; default: None) volume_from_controller_angle It changes volume based on controller angle (if supported). This fires a hold action, so a release one will be needed to stop volume change. Switch When using a switch controller (e.g. E1743SwitchController ) or SwitchController , the following actions can be used as a predefined action: value description parameters on It turns the switch on off It turns the switch off toggle It toggles the state of the switch Cover When using a cover controller (e.g. E1743CoverController ) or CoverController , the following actions can be used as a predefined action: value description parameters open It opens the cover close It closes the cover stop It stops the cover toggle_open It stops the cover if running and opens otherwise toggle_close It stops the cover if running and closes otherwise How to pass parameters When passing parameters to predefined actions, we will nede to use the action keyword together with the parameters. This is an example to change the default parameters for sync action: example_app : module : controllerx class : E1810Controller integration : z2m controller : sensor.controller_action light : light.my_light merge_mapping : toggle_hold : action : sync brightness : 128 color_temp : 153 And this is another example for the toggle action: example_app : module : controllerx class : E1810Controller integration : z2m controller : sensor.controller_action light : light.my_light merge_mapping : toggle : action : toggle attributes : brightness : 128 xy_color : [ 0.323 , 0.329 ]","title":"Predefined actions"},{"location":"advanced/predefined-actions/#light","text":"When using a light controller (e.g. E1743Controller ) or LightController , the following actions can be used as a predefined action: value description parameters \"on\" It turns on the light - attributes : a mapping with attribute and value \"off\" It turns off the light toggle It toggles the light - attributes : a mapping with attribute and value toggle_full_brightness It toggles the light, setting the brightness to the maximum value when turning on. toggle_full_white_value It toggles the light, setting the white value to the maximum value when turning on. toggle_full_color_temp It toggles the light, setting the color temperature to the maximum value when turning on. toggle_min_brightness It toggles the light, setting the brightness to the minimum value when turning on. toggle_min_white_value It toggles the light, setting the white value to the minimum value when turning on. toggle_min_color_temp It toggles the light, setting the color temperature to the minimum value when turning on. release It stops hold actions on_full_brightness It puts the brightness to the maximum value on_full_white_value It puts the white value to the maximum value on_full_color_temp It puts the color temp to the maximum value on_min_brightness It puts the brightness to the minimum value on_min_white_value It puts the white value to the minimum value on_min_color_temp It puts the color temp to the minimum value on_min_max_brightness It puts the brightness to the minimum value if the light is off or brightness different to minimum value; else it puts the brightness to the maximum value. on_max_min_brightness It puts the brightness to the maximum value if the light is off or brightness different to maximum value; else it puts the brightness to the minimum value. on_min_max_color_temp It puts the color temp to the minimum value if the light is off or color temp different to minimum value; else it puts the color temp to the maximum value. on_max_min_color_temp It puts the color temp to the maximum value if the light is off or color temp different to maximum value; else it puts the color temp to the minimum value. set_half_brightness It sets the brightness to 50% set_half_white_value It sets the white value to 50% set_half_color_temp It sets the color temp to 50% sync It syncs the light(s) to full brightness and white colour or 2700K (370 mireds) - brightness - color_temp - xy_color click It brights up/down accordingly with the manual_steps attribute, and allow to pass parameters through YAML config. You can read more about it here - attribute - direction - mode - steps click_brightness_up It brights up accordingly with the manual_steps attribute click_brightness_down It brights down accordingly with the manual_steps attribute click_white_value_up It turns the white value up accordingly with the manual_steps attribute click_white_value_down It turns the white value down accordingly with the manual_steps attribute click_color_up It turns the color up accordingly with the manual_steps attribute click_color_down It turns the color down accordingly with the manual_steps attribute click_colortemp_up It turns the color temp up accordingly with the manual_steps attribute click_colortemp_down It turns the color temp down accordingly with the manual_steps attribute click_xycolor_up It turns the xy color up accordingly with the manual_steps attribute click_xycolor_down It turns the xy color down accordingly with the manual_steps attribute hold It brights up/down until release accordingly with the automatic_steps attribute, and allow to pass parameters through YAML config. You can read more about it here - attribute - direction - mode - steps hold_brightness_up It brights up until release accordingly with the automatic_steps attribute hold_brightness_down It brights down until release accordingly with the automatic_steps attribute hold_brightness_toggle It brights up/down until release accordingly with the automatic_steps attribute and alternates in each click hold_white_value_up It turns the white value up until release accordingly with the automatic_steps attribute hold_white_value_down It turns the white value down until release accordingly with the automatic_steps attribute hold_white_value_toggle It turns the white value up/down until release accordingly with the automatic_steps attribute and alternates in each click hold_color_up It turns the color up until release accordingly with the automatic_steps attribute hold_color_down It turns the color down until release accordingly with the automatic_steps attribute hold_color_toggle It turns the color up/down until release accordingly with the automatic_steps attribute and alternates in each click hold_colortemp_up It turns the color temp up until release accordingly with the automatic_steps attribute hold_colortemp_down It turns the color temp down until release accordingly with the automatic_steps attribute hold_colortemp_toggle It turns the color temp up/down until release accordingly with the automatic_steps attribute and alternates in each click hold_xycolor_up It turns the xy color up until release accordingly with the automatic_steps attribute hold_xycolor_down It turns the xy color down until release accordingly with the automatic_steps attribute hold_xycolor_toggle It turns the xy color up/down until release accordingly with the automatic_steps attribute and alternates in each click xycolor_from_controller It changes the xy color of the light from the value sent by the controller (if supported) colortemp_from_controller It changes the color temperature of the light from the value sent by the controller (if supported) brightness_from_controller_level It changes the brightness of the light from the value sent by the controller action_level (if supported) brightness_from_controller_angle It changes the brightness of the light from the value sent by the controller action_rotation_angle (if supported). This fires a hold action, so a release one will be needed to stop brightness change. - mode - steps","title":"Light"},{"location":"advanced/predefined-actions/#media-player","text":"When using a media player controller (e.g. E1743MediaPlayerController ) or MediaPlayerController , the following actions can be used as a predefined action: value description parameters hold_volume_down It turns the volume down until release is called hold_volume_up It turns the volume up until release is called click_volume_down It turns the volume down one step click_volume_up It turns the volume up one step volume_set It sets the volume to given level - volume_level : volume level (from 0 to 1) release It calls release for hold actions play_pause It toggles the play/pause media next_track It skips the track forward previous_track It skips the track backward next_source It changes to the next source previous_source It changes to the previous source mute It mutes the media player tts Text-to-Speech - message - service : the service to call without \"tts.\" (str; default: \"google_translate_say\") - cache (bool; default: None) - language (str; default: None) - options (dict; default: None) volume_from_controller_angle It changes volume based on controller angle (if supported). This fires a hold action, so a release one will be needed to stop volume change.","title":"Media Player"},{"location":"advanced/predefined-actions/#switch","text":"When using a switch controller (e.g. E1743SwitchController ) or SwitchController , the following actions can be used as a predefined action: value description parameters on It turns the switch on off It turns the switch off toggle It toggles the state of the switch","title":"Switch"},{"location":"advanced/predefined-actions/#cover","text":"When using a cover controller (e.g. E1743CoverController ) or CoverController , the following actions can be used as a predefined action: value description parameters open It opens the cover close It closes the cover stop It stops the cover toggle_open It stops the cover if running and opens otherwise toggle_close It stops the cover if running and closes otherwise","title":"Cover"},{"location":"advanced/predefined-actions/#how-to-pass-parameters","text":"When passing parameters to predefined actions, we will nede to use the action keyword together with the parameters. This is an example to change the default parameters for sync action: example_app : module : controllerx class : E1810Controller integration : z2m controller : sensor.controller_action light : light.my_light merge_mapping : toggle_hold : action : sync brightness : 128 color_temp : 153 And this is another example for the toggle action: example_app : module : controllerx class : E1810Controller integration : z2m controller : sensor.controller_action light : light.my_light merge_mapping : toggle : action : toggle attributes : brightness : 128 xy_color : [ 0.323 , 0.329 ]","title":"How to pass parameters"},{"location":"advanced/templating/","text":"Templating can be used when we want to dynamically use some of the properties during action execution based on their current state. It leverages the HA templating system with the same syntax. It can be used for these type of parameters: Device types ( light , media_player , switch , cover ) Predefined actions Scene activation Call services Examples It can be used to get the current media player is playing. It assumes there is a sensor that already gets updated when the current media player changes. example_app : module : controllerx class : E1810MediaPlayerController integration : z2m controller : sensor.my_controller media_player : \"{{ states('sensor.current_media_player') }}\" Get data for call services. For example, get a random effect for our WLED light. example_app : module : controllerx class : Controller integration : z2m controller : sensor.my_controller mapping : toggle : service : wled.effect data : entity_id : light.wled effect : \"{{ state_attr('light.wled', 'effect_list') | random }}\"","title":"Templating"},{"location":"advanced/templating/#examples","text":"It can be used to get the current media player is playing. It assumes there is a sensor that already gets updated when the current media player changes. example_app : module : controllerx class : E1810MediaPlayerController integration : z2m controller : sensor.my_controller media_player : \"{{ states('sensor.current_media_player') }}\" Get data for call services. For example, get a random effect for our WLED light. example_app : module : controllerx class : Controller integration : z2m controller : sensor.my_controller mapping : toggle : service : wled.effect data : entity_id : light.wled effect : \"{{ state_attr('light.wled', 'effect_list') | random }}\"","title":"Examples"},{"location":"controllers/AUA1ZBR2GW/","text":"Picture Controller types Integrations Light \u2014 AUA1ZBR2GWLightController ZHA (zha) Light Class: AUA1ZBR2GWLightController Default delay: 350ms Default mapping: ZHA Predefined actions 1_toggle , 2_toggle toggle 1_step_up , 2_step_up click_brightness_up 1_step_down , 2_step_down click_brightness_down 1_step_color_temp_up , 2_step_color_temp_up click_colortemp_up 1_step_color_temp_down , 2_step_color_temp_down click_colortemp_down ZHA example_app : module : controllerx class : AUA1ZBR2GWLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"AUA1ZBR2GW"},{"location":"controllers/AUA1ZBR2GW/#light","text":"Class: AUA1ZBR2GWLightController Default delay: 350ms Default mapping: ZHA Predefined actions 1_toggle , 2_toggle toggle 1_step_up , 2_step_up click_brightness_up 1_step_down , 2_step_down click_brightness_down 1_step_color_temp_up , 2_step_color_temp_up click_colortemp_up 1_step_color_temp_down , 2_step_color_temp_down click_colortemp_down ZHA example_app : module : controllerx class : AUA1ZBR2GWLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/E1743/","text":"Picture Controller types Integrations Light \u2014 E1743Controller Media Player \u2014 E1743MediaPlayerController Switch \u2014 E1743SwitchController Cover \u2014 E1743CoverController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: E1743Controller Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" on \"off\" 2002 \"off\" off brightness_move_up 1001 move_with_on_off_0_83 hold_brightness_up brightness_move_down 2001 move_1_83_0_0 hold_brightness_down brightness_stop 1003 , 2003 stop , stop_with_on_off release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1743Controller integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : E1743Controller integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1743Controller integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1743Controller integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id Media Player Class: E1743MediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" play_pause \"off\" 2002 \"off\" next_track brightness_move_up 1001 move_with_on_off_0_83 hold_volume_up brightness_move_down 2001 move_1_83_0_0 hold_volume_down brightness_stop 1003 , 2003 stop , stop_with_on_off release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1743MediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : E1743MediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : E1743MediaPlayerController integration : deconz controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : E1743MediaPlayerController integration : zha controller : 00:11:22:33:44:55:66:77:88 media_player : media_player.my_entity_id Switch Class: E1743SwitchController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" on \"off\" 2002 \"off\" off Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1743SwitchController integration : z2m controller : sensor.my_controller_action switch : switch.my_entity_id example_app : module : controllerx class : E1743SwitchController integration : name : z2m listen_to : mqtt controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : E1743SwitchController integration : deconz controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : E1743SwitchController integration : zha controller : 00:11:22:33:44:55:66:77:88 switch : switch.my_entity_id Cover Class: E1743CoverController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" toggle_open \"off\" 2002 \"off\" toggle_close brightness_move_up 1001 move_with_on_off_0_83 open brightness_move_down 2001 move_1_83_0_0 close brightness_stop 1003 , 2003 stop , stop_with_on_off stop Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1743CoverController integration : z2m controller : sensor.my_controller_action cover : cover.my_entity_id example_app : module : controllerx class : E1743CoverController integration : name : z2m listen_to : mqtt controller : my_controller cover : cover.my_entity_id example_app : module : controllerx class : E1743CoverController integration : deconz controller : my_controller cover : cover.my_entity_id example_app : module : controllerx class : E1743CoverController integration : zha controller : 00:11:22:33:44:55:66:77:88 cover : cover.my_entity_id","title":"E1743"},{"location":"controllers/E1743/#light","text":"Class: E1743Controller Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" on \"off\" 2002 \"off\" off brightness_move_up 1001 move_with_on_off_0_83 hold_brightness_up brightness_move_down 2001 move_1_83_0_0 hold_brightness_down brightness_stop 1003 , 2003 stop , stop_with_on_off release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1743Controller integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : E1743Controller integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1743Controller integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1743Controller integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/E1743/#media-player","text":"Class: E1743MediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" play_pause \"off\" 2002 \"off\" next_track brightness_move_up 1001 move_with_on_off_0_83 hold_volume_up brightness_move_down 2001 move_1_83_0_0 hold_volume_down brightness_stop 1003 , 2003 stop , stop_with_on_off release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1743MediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : E1743MediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : E1743MediaPlayerController integration : deconz controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : E1743MediaPlayerController integration : zha controller : 00:11:22:33:44:55:66:77:88 media_player : media_player.my_entity_id","title":"Media Player"},{"location":"controllers/E1743/#switch","text":"Class: E1743SwitchController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" on \"off\" 2002 \"off\" off Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1743SwitchController integration : z2m controller : sensor.my_controller_action switch : switch.my_entity_id example_app : module : controllerx class : E1743SwitchController integration : name : z2m listen_to : mqtt controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : E1743SwitchController integration : deconz controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : E1743SwitchController integration : zha controller : 00:11:22:33:44:55:66:77:88 switch : switch.my_entity_id","title":"Switch"},{"location":"controllers/E1743/#cover","text":"Class: E1743CoverController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" toggle_open \"off\" 2002 \"off\" toggle_close brightness_move_up 1001 move_with_on_off_0_83 open brightness_move_down 2001 move_1_83_0_0 close brightness_stop 1003 , 2003 stop , stop_with_on_off stop Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1743CoverController integration : z2m controller : sensor.my_controller_action cover : cover.my_entity_id example_app : module : controllerx class : E1743CoverController integration : name : z2m listen_to : mqtt controller : my_controller cover : cover.my_entity_id example_app : module : controllerx class : E1743CoverController integration : deconz controller : my_controller cover : cover.my_entity_id example_app : module : controllerx class : E1743CoverController integration : zha controller : 00:11:22:33:44:55:66:77:88 cover : cover.my_entity_id","title":"Cover"},{"location":"controllers/E1744/","text":"Picture Controller types Integrations Light \u2014 E1744LightController Media Player \u2014 E1744MediaPlayerController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: E1744LightController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions brightness_move_down 3001 move_1_195_0_0 hold_brightness_down brightness_move_up 2001 move_0_195_0_0 hold_brightness_up brightness_stop 2003 , 3003 stop release toggle 1002 toggle toggle brightness_step_up 1004 step_0_1_0_0_0 on_full_brightness brightness_step_down 1005 step_1_1_0_0_0 on_min_brightness Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1744LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : E1744LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1744LightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1744LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id Media Player Class: E1744MediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions brightness_move_down 3001 move_1_195_0_0 hold_volume_down brightness_move_up 2001 move_0_195_0_0 hold_volume_up brightness_stop 2003 , 3003 stop release toggle 1002 toggle play_pause brightness_step_up 1004 step_0_1_0_0_0 next_track brightness_step_down 1005 step_1_1_0_0_0 previous_track Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1744MediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : E1744MediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : E1744MediaPlayerController integration : deconz controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : E1744MediaPlayerController integration : zha controller : 00:11:22:33:44:55:66:77:88 media_player : media_player.my_entity_id","title":"E1744"},{"location":"controllers/E1744/#light","text":"Class: E1744LightController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions brightness_move_down 3001 move_1_195_0_0 hold_brightness_down brightness_move_up 2001 move_0_195_0_0 hold_brightness_up brightness_stop 2003 , 3003 stop release toggle 1002 toggle toggle brightness_step_up 1004 step_0_1_0_0_0 on_full_brightness brightness_step_down 1005 step_1_1_0_0_0 on_min_brightness Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1744LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : E1744LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1744LightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1744LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/E1744/#media-player","text":"Class: E1744MediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions brightness_move_down 3001 move_1_195_0_0 hold_volume_down brightness_move_up 2001 move_0_195_0_0 hold_volume_up brightness_stop 2003 , 3003 stop release toggle 1002 toggle play_pause brightness_step_up 1004 step_0_1_0_0_0 next_track brightness_step_down 1005 step_1_1_0_0_0 previous_track Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1744MediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : E1744MediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : E1744MediaPlayerController integration : deconz controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : E1744MediaPlayerController integration : zha controller : 00:11:22:33:44:55:66:77:88 media_player : media_player.my_entity_id","title":"Media Player"},{"location":"controllers/E1766/","text":"Picture Controller types Integrations Light \u2014 E1766LightController Switch \u2014 E1766SwitchController Cover \u2014 E1766CoverController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: E1766LightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions open 1002 up_open on close 2002 down_close off 1003 on_full_brightness Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1766LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : E1766LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1766LightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1766LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id Switch Class: E1766SwitchController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions open 1002 up_open on close 2002 down_close off Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1766SwitchController integration : z2m controller : sensor.my_controller_action switch : switch.my_entity_id example_app : module : controllerx class : E1766SwitchController integration : name : z2m listen_to : mqtt controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : E1766SwitchController integration : deconz controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : E1766SwitchController integration : zha controller : 00:11:22:33:44:55:66:77:88 switch : switch.my_entity_id Cover Class: E1766CoverController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions open 1002 up_open toggle_open close 2002 down_close toggle_close stop 1003 , 2003 stop stop Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1766CoverController integration : z2m controller : sensor.my_controller_action cover : cover.my_entity_id example_app : module : controllerx class : E1766CoverController integration : name : z2m listen_to : mqtt controller : my_controller cover : cover.my_entity_id example_app : module : controllerx class : E1766CoverController integration : deconz controller : my_controller cover : cover.my_entity_id example_app : module : controllerx class : E1766CoverController integration : zha controller : 00:11:22:33:44:55:66:77:88 cover : cover.my_entity_id","title":"E1766"},{"location":"controllers/E1766/#light","text":"Class: E1766LightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions open 1002 up_open on close 2002 down_close off 1003 on_full_brightness Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1766LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : E1766LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1766LightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1766LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/E1766/#switch","text":"Class: E1766SwitchController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions open 1002 up_open on close 2002 down_close off Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1766SwitchController integration : z2m controller : sensor.my_controller_action switch : switch.my_entity_id example_app : module : controllerx class : E1766SwitchController integration : name : z2m listen_to : mqtt controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : E1766SwitchController integration : deconz controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : E1766SwitchController integration : zha controller : 00:11:22:33:44:55:66:77:88 switch : switch.my_entity_id","title":"Switch"},{"location":"controllers/E1766/#cover","text":"Class: E1766CoverController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions open 1002 up_open toggle_open close 2002 down_close toggle_close stop 1003 , 2003 stop stop Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1766CoverController integration : z2m controller : sensor.my_controller_action cover : cover.my_entity_id example_app : module : controllerx class : E1766CoverController integration : name : z2m listen_to : mqtt controller : my_controller cover : cover.my_entity_id example_app : module : controllerx class : E1766CoverController integration : deconz controller : my_controller cover : cover.my_entity_id example_app : module : controllerx class : E1766CoverController integration : zha controller : 00:11:22:33:44:55:66:77:88 cover : cover.my_entity_id","title":"Cover"},{"location":"controllers/E1810/","text":"Picture Controller types Integrations Light \u2014 E1810Controller Media Player \u2014 E1810MediaPlayerController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: E1810Controller Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions toggle 1002 toggle toggle toggle_hold 1001 press_2_0_0 sync brightness_up_click 2002 step_with_on_off_0_43_5 click_brightness_up brightness_down_click 3002 step_1_43_5_0_0 click_brightness_down arrow_left_click 4002 press_257_13_0 click_color_down arrow_right_click 5002 press_256_13_0 click_color_up brightness_up_hold 2001 move_with_on_off_0_83 , move_with_on_off_0_84 hold_brightness_up brightness_up_release , brightness_down_release , arrow_left_release , arrow_right_release 2003 , 3003 , 4003 , 5003 stop_with_on_off , release release brightness_down_hold 3001 move_1_83_0_0 , move_1_84_0_0 hold_brightness_down arrow_left_hold 4001 hold_3329_0 hold_color_down arrow_right_hold 5001 hold_3328_0 hold_color_up Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1810Controller integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : E1810Controller integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1810Controller integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1810Controller integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id Media Player Class: E1810MediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions toggle 1002 toggle play_pause brightness_up_click 2002 step_with_on_off_0_43_5 click_volume_up brightness_down_click 3002 step_1_43_5_0_0 click_volume_down arrow_left_click 4002 press_257_13_0 previous_track arrow_right_click 5002 press_256_13_0 next_track arrow_left_hold 4001 hold_3329_0 previous_source arrow_right_hold 5001 hold_3328_0 next_source brightness_up_hold 2001 move_with_on_off_0_83 , move_with_on_off_0_84 hold_volume_up brightness_up_release , brightness_down_release 2003 , 3003 stop_with_on_off , release release brightness_down_hold 3001 move_1_83_0_0 , move_1_84_0_0 hold_volume_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1810MediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : E1810MediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : E1810MediaPlayerController integration : deconz controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : E1810MediaPlayerController integration : zha controller : 00:11:22:33:44:55:66:77:88 media_player : media_player.my_entity_id","title":"E1810"},{"location":"controllers/E1810/#light","text":"Class: E1810Controller Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions toggle 1002 toggle toggle toggle_hold 1001 press_2_0_0 sync brightness_up_click 2002 step_with_on_off_0_43_5 click_brightness_up brightness_down_click 3002 step_1_43_5_0_0 click_brightness_down arrow_left_click 4002 press_257_13_0 click_color_down arrow_right_click 5002 press_256_13_0 click_color_up brightness_up_hold 2001 move_with_on_off_0_83 , move_with_on_off_0_84 hold_brightness_up brightness_up_release , brightness_down_release , arrow_left_release , arrow_right_release 2003 , 3003 , 4003 , 5003 stop_with_on_off , release release brightness_down_hold 3001 move_1_83_0_0 , move_1_84_0_0 hold_brightness_down arrow_left_hold 4001 hold_3329_0 hold_color_down arrow_right_hold 5001 hold_3328_0 hold_color_up Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1810Controller integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : E1810Controller integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1810Controller integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1810Controller integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/E1810/#media-player","text":"Class: E1810MediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions toggle 1002 toggle play_pause brightness_up_click 2002 step_with_on_off_0_43_5 click_volume_up brightness_down_click 3002 step_1_43_5_0_0 click_volume_down arrow_left_click 4002 press_257_13_0 previous_track arrow_right_click 5002 press_256_13_0 next_track arrow_left_hold 4001 hold_3329_0 previous_source arrow_right_hold 5001 hold_3328_0 next_source brightness_up_hold 2001 move_with_on_off_0_83 , move_with_on_off_0_84 hold_volume_up brightness_up_release , brightness_down_release 2003 , 3003 stop_with_on_off , release release brightness_down_hold 3001 move_1_83_0_0 , move_1_84_0_0 hold_volume_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1810MediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : E1810MediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : E1810MediaPlayerController integration : deconz controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : E1810MediaPlayerController integration : zha controller : 00:11:22:33:44:55:66:77:88 media_player : media_player.my_entity_id","title":"Media Player"},{"location":"controllers/E1812/","text":"Picture Controller types Integrations Light \u2014 E1812LightController Switch \u2014 E1812SwitchController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: E1812LightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" toggle brightness_move_up 1001 move_with_on_off hold_brightness_toggle brightness_stop 1003 stop release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1812LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : E1812LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1812LightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1812LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id Switch Class: E1812SwitchController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" toggle Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1812SwitchController integration : z2m controller : sensor.my_controller_action switch : switch.my_entity_id example_app : module : controllerx class : E1812SwitchController integration : name : z2m listen_to : mqtt controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : E1812SwitchController integration : deconz controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : E1812SwitchController integration : zha controller : 00:11:22:33:44:55:66:77:88 switch : switch.my_entity_id","title":"E1812"},{"location":"controllers/E1812/#light","text":"Class: E1812LightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" toggle brightness_move_up 1001 move_with_on_off hold_brightness_toggle brightness_stop 1003 stop release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1812LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : E1812LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1812LightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : E1812LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/E1812/#switch","text":"Class: E1812SwitchController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" toggle Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : E1812SwitchController integration : z2m controller : sensor.my_controller_action switch : switch.my_entity_id example_app : module : controllerx class : E1812SwitchController integration : name : z2m listen_to : mqtt controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : E1812SwitchController integration : deconz controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : E1812SwitchController integration : zha controller : 00:11:22:33:44:55:66:77:88 switch : switch.my_entity_id","title":"Switch"},{"location":"controllers/E1EG7F/","text":"Picture Controller types Integrations Light \u2014 E1EG7FLightController Zigbee2MQTT (z2m) Light Class: E1EG7FLightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions \"on\" on on_long click_color_up on_double on_full_color_temp up click_brightness_up up_long on_full_brightness down click_brightness_down down_long on_min_brightness \"off\" off off_long click_color_down off_double on_min_color_temp Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : E1EG7FLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : E1EG7FLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"E1EG7F"},{"location":"controllers/E1EG7F/#light","text":"Class: E1EG7FLightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions \"on\" on on_long click_color_up on_double on_full_color_temp up click_brightness_up up_long on_full_brightness down click_brightness_down down_long on_min_brightness \"off\" off off_long click_color_down off_double on_min_color_temp Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : E1EG7FLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : E1EG7FLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/HG06323/","text":"Picture Controller types Integrations Light \u2014 HG06323LightController Zigbee2MQTT (z2m) ZHA (zha) Light Class: HG06323LightController Default delay: 350ms Default mapping: Zigbee2MQTT ZHA Predefined actions \"on\" \"on\" on brightness_step_up step_0_51_10 click_brightness_up brightness_move_up move_0_51 hold_brightness_up brightness_stop stop release brightness_step_down step_1_51_10 click_brightness_down brightness_move_down move_1_51 hold_brightness_down \"off\" \"off\" off Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) ZHA example_app : module : controllerx class : HG06323LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : HG06323LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : HG06323LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"HG06323"},{"location":"controllers/HG06323/#light","text":"Class: HG06323LightController Default delay: 350ms Default mapping: Zigbee2MQTT ZHA Predefined actions \"on\" \"on\" on brightness_step_up step_0_51_10 click_brightness_up brightness_move_up move_0_51 hold_brightness_up brightness_stop stop release brightness_step_down step_1_51_10 click_brightness_down brightness_move_down move_1_51 hold_brightness_down \"off\" \"off\" off Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) ZHA example_app : module : controllerx class : HG06323LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : HG06323LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : HG06323LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/HMPB2WM552/","text":"Picture Controller types Integrations Light \u2014 HMPB2WM552LightController Homematic (homematic) Light Class: HMPB2WM552LightController Default delay: 350ms Default mapping: Homematic Predefined actions PRESS_SHORT_1 off PRESS_LONG_1 hold_brightness_down PRESS_LONG_RELEASE_1 , PRESS_LONG_RELEASE_2 release PRESS_SHORT_2 on PRESS_LONG_2 hold_brightness_up Homematic example_app : module : controllerx class : HMPB2WM552LightController integration : homematic controller : my_controller light : light.my_entity_id","title":"HMPB2WM552"},{"location":"controllers/HMPB2WM552/#light","text":"Class: HMPB2WM552LightController Default delay: 350ms Default mapping: Homematic Predefined actions PRESS_SHORT_1 off PRESS_LONG_1 hold_brightness_down PRESS_LONG_RELEASE_1 , PRESS_LONG_RELEASE_2 release PRESS_SHORT_2 on PRESS_LONG_2 hold_brightness_up Homematic example_app : module : controllerx class : HMPB2WM552LightController integration : homematic controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/HMPB6WM55/","text":"Picture Controller types Integrations Light \u2014 HMPB6WM55LightController Homematic (homematic) Light Class: HMPB6WM55LightController Default delay: 350ms Default mapping: Homematic Predefined actions PRESS_SHORT_1 off PRESS_LONG_1 , PRESS_LONG_2 sync PRESS_LONG_RELEASE_1 , PRESS_LONG_RELEASE_2 , PRESS_LONG_RELEASE_3 , PRESS_LONG_RELEASE_4 , PRESS_LONG_RELEASE_5 , PRESS_LONG_RELEASE_6 release PRESS_SHORT_2 on PRESS_SHORT_3 click_brightness_down PRESS_LONG_3 hold_brightness_down PRESS_SHORT_4 click_brightness_up PRESS_LONG_4 hold_brightness_up PRESS_SHORT_5 click_color_down PRESS_LONG_5 hold_color_down PRESS_SHORT_6 click_color_up PRESS_LONG_6 hold_color_up Homematic example_app : module : controllerx class : HMPB6WM55LightController integration : homematic controller : my_controller light : light.my_entity_id","title":"HMPB6WM55"},{"location":"controllers/HMPB6WM55/#light","text":"Class: HMPB6WM55LightController Default delay: 350ms Default mapping: Homematic Predefined actions PRESS_SHORT_1 off PRESS_LONG_1 , PRESS_LONG_2 sync PRESS_LONG_RELEASE_1 , PRESS_LONG_RELEASE_2 , PRESS_LONG_RELEASE_3 , PRESS_LONG_RELEASE_4 , PRESS_LONG_RELEASE_5 , PRESS_LONG_RELEASE_6 release PRESS_SHORT_2 on PRESS_SHORT_3 click_brightness_down PRESS_LONG_3 hold_brightness_down PRESS_SHORT_4 click_brightness_up PRESS_LONG_4 hold_brightness_up PRESS_SHORT_5 click_color_down PRESS_LONG_5 hold_color_down PRESS_SHORT_6 click_color_up PRESS_LONG_6 hold_color_up Homematic example_app : module : controllerx class : HMPB6WM55LightController integration : homematic controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/HMPBI4FM/","text":"Picture Controller types Integrations Light \u2014 HMPBI4FMLightController Homematic (homematic) Light Class: HMPBI4FMLightController Default delay: 350ms Default mapping: Homematic Predefined actions PRESS_SHORT_1 off PRESS_LONG_1 click_color_down PRESS_SHORT_2 on PRESS_LONG_2 click_color_up PRESS_SHORT_3 click_brightness_down PRESS_LONG_3 on_min_brightness PRESS_SHORT_4 click_brightness_up PRESS_LONG_4 on_full_brightness Homematic example_app : module : controllerx class : HMPBI4FMLightController integration : homematic controller : my_controller light : light.my_entity_id","title":"HMPBI4FM"},{"location":"controllers/HMPBI4FM/#light","text":"Class: HMPBI4FMLightController Default delay: 350ms Default mapping: Homematic Predefined actions PRESS_SHORT_1 off PRESS_LONG_1 click_color_down PRESS_SHORT_2 on PRESS_LONG_2 click_color_up PRESS_SHORT_3 click_brightness_down PRESS_LONG_3 on_min_brightness PRESS_SHORT_4 click_brightness_up PRESS_LONG_4 on_full_brightness Homematic example_app : module : controllerx class : HMPBI4FMLightController integration : homematic controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/HMSenMDIRWM55/","text":"Picture Controller types Integrations Light \u2014 HMSenMDIRWM55LightController Homematic (homematic) Light Class: HMSenMDIRWM55LightController Default delay: 350ms Default mapping: Homematic Predefined actions PRESS_SHORT_1 off PRESS_LONG_1 hold_brightness_down PRESS_LONG_RELEASE_1 , PRESS_LONG_RELEASE_2 release PRESS_SHORT_2 on PRESS_LONG_2 hold_brightness_up Homematic example_app : module : controllerx class : HMSenMDIRWM55LightController integration : homematic controller : my_controller light : light.my_entity_id","title":"HMSenMDIRWM55"},{"location":"controllers/HMSenMDIRWM55/#light","text":"Class: HMSenMDIRWM55LightController Default delay: 350ms Default mapping: Homematic Predefined actions PRESS_SHORT_1 off PRESS_LONG_1 hold_brightness_down PRESS_LONG_RELEASE_1 , PRESS_LONG_RELEASE_2 release PRESS_SHORT_2 on PRESS_LONG_2 hold_brightness_up Homematic example_app : module : controllerx class : HMSenMDIRWM55LightController integration : homematic controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/HueDimmer/","text":"Picture Controller types Integrations Light \u2014 HueDimmerController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: HueDimmerController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions on-press 1002 on_short_release on on-hold 1001 on_hold hold_color_up on-hold-release , up-hold-release , down-hold-release , off-hold-release 1003 , 2003 , 3003 , 4003 off_long_release , down_long_release , up_long_release , on_long_release release up-press 2002 up_short_release click_brightness_up up-hold 2001 up_hold hold_brightness_up down-press 3002 down_short_release click_brightness_down down-hold 3001 down_hold hold_brightness_down off-press 4002 off_short_release off off-hold 4001 off_hold hold_color_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : HueDimmerController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : HueDimmerController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : HueDimmerController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : HueDimmerController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"HueDimmer"},{"location":"controllers/HueDimmer/#light","text":"Class: HueDimmerController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions on-press 1002 on_short_release on on-hold 1001 on_hold hold_color_up on-hold-release , up-hold-release , down-hold-release , off-hold-release 1003 , 2003 , 3003 , 4003 off_long_release , down_long_release , up_long_release , on_long_release release up-press 2002 up_short_release click_brightness_up up-hold 2001 up_hold hold_brightness_up down-press 3002 down_short_release click_brightness_down down-hold 3001 down_hold hold_brightness_down off-press 4002 off_short_release off off-hold 4001 off_hold hold_color_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : HueDimmerController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : HueDimmerController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : HueDimmerController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : HueDimmerController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/HueSmartButton/","text":"Picture Controller types Integrations Light \u2014 HueSmartButtonLightController deCONZ (deconz) Light Class: HueSmartButtonLightController Default delay: 350ms Default mapping: deCONZ Predefined actions 1001 hold_brightness_toggle 1002 toggle 1003 release deCONZ example_app : module : controllerx class : HueSmartButtonLightController integration : deconz controller : my_controller light : light.my_entity_id","title":"HueSmartButton"},{"location":"controllers/HueSmartButton/#light","text":"Class: HueSmartButtonLightController Default delay: 350ms Default mapping: deCONZ Predefined actions 1001 hold_brightness_toggle 1002 toggle 1003 release deCONZ example_app : module : controllerx class : HueSmartButtonLightController integration : deconz controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/ICTCG1/","text":"Picture Controller types Integrations Light \u2014 ICTCG1Controller Media Player \u2014 ICTCG1MediaPlayerController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: ICTCG1Controller Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions rotate_left move_1_70 , move_1_195 hold_brightness_down rotate_left_quick 4002 move_to_level_with_on_off_0_1 rotate_left_quick rotate_right move_with_on_off_0_70 hold_brightness_up rotate_right_quick 1002 move_to_level_with_on_off_255_1 rotate_right_quick rotate_stop stop release 2002 click_brightness_up 3002 click_brightness_down move_with_on_off_0_195 on Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : ICTCG1Controller integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : ICTCG1Controller integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : ICTCG1Controller integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : ICTCG1Controller integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id Media Player Class: ICTCG1MediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions rotate_left move_1_70 , move_1_195 hold_volume_down rotate_left_quick 4002 move_to_level_with_on_off_0_1 rotate_left_quick rotate_right move_with_on_off_0_70 , move_with_on_off_0_195 hold_volume_up rotate_right_quick 1002 move_to_level_with_on_off_255_1 rotate_right_quick rotate_stop stop release 2002 click_volume_up 3002 click_volume_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : ICTCG1MediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : ICTCG1MediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : ICTCG1MediaPlayerController integration : deconz controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : ICTCG1MediaPlayerController integration : zha controller : 00:11:22:33:44:55:66:77:88 media_player : media_player.my_entity_id","title":"ICTCG1"},{"location":"controllers/ICTCG1/#light","text":"Class: ICTCG1Controller Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions rotate_left move_1_70 , move_1_195 hold_brightness_down rotate_left_quick 4002 move_to_level_with_on_off_0_1 rotate_left_quick rotate_right move_with_on_off_0_70 hold_brightness_up rotate_right_quick 1002 move_to_level_with_on_off_255_1 rotate_right_quick rotate_stop stop release 2002 click_brightness_up 3002 click_brightness_down move_with_on_off_0_195 on Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : ICTCG1Controller integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : ICTCG1Controller integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : ICTCG1Controller integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : ICTCG1Controller integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/ICTCG1/#media-player","text":"Class: ICTCG1MediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions rotate_left move_1_70 , move_1_195 hold_volume_down rotate_left_quick 4002 move_to_level_with_on_off_0_1 rotate_left_quick rotate_right move_with_on_off_0_70 , move_with_on_off_0_195 hold_volume_up rotate_right_quick 1002 move_to_level_with_on_off_255_1 rotate_right_quick rotate_stop stop release 2002 click_volume_up 3002 click_volume_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : ICTCG1MediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : ICTCG1MediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : ICTCG1MediaPlayerController integration : deconz controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : ICTCG1MediaPlayerController integration : zha controller : 00:11:22:33:44:55:66:77:88 media_player : media_player.my_entity_id","title":"Media Player"},{"location":"controllers/LZL4BWHL01/","text":"Picture Controller types Integrations Light \u2014 LZL4BWHL01LightController deCONZ (deconz) ZHA (zha) Light Class: LZL4BWHL01LightController Default delay: 350ms Default mapping: deCONZ ZHA Predefined actions 1002 move_to_level_with_on_off_254_4 on_full_brightness 2001 step_with_on_off_0_30_6 hold_brightness_up 2003 , 3003 stop release 3001 step_1_30_6 hold_brightness_down 4002 move_to_level_with_on_off_0_4 off deCONZ ZHA example_app : module : controllerx class : LZL4BWHL01LightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : LZL4BWHL01LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"LZL4BWHL01"},{"location":"controllers/LZL4BWHL01/#light","text":"Class: LZL4BWHL01LightController Default delay: 350ms Default mapping: deCONZ ZHA Predefined actions 1002 move_to_level_with_on_off_254_4 on_full_brightness 2001 step_with_on_off_0_30_6 hold_brightness_up 2003 , 3003 stop release 3001 step_1_30_6 hold_brightness_down 4002 move_to_level_with_on_off_0_4 off deCONZ ZHA example_app : module : controllerx class : LZL4BWHL01LightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : LZL4BWHL01LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/Legrand600083/","text":"Picture Controller types Integrations Light \u2014 Legrand600083LightController Zigbee2MQTT (z2m) ZHA (zha) Light Class: Legrand600083LightController Default delay: 350ms Default mapping: Zigbee2MQTT ZHA Predefined actions \"on\" 1_on on \"off\" 1_off off brightness_move_up 1_move_up hold_brightness_up brightness_move_down 1_move_down hold_brightness_down brightness_stop 1_stop release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) ZHA example_app : module : controllerx class : Legrand600083LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : Legrand600083LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : Legrand600083LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Legrand600083"},{"location":"controllers/Legrand600083/#light","text":"Class: Legrand600083LightController Default delay: 350ms Default mapping: Zigbee2MQTT ZHA Predefined actions \"on\" 1_on on \"off\" 1_off off brightness_move_up 1_move_up hold_brightness_up brightness_move_down 1_move_down hold_brightness_down brightness_stop 1_stop release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) ZHA example_app : module : controllerx class : Legrand600083LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : Legrand600083LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : Legrand600083LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/Legrand600088/","text":"Picture Controller types Integrations Light \u2014 Legrand600088LightController Zigbee2MQTT (z2m) ZHA (zha) Light Class: Legrand600088LightController Default delay: 350ms Default mapping: Zigbee2MQTT ZHA Predefined actions on_left 1_on on off_left 1_off off brightness_move_up_left 1_move_up hold_color_up brightness_move_down_left 1_move_down hold_color_down brightness_stop_left , brightness_stop_right 1_stop , 2_stop release on_right 2_on on_full_brightness off_right 2_off on_min_brightness brightness_move_up_right 2_move_up hold_brightness_up brightness_move_down_right 2_move_down hold_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) ZHA example_app : module : controllerx class : Legrand600088LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : Legrand600088LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : Legrand600088LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Legrand600088"},{"location":"controllers/Legrand600088/#light","text":"Class: Legrand600088LightController Default delay: 350ms Default mapping: Zigbee2MQTT ZHA Predefined actions on_left 1_on on off_left 1_off off brightness_move_up_left 1_move_up hold_color_up brightness_move_down_left 1_move_down hold_color_down brightness_stop_left , brightness_stop_right 1_stop , 2_stop release on_right 2_on on_full_brightness off_right 2_off on_min_brightness brightness_move_up_right 2_move_up hold_brightness_up brightness_move_down_right 2_move_down hold_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) ZHA example_app : module : controllerx class : Legrand600088LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : Legrand600088LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : Legrand600088LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/LutronPJ22B/","text":"Picture Controller types Integrations Light \u2014 LutronPJ22BLightController Media Player \u2014 LutronPJ22BMediaPlayerController State (state) Lutron Caseta (lutron) Light Class: LutronPJ22BLightController Default delay: 350ms Default mapping: State Lutron Caseta Predefined actions 1 on_full_brightness 4 button_4_press off button_2_press on State Lutron Caseta example_app : module : controllerx class : LutronPJ22BLightController integration : state controller : sensor.my_custom_controller light : light.my_entity_id example_app : module : controllerx class : LutronPJ22BLightController integration : lutron controller : 87654321 light : light.my_entity_id Media Player Class: LutronPJ22BMediaPlayerController Default delay: 500ms Default mapping: State Lutron Caseta Predefined actions 1 button_2_press play_pause 4 button_4_press next_track State Lutron Caseta example_app : module : controllerx class : LutronPJ22BMediaPlayerController integration : state controller : sensor.my_custom_controller media_player : media_player.my_entity_id example_app : module : controllerx class : LutronPJ22BMediaPlayerController integration : lutron controller : 87654321 media_player : media_player.my_entity_id","title":"LutronPJ22B"},{"location":"controllers/LutronPJ22B/#light","text":"Class: LutronPJ22BLightController Default delay: 350ms Default mapping: State Lutron Caseta Predefined actions 1 on_full_brightness 4 button_4_press off button_2_press on State Lutron Caseta example_app : module : controllerx class : LutronPJ22BLightController integration : state controller : sensor.my_custom_controller light : light.my_entity_id example_app : module : controllerx class : LutronPJ22BLightController integration : lutron controller : 87654321 light : light.my_entity_id","title":"Light"},{"location":"controllers/LutronPJ22B/#media-player","text":"Class: LutronPJ22BMediaPlayerController Default delay: 500ms Default mapping: State Lutron Caseta Predefined actions 1 button_2_press play_pause 4 button_4_press next_track State Lutron Caseta example_app : module : controllerx class : LutronPJ22BMediaPlayerController integration : state controller : sensor.my_custom_controller media_player : media_player.my_entity_id example_app : module : controllerx class : LutronPJ22BMediaPlayerController integration : lutron controller : 87654321 media_player : media_player.my_entity_id","title":"Media Player"},{"location":"controllers/LutronPJ22BRL/","text":"Picture Controller types Integrations Light \u2014 LutronPJ22BRLLightController Media Player \u2014 LutronPJ22BRLMediaPlayerController State (state) Light Class: LutronPJ22BRLLightController Default delay: 350ms Default mapping: State Predefined actions 1 on_full_brightness 8 hold_brightness_up 16 hold_brightness_down 4 off 0 release State example_app : module : controllerx class : LutronPJ22BRLLightController integration : state controller : sensor.my_custom_controller light : light.my_entity_id Media Player Class: LutronPJ22BRLMediaPlayerController Default delay: 500ms Default mapping: State Predefined actions 1 play_pause 8 hold_volume_up 16 hold_volume_down 4 next_track 0 release State example_app : module : controllerx class : LutronPJ22BRLMediaPlayerController integration : state controller : sensor.my_custom_controller media_player : media_player.my_entity_id","title":"LutronPJ22BRL"},{"location":"controllers/LutronPJ22BRL/#light","text":"Class: LutronPJ22BRLLightController Default delay: 350ms Default mapping: State Predefined actions 1 on_full_brightness 8 hold_brightness_up 16 hold_brightness_down 4 off 0 release State example_app : module : controllerx class : LutronPJ22BRLLightController integration : state controller : sensor.my_custom_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/LutronPJ22BRL/#media-player","text":"Class: LutronPJ22BRLMediaPlayerController Default delay: 500ms Default mapping: State Predefined actions 1 play_pause 8 hold_volume_up 16 hold_volume_down 4 next_track 0 release State example_app : module : controllerx class : LutronPJ22BRLMediaPlayerController integration : state controller : sensor.my_custom_controller media_player : media_player.my_entity_id","title":"Media Player"},{"location":"controllers/LutronPJ23BRL/","text":"Picture Controller types Integrations Light \u2014 LutronPJ23BRLLightController Media Player \u2014 LutronPJ23BRLMediaPlayerController State (state) Lutron Caseta (lutron) Light Class: LutronPJ23BRLLightController Default delay: 350ms Default mapping: State Lutron Caseta Predefined actions 1 button_2_press on_full_brightness 8 button_5_press hold_brightness_up 2 button_3_press set_half_brightness 16 button_6_press hold_brightness_down 4 button_4_press off 0 button_5_release , button_6_release release State Lutron Caseta example_app : module : controllerx class : LutronPJ23BRLLightController integration : state controller : sensor.my_custom_controller light : light.my_entity_id example_app : module : controllerx class : LutronPJ23BRLLightController integration : lutron controller : 87654321 light : light.my_entity_id Media Player Class: LutronPJ23BRLMediaPlayerController Default delay: 500ms Default mapping: State Lutron Caseta Predefined actions 1 button_2_press play_pause 8 button_5_press hold_volume_up 2 button_3_press next_source 16 button_6_press hold_volume_down 4 button_4_press next_track 0 button_5_release , button_6_release release State Lutron Caseta example_app : module : controllerx class : LutronPJ23BRLMediaPlayerController integration : state controller : sensor.my_custom_controller media_player : media_player.my_entity_id example_app : module : controllerx class : LutronPJ23BRLMediaPlayerController integration : lutron controller : 87654321 media_player : media_player.my_entity_id","title":"LutronPJ23BRL"},{"location":"controllers/LutronPJ23BRL/#light","text":"Class: LutronPJ23BRLLightController Default delay: 350ms Default mapping: State Lutron Caseta Predefined actions 1 button_2_press on_full_brightness 8 button_5_press hold_brightness_up 2 button_3_press set_half_brightness 16 button_6_press hold_brightness_down 4 button_4_press off 0 button_5_release , button_6_release release State Lutron Caseta example_app : module : controllerx class : LutronPJ23BRLLightController integration : state controller : sensor.my_custom_controller light : light.my_entity_id example_app : module : controllerx class : LutronPJ23BRLLightController integration : lutron controller : 87654321 light : light.my_entity_id","title":"Light"},{"location":"controllers/LutronPJ23BRL/#media-player","text":"Class: LutronPJ23BRLMediaPlayerController Default delay: 500ms Default mapping: State Lutron Caseta Predefined actions 1 button_2_press play_pause 8 button_5_press hold_volume_up 2 button_3_press next_source 16 button_6_press hold_volume_down 4 button_4_press next_track 0 button_5_release , button_6_release release State Lutron Caseta example_app : module : controllerx class : LutronPJ23BRLMediaPlayerController integration : state controller : sensor.my_custom_controller media_player : media_player.my_entity_id example_app : module : controllerx class : LutronPJ23BRLMediaPlayerController integration : lutron controller : 87654321 media_player : media_player.my_entity_id","title":"Media Player"},{"location":"controllers/LutronPJ24B/","text":"Picture Controller types Integrations Light \u2014 LutronPJ24BLightController Media Player \u2014 LutronPJ24BMediaPlayerController State (state) Light Class: LutronPJ24BLightController Default delay: 350ms Default mapping: State Predefined actions 1 on_full_brightness 2 hold_brightness_up 4 hold_brightness_down 8 off 0 release State example_app : module : controllerx class : LutronPJ24BLightController integration : state controller : sensor.my_custom_controller light : light.my_entity_id Media Player Class: LutronPJ24BMediaPlayerController Default delay: 500ms Default mapping: State Predefined actions 1 play_pause 2 hold_volume_up 4 hold_volume_down 8 next_track 0 release State example_app : module : controllerx class : LutronPJ24BMediaPlayerController integration : state controller : sensor.my_custom_controller media_player : media_player.my_entity_id","title":"LutronPJ24B"},{"location":"controllers/LutronPJ24B/#light","text":"Class: LutronPJ24BLightController Default delay: 350ms Default mapping: State Predefined actions 1 on_full_brightness 2 hold_brightness_up 4 hold_brightness_down 8 off 0 release State example_app : module : controllerx class : LutronPJ24BLightController integration : state controller : sensor.my_custom_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/LutronPJ24B/#media-player","text":"Class: LutronPJ24BMediaPlayerController Default delay: 500ms Default mapping: State Predefined actions 1 play_pause 2 hold_volume_up 4 hold_volume_down 8 next_track 0 release State example_app : module : controllerx class : LutronPJ24BMediaPlayerController integration : state controller : sensor.my_custom_controller media_player : media_player.my_entity_id","title":"Media Player"},{"location":"controllers/MFKZQ01LM/","text":"Picture Controller types Integrations Light \u2014 MFKZQ01LMLightController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: MFKZQ01LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions shake 1 shake on_min_brightness tap 6 knock toggle slide 5 slide on_full_brightness flip180 4 flip180 click_color_up flip90 3 flip90 click_color_down rotate_left 8 rotate_left click_brightness_down rotate_right 7 rotate_right click_brightness_up Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : MFKZQ01LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : MFKZQ01LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : MFKZQ01LMLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : MFKZQ01LMLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"MFKZQ01LM"},{"location":"controllers/MFKZQ01LM/#light","text":"Class: MFKZQ01LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions shake 1 shake on_min_brightness tap 6 knock toggle slide 5 slide on_full_brightness flip180 4 flip180 click_color_up flip90 3 flip90 click_color_down rotate_left 8 rotate_left click_brightness_down rotate_right 7 rotate_right click_brightness_up Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : MFKZQ01LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : MFKZQ01LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : MFKZQ01LMLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : MFKZQ01LMLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/MLI404002/","text":"Picture Controller types Integrations Light \u2014 MLI404002LightController Zigbee2MQTT (z2m) ZHA (zha) Light Class: MLI404002LightController Default delay: 350ms Default mapping: Zigbee2MQTT ZHA Predefined actions \"on\" , \"off\" \"on\" , \"off\" toggle brightness_step_up step_up click_brightness_up brightness_step_down step_down click_brightness_down brightness_move_up move_up hold_brightness_up brightness_move_down move_down hold_brightness_down brightness_stop stop release recall_1 recall on_full_brightness Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) ZHA example_app : module : controllerx class : MLI404002LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : MLI404002LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : MLI404002LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"MLI404002"},{"location":"controllers/MLI404002/#light","text":"Class: MLI404002LightController Default delay: 350ms Default mapping: Zigbee2MQTT ZHA Predefined actions \"on\" , \"off\" \"on\" , \"off\" toggle brightness_step_up step_up click_brightness_up brightness_step_down step_down click_brightness_down brightness_move_up move_up hold_brightness_up brightness_move_down move_down hold_brightness_down brightness_stop stop release recall_1 recall on_full_brightness Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) ZHA example_app : module : controllerx class : MLI404002LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : MLI404002LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : MLI404002LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/MLI404011/","text":"Picture Controller types Integrations Light \u2014 MLI404011LightController Zigbee2MQTT (z2m) deCONZ (deconz) Light Class: MLI404011LightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ Predefined actions \"on\" , \"off\" 1002 toggle brightness_down_click 3002 click_brightness_down brightness_down_hold 3001 hold_brightness_down brightness_down_release , brightness_up_release 2003 , 3003 release brightness_up_click 2002 click_brightness_up brightness_up_hold 2001 hold_brightness_up color_wheel 6002 xycolor_from_controller color_temp colortemp_from_controller 4002 click_color_up 5002 click_color_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : MLI404011LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : MLI404011LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : MLI404011LightController integration : deconz controller : my_controller light : light.my_entity_id","title":"MLI404011"},{"location":"controllers/MLI404011/#light","text":"Class: MLI404011LightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ Predefined actions \"on\" , \"off\" 1002 toggle brightness_down_click 3002 click_brightness_down brightness_down_hold 3001 hold_brightness_down brightness_down_release , brightness_up_release 2003 , 3003 release brightness_up_click 2002 click_brightness_up brightness_up_hold 2001 hold_brightness_up color_wheel 6002 xycolor_from_controller color_temp colortemp_from_controller 4002 click_color_up 5002 click_color_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : MLI404011LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : MLI404011LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : MLI404011LightController integration : deconz controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/OsramAC025XX00NJ/","text":"Picture Controller types Integrations Light \u2014 OsramAC025XX00NJLightController deCONZ (deconz) ZHA (zha) Light Class: OsramAC025XX00NJLightController Default delay: 350ms Default mapping: deCONZ ZHA Predefined actions 1002 1_on on 1001 1_move_with_on_off hold_brightness_up 1003 , 2003 , 3003 1_stop , 3_move_hue , 2_stop release 2002 2_off off 2001 2_move hold_brightness_down 3002 3_move_to_color_temp sync 3001 3_move_to_saturation hold_color_up deCONZ ZHA example_app : module : controllerx class : OsramAC025XX00NJLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : OsramAC025XX00NJLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"OsramAC025XX00NJ"},{"location":"controllers/OsramAC025XX00NJ/#light","text":"Class: OsramAC025XX00NJLightController Default delay: 350ms Default mapping: deCONZ ZHA Predefined actions 1002 1_on on 1001 1_move_with_on_off hold_brightness_up 1003 , 2003 , 3003 1_stop , 3_move_hue , 2_stop release 2002 2_off off 2001 2_move hold_brightness_down 3002 3_move_to_color_temp sync 3001 3_move_to_saturation hold_color_up deCONZ ZHA example_app : module : controllerx class : OsramAC025XX00NJLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : OsramAC025XX00NJLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/PTM215X/","text":"Picture Controller types Integrations Light \u2014 PTM215XLightController Zigbee2MQTT (z2m) deCONZ (deconz) Light Class: PTM215XLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ Predefined actions press_1 1002 on release_1 , release_2 , release_3 , release_4 , release_1_and_3 , release_2_and_4 3003 , 4003 , 5003 , 6003 release press_2 2002 off press_3 3002 on_full_brightness press_4 4002 on_min_brightness press_1_and_3 5002 on_full_color_temp press_2_and_4 6002 on_min_color_temp press_energy_bar 1001 , 2001 sync 3001 hold_brightness_up 4001 hold_brightness_down 5001 hold_color_up 6001 hold_color_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : PTM215XLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : PTM215XLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : PTM215XLightController integration : deconz controller : my_controller light : light.my_entity_id","title":"PTM215X"},{"location":"controllers/PTM215X/#light","text":"Class: PTM215XLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ Predefined actions press_1 1002 on release_1 , release_2 , release_3 , release_4 , release_1_and_3 , release_2_and_4 3003 , 4003 , 5003 , 6003 release press_2 2002 off press_3 3002 on_full_brightness press_4 4002 on_min_brightness press_1_and_3 5002 on_full_color_temp press_2_and_4 6002 on_min_color_temp press_energy_bar 1001 , 2001 sync 3001 hold_brightness_up 4001 hold_brightness_down 5001 hold_color_up 6001 hold_color_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : PTM215XLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : PTM215XLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : PTM215XLightController integration : deconz controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/Philips929002398602/","text":"Picture Controller types Integrations Light \u2014 Philips929002398602LightController Zigbee2MQTT (z2m) Light Class: Philips929002398602LightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions on_press_release on on_hold hold_color_up on_hold_release , up_hold_release , down_hold_release , off_hold_release release up_press_release click_brightness_up up_hold hold_brightness_up down_press_release click_brightness_down down_hold hold_brightness_down off_press_release off off_hold hold_color_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : Philips929002398602LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : Philips929002398602LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"Philips929002398602"},{"location":"controllers/Philips929002398602/#light","text":"Class: Philips929002398602LightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions on_press_release on on_hold hold_color_up on_hold_release , up_hold_release , down_hold_release , off_hold_release release up_press_release click_brightness_up up_hold hold_brightness_up down_press_release click_brightness_down down_hold hold_brightness_down off_press_release off off_hold hold_color_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : Philips929002398602LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : Philips929002398602LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/Philips929003017102/","text":"Picture Controller types Integrations Light \u2014 Philips929003017102LightController Zigbee2MQTT (z2m) deCONZ (deconz) Light Class: Philips929003017102LightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ Predefined actions left_press , right_press 1002 , 2002 toggle left_hold , right_hold 1001 , 2001 hold_brightness_toggle left_hold_release , right_hold_release 1003 , 2003 release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : Philips929003017102LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : Philips929003017102LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : Philips929003017102LightController integration : deconz controller : my_controller light : light.my_entity_id","title":"Philips929003017102"},{"location":"controllers/Philips929003017102/#light","text":"Class: Philips929003017102LightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ Predefined actions left_press , right_press 1002 , 2002 toggle left_hold , right_hold 1001 , 2001 hold_brightness_toggle left_hold_release , right_hold_release 1003 , 2003 release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : Philips929003017102LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : Philips929003017102LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : Philips929003017102LightController integration : deconz controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/SNZB01/","text":"Picture Controller types Integrations Light \u2014 SNZB01LightController Zigbee2MQTT (z2m) ZHA (zha) Light Class: SNZB01LightController Default delay: 350ms Default mapping: Zigbee2MQTT ZHA Predefined actions single toggle toggle double \"on\" on_full_brightness long \"off\" on_min_brightness Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) ZHA example_app : module : controllerx class : SNZB01LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : SNZB01LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : SNZB01LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"SNZB01"},{"location":"controllers/SNZB01/#light","text":"Class: SNZB01LightController Default delay: 350ms Default mapping: Zigbee2MQTT ZHA Predefined actions single toggle toggle double \"on\" on_full_brightness long \"off\" on_min_brightness Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) ZHA example_app : module : controllerx class : SNZB01LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : SNZB01LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : SNZB01LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/SmartThingsButton/","text":"Picture Controller types Integrations Light \u2014 SmartThingsButtonLightController Media Player \u2014 SmartThingsButtonMediaPlayerController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: SmartThingsButtonLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions single 1002 button_single_1_0_0_0 toggle double 1004 button_double_2_0_0_0 on_full_brightness hold 1001 button_hold_3_0_0_0 set_half_brightness Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : SmartThingsButtonLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : SmartThingsButtonLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : SmartThingsButtonLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : SmartThingsButtonLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id Media Player Class: SmartThingsButtonMediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions single_click 1002 button_single_1_0_0_0 play_pause double_click 1004 button_double_2_0_0_0 next_track hold 1001 button_hold_3_0_0_0 previous_track Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : SmartThingsButtonMediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : SmartThingsButtonMediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : SmartThingsButtonMediaPlayerController integration : deconz controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : SmartThingsButtonMediaPlayerController integration : zha controller : 00:11:22:33:44:55:66:77:88 media_player : media_player.my_entity_id","title":"SmartThingsButton"},{"location":"controllers/SmartThingsButton/#light","text":"Class: SmartThingsButtonLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions single 1002 button_single_1_0_0_0 toggle double 1004 button_double_2_0_0_0 on_full_brightness hold 1001 button_hold_3_0_0_0 set_half_brightness Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : SmartThingsButtonLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : SmartThingsButtonLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : SmartThingsButtonLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : SmartThingsButtonLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/SmartThingsButton/#media-player","text":"Class: SmartThingsButtonMediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions single_click 1002 button_single_1_0_0_0 play_pause double_click 1004 button_double_2_0_0_0 next_track hold 1001 button_hold_3_0_0_0 previous_track Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : SmartThingsButtonMediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : SmartThingsButtonMediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : SmartThingsButtonMediaPlayerController integration : deconz controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : SmartThingsButtonMediaPlayerController integration : zha controller : 00:11:22:33:44:55:66:77:88 media_player : media_player.my_entity_id","title":"Media Player"},{"location":"controllers/TS0043/","text":"Picture Controller types Integrations Light \u2014 TS0043LightController Zigbee2MQTT (z2m) Light Class: TS0043LightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions 1_single , 2_single , 3_single toggle 1_double , 2_double , 3_double click_brightness_up 1_hold , 2_hold , 3_hold click_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : TS0043LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : TS0043LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"TS0043"},{"location":"controllers/TS0043/#light","text":"Class: TS0043LightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions 1_single , 2_single , 3_single toggle 1_double , 2_double , 3_double click_brightness_up 1_hold , 2_hold , 3_hold click_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : TS0043LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : TS0043LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/TS0044/","text":"Picture Controller types Integrations Light \u2014 TS0044LightController Zigbee2MQTT (z2m) Light Class: TS0044LightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions 1_single , 2_single , 3_single , 4_single toggle 1_double , 2_double , 3_double , 4_double click_brightness_up 1_hold , 2_hold , 3_hold , 4_hold click_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : TS0044LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : TS0044LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"TS0044"},{"location":"controllers/TS0044/#light","text":"Class: TS0044LightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions 1_single , 2_single , 3_single , 4_single toggle 1_double , 2_double , 3_double , 4_double click_brightness_up 1_hold , 2_hold , 3_hold , 4_hold click_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : TS0044LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : TS0044LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/TS0044F/","text":"Picture Controller types Integrations Light \u2014 TS0044FLightController Zigbee2MQTT (z2m) Light Class: TS0044FLightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions \"on\" , \"off\" toggle brightness_step_up click_brightness_up brightness_step_down click_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : TS0044FLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : TS0044FLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"TS0044F"},{"location":"controllers/TS0044F/#light","text":"Class: TS0044FLightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions \"on\" , \"off\" toggle brightness_step_up click_brightness_up brightness_step_down click_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : TS0044FLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : TS0044FLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/TerncyPP01/","text":"Picture Controller types Integrations Light \u2014 TerncyPP01LightController ZHA (zha) Light Class: TerncyPP01LightController Default delay: 350ms Default mapping: ZHA Predefined actions button_single toggle button_double on_full_brightness button_triple on_min_brightness button_quadruple set_half_brightness button_quintuple set_half_color_temp ZHA example_app : module : controllerx class : TerncyPP01LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"TerncyPP01"},{"location":"controllers/TerncyPP01/#light","text":"Class: TerncyPP01LightController Default delay: 350ms Default mapping: ZHA Predefined actions button_single toggle button_double on_full_brightness button_triple on_min_brightness button_quadruple set_half_brightness button_quintuple set_half_color_temp ZHA example_app : module : controllerx class : TerncyPP01LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/TerncySD01/","text":"Picture Controller types Integrations Light \u2014 TerncySD01LightController Media Player \u2014 TerncySD01MediaPlayerController ZHA (zha) Light Class: TerncySD01LightController Default delay: 350ms Default mapping: ZHA Predefined actions button_single toggle button_double on_full_brightness button_triple on_min_brightness button_quadruple set_half_brightness button_quintuple set_half_color_temp rotate_left click_brightness_down rotate_right click_brightness_up ZHA example_app : module : controllerx class : TerncySD01LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id Media Player Class: TerncySD01MediaPlayerController Default delay: 500ms Default mapping: ZHA Predefined actions button_single play_pause button_double mute button_triple next_track button_quadruple previous_track button_quintuple next_source rotate_left click_volume_down rotate_right click_volume_up ZHA example_app : module : controllerx class : TerncySD01MediaPlayerController integration : zha controller : 00:11:22:33:44:55:66:77:88 media_player : media_player.my_entity_id","title":"TerncySD01"},{"location":"controllers/TerncySD01/#light","text":"Class: TerncySD01LightController Default delay: 350ms Default mapping: ZHA Predefined actions button_single toggle button_double on_full_brightness button_triple on_min_brightness button_quadruple set_half_brightness button_quintuple set_half_color_temp rotate_left click_brightness_down rotate_right click_brightness_up ZHA example_app : module : controllerx class : TerncySD01LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/TerncySD01/#media-player","text":"Class: TerncySD01MediaPlayerController Default delay: 500ms Default mapping: ZHA Predefined actions button_single play_pause button_double mute button_triple next_track button_quadruple previous_track button_quintuple next_source rotate_left click_volume_down rotate_right click_volume_up ZHA example_app : module : controllerx class : TerncySD01MediaPlayerController integration : zha controller : 00:11:22:33:44:55:66:77:88 media_player : media_player.my_entity_id","title":"Media Player"},{"location":"controllers/W2049/","text":"Picture Controller types Integrations Light \u2014 W2049LightController Media Player \u2014 W2049MediaPlayerController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: W2049LightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" on \"off\" 2002 \"off\" off arrow_left_click 3002 press_257_13_0 click_color_down arrow_right_click 4002 press_256_13_0 click_color_up brightness_move_up 1001 move_with_on_off_0_83 hold_brightness_up brightness_stop , arrow_left_release , arrow_right_release 1003 , 2003 , 3003 , 4003 stop_with_on_off , release release brightness_move_down 2001 move_1_83_0_0 hold_brightness_down arrow_left_hold 3001 hold_3329_0 hold_color_down arrow_right_hold 4001 hold_3328_0 hold_color_up Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : W2049LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : W2049LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : W2049LightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : W2049LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id Media Player Class: W2049MediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ Predefined actions \"on\" 1002 play_pause \"off\" 2002 click_volume_down arrow_left_click 3002 previous_track arrow_right_click 4002 next_track arrow_left_hold 3001 previous_source arrow_left_release , arrow_right_release , brightness_stop 1003 , 2003 , 3003 , 4003 release arrow_right_hold 4001 next_source brightness_move_up 1001 hold_volume_up brightness_move_down 2001 hold_volume_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : W2049MediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : W2049MediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : W2049MediaPlayerController integration : deconz controller : my_controller media_player : media_player.my_entity_id","title":"W2049"},{"location":"controllers/W2049/#light","text":"Class: W2049LightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions \"on\" 1002 \"on\" on \"off\" 2002 \"off\" off arrow_left_click 3002 press_257_13_0 click_color_down arrow_right_click 4002 press_256_13_0 click_color_up brightness_move_up 1001 move_with_on_off_0_83 hold_brightness_up brightness_stop , arrow_left_release , arrow_right_release 1003 , 2003 , 3003 , 4003 stop_with_on_off , release release brightness_move_down 2001 move_1_83_0_0 hold_brightness_down arrow_left_hold 3001 hold_3329_0 hold_color_down arrow_right_hold 4001 hold_3328_0 hold_color_up Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : W2049LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : W2049LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : W2049LightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : W2049LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/W2049/#media-player","text":"Class: W2049MediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT deCONZ Predefined actions \"on\" 1002 play_pause \"off\" 2002 click_volume_down arrow_left_click 3002 previous_track arrow_right_click 4002 next_track arrow_left_hold 3001 previous_source arrow_left_release , arrow_right_release , brightness_stop 1003 , 2003 , 3003 , 4003 release arrow_right_hold 4001 next_source brightness_move_up 1001 hold_volume_up brightness_move_down 2001 hold_volume_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : W2049MediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : W2049MediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id example_app : module : controllerx class : W2049MediaPlayerController integration : deconz controller : my_controller media_player : media_player.my_entity_id","title":"Media Player"},{"location":"controllers/WXCJKG11LM/","text":"Picture Controller types Integrations Light \u2014 WXCJKG11LMLightController Zigbee2MQTT (z2m) Light Class: WXCJKG11LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions button_1_single off button_1_double on_min_brightness button_1_hold hold_brightness_down button_1_release , button_2_release release button_2_single on button_2_double on_full_brightness button_2_hold hold_brightness_up Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : WXCJKG11LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXCJKG11LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"WXCJKG11LM"},{"location":"controllers/WXCJKG11LM/#light","text":"Class: WXCJKG11LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions button_1_single off button_1_double on_min_brightness button_1_hold hold_brightness_down button_1_release , button_2_release release button_2_single on button_2_double on_full_brightness button_2_hold hold_brightness_up Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : WXCJKG11LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXCJKG11LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/WXCJKG12LM/","text":"Picture Controller types Integrations Light \u2014 WXCJKG12LMLightController Zigbee2MQTT (z2m) ZHA (zha) Light Class: WXCJKG12LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT ZHA Predefined actions button_1_single 1_single off button_1_double 1_double on_min_color_temp button_1_hold 1_long press hold_color_down button_1_release , button_2_release , button_3_release , button_4_release 1_release , 2_release , 3_release , 4_release release button_2_single 2_single on button_2_double 2_double on_full_color_temp button_2_hold 2_long press hold_color_up button_3_single 3_single click_brightness_down button_3_double 3_double on_min_brightness button_3_hold 3_long press hold_brightness_down button_4_single 4_single click_brightness_up button_4_double 4_double on_full_brightness button_4_hold 4_long press hold_brightness_up Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) ZHA example_app : module : controllerx class : WXCJKG12LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXCJKG12LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXCJKG12LMLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"WXCJKG12LM"},{"location":"controllers/WXCJKG12LM/#light","text":"Class: WXCJKG12LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT ZHA Predefined actions button_1_single 1_single off button_1_double 1_double on_min_color_temp button_1_hold 1_long press hold_color_down button_1_release , button_2_release , button_3_release , button_4_release 1_release , 2_release , 3_release , 4_release release button_2_single 2_single on button_2_double 2_double on_full_color_temp button_2_hold 2_long press hold_color_up button_3_single 3_single click_brightness_down button_3_double 3_double on_min_brightness button_3_hold 3_long press hold_brightness_down button_4_single 4_single click_brightness_up button_4_double 4_double on_full_brightness button_4_hold 4_long press hold_brightness_up Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) ZHA example_app : module : controllerx class : WXCJKG12LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXCJKG12LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXCJKG12LMLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/WXCJKG13LM/","text":"Picture Controller types Integrations Light \u2014 WXCJKG13LMLightController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: WXCJKG13LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions button_1_single 1002 1_single off button_1_double , button_2_double 1004 , 2004 1_double , 2_double sync button_2_single 2002 2_single on button_3_single 3002 3_single click_brightness_down button_3_double 3004 3_double on_min_brightness button_3_hold 3001 3_long hold_brightness_down button_3_release , button_4_release , button_5_release , button_6_release 3003 , 4003 , 5003 , 6003 3_release , 4_release , 5_release , 6_release release button_4_single 4002 4_single click_brightness_up button_4_double 4004 4_double on_full_brightness button_4_hold 4001 4_long hold_brightness_up button_5_single 5002 5_single click_color_down button_5_double 5004 5_double on_min_color_temp button_5_hold 5001 5_long hold_color_down button_6_single 6002 6_single click_color_up button_6_double 6004 6_double on_full_color_temp button_6_hold 6001 6_long hold_color_up Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXCJKG13LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXCJKG13LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXCJKG13LMLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXCJKG13LMLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"WXCJKG13LM"},{"location":"controllers/WXCJKG13LM/#light","text":"Class: WXCJKG13LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions button_1_single 1002 1_single off button_1_double , button_2_double 1004 , 2004 1_double , 2_double sync button_2_single 2002 2_single on button_3_single 3002 3_single click_brightness_down button_3_double 3004 3_double on_min_brightness button_3_hold 3001 3_long hold_brightness_down button_3_release , button_4_release , button_5_release , button_6_release 3003 , 4003 , 5003 , 6003 3_release , 4_release , 5_release , 6_release release button_4_single 4002 4_single click_brightness_up button_4_double 4004 4_double on_full_brightness button_4_hold 4001 4_long hold_brightness_up button_5_single 5002 5_single click_color_down button_5_double 5004 5_double on_min_color_temp button_5_hold 5001 5_long hold_color_down button_6_single 6002 6_single click_color_up button_6_double 6004 6_double on_full_color_temp button_6_hold 6001 6_long hold_color_up Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXCJKG13LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXCJKG13LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXCJKG13LMLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXCJKG13LMLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/WXKG01LM/","text":"Picture Controller types Integrations Light \u2014 WXKG01LMLightController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: WXKG01LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions single 1002 single toggle double 1004 double on_full_brightness triple 1005 triple on_min_brightness quadruple 1006 quadruple set_half_brightness hold 1001 hold_brightness_toggle release 1003 release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXKG01LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXKG01LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG01LMLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG01LMLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"WXKG01LM"},{"location":"controllers/WXKG01LM/#light","text":"Class: WXKG01LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions single 1002 single toggle double 1004 double on_full_brightness triple 1005 triple on_min_brightness quadruple 1006 quadruple set_half_brightness hold 1001 hold_brightness_toggle release 1003 release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXKG01LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXKG01LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG01LMLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG01LMLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/WXKG02LM/","text":"Picture Controller types Integrations Light \u2014 WXKG02LMLightController Switch \u2014 WXKG02LMSwitchController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: WXKG02LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions single_both , single_left , single_right 1002 , 2002 , 3002 both_single , left_single , right_single toggle double_both , double_left , double_right 1004 , 2004 , 3004 both_double , left_double , right_double click_brightness_up hold_both , hold_left , hold_right 1001 , 2001 , 3001 both_long press , left_long press , right_long press click_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXKG02LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXKG02LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG02LMLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG02LMLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id Switch Class: WXKG02LMSwitchController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions single_both , single_left , single_right 1002 , 2002 , 3002 both_single , left_single , right_single toggle Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXKG02LMSwitchController integration : z2m controller : sensor.my_controller_action switch : switch.my_entity_id example_app : module : controllerx class : WXKG02LMSwitchController integration : name : z2m listen_to : mqtt controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : WXKG02LMSwitchController integration : deconz controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : WXKG02LMSwitchController integration : zha controller : 00:11:22:33:44:55:66:77:88 switch : switch.my_entity_id","title":"WXKG02LM"},{"location":"controllers/WXKG02LM/#light","text":"Class: WXKG02LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions single_both , single_left , single_right 1002 , 2002 , 3002 both_single , left_single , right_single toggle double_both , double_left , double_right 1004 , 2004 , 3004 both_double , left_double , right_double click_brightness_up hold_both , hold_left , hold_right 1001 , 2001 , 3001 both_long press , left_long press , right_long press click_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXKG02LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXKG02LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG02LMLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG02LMLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/WXKG02LM/#switch","text":"Class: WXKG02LMSwitchController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions single_both , single_left , single_right 1002 , 2002 , 3002 both_single , left_single , right_single toggle Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXKG02LMSwitchController integration : z2m controller : sensor.my_controller_action switch : switch.my_entity_id example_app : module : controllerx class : WXKG02LMSwitchController integration : name : z2m listen_to : mqtt controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : WXKG02LMSwitchController integration : deconz controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : WXKG02LMSwitchController integration : zha controller : 00:11:22:33:44:55:66:77:88 switch : switch.my_entity_id","title":"Switch"},{"location":"controllers/WXKG06LM/","text":"Picture Controller types Integrations Light \u2014 WXKG06LMLightController Switch \u2014 WXKG06LMSwitchController Zigbee2MQTT (z2m) deCONZ (deconz) Light Class: WXKG06LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ Predefined actions single 1002 toggle double , hold 1004 click_brightness_up 1001 click_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : WXKG06LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXKG06LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG06LMLightController integration : deconz controller : my_controller light : light.my_entity_id Switch Class: WXKG06LMSwitchController Default mapping: Zigbee2MQTT deCONZ Predefined actions single 1002 toggle Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : WXKG06LMSwitchController integration : z2m controller : sensor.my_controller_action switch : switch.my_entity_id example_app : module : controllerx class : WXKG06LMSwitchController integration : name : z2m listen_to : mqtt controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : WXKG06LMSwitchController integration : deconz controller : my_controller switch : switch.my_entity_id","title":"WXKG06LM"},{"location":"controllers/WXKG06LM/#light","text":"Class: WXKG06LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ Predefined actions single 1002 toggle double , hold 1004 click_brightness_up 1001 click_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : WXKG06LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXKG06LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG06LMLightController integration : deconz controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/WXKG06LM/#switch","text":"Class: WXKG06LMSwitchController Default mapping: Zigbee2MQTT deCONZ Predefined actions single 1002 toggle Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : WXKG06LMSwitchController integration : z2m controller : sensor.my_controller_action switch : switch.my_entity_id example_app : module : controllerx class : WXKG06LMSwitchController integration : name : z2m listen_to : mqtt controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : WXKG06LMSwitchController integration : deconz controller : my_controller switch : switch.my_entity_id","title":"Switch"},{"location":"controllers/WXKG07LM/","text":"Picture Controller types Integrations Light \u2014 WXKG07LMLightController Switch \u2014 WXKG07LMSwitchController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: WXKG07LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions both , left , right 1002 , 2002 , 3002 both_single , left_single , right_single toggle both_double , left_double , right_double 1004 , 2004 , 3004 both_double , left_double , right_double click_brightness_up both_long , left_long , right_long 1001 , 2001 , 3001 both_long press , left_long press , right_long press click_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXKG07LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXKG07LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG07LMLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG07LMLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id Switch Class: WXKG07LMSwitchController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions both , left , right 1002 , 2002 , 3002 both_single , left_single , right_single toggle Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXKG07LMSwitchController integration : z2m controller : sensor.my_controller_action switch : switch.my_entity_id example_app : module : controllerx class : WXKG07LMSwitchController integration : name : z2m listen_to : mqtt controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : WXKG07LMSwitchController integration : deconz controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : WXKG07LMSwitchController integration : zha controller : 00:11:22:33:44:55:66:77:88 switch : switch.my_entity_id","title":"WXKG07LM"},{"location":"controllers/WXKG07LM/#light","text":"Class: WXKG07LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions both , left , right 1002 , 2002 , 3002 both_single , left_single , right_single toggle both_double , left_double , right_double 1004 , 2004 , 3004 both_double , left_double , right_double click_brightness_up both_long , left_long , right_long 1001 , 2001 , 3001 both_long press , left_long press , right_long press click_brightness_down Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXKG07LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXKG07LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG07LMLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG07LMLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/WXKG07LM/#switch","text":"Class: WXKG07LMSwitchController Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions both , left , right 1002 , 2002 , 3002 both_single , left_single , right_single toggle Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXKG07LMSwitchController integration : z2m controller : sensor.my_controller_action switch : switch.my_entity_id example_app : module : controllerx class : WXKG07LMSwitchController integration : name : z2m listen_to : mqtt controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : WXKG07LMSwitchController integration : deconz controller : my_controller switch : switch.my_entity_id example_app : module : controllerx class : WXKG07LMSwitchController integration : zha controller : 00:11:22:33:44:55:66:77:88 switch : switch.my_entity_id","title":"Switch"},{"location":"controllers/WXKG11LMRemote/","text":"Picture Controller types Integrations Light \u2014 WXKG11LMRemoteLightController Zigbee2MQTT (z2m) deCONZ (deconz) ZHA (zha) Light Class: WXKG11LMRemoteLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions single 1002 single toggle double 1004 double on_full_brightness hold 1001 hold hold_brightness_toggle release 1003 release release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXKG11LMRemoteLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXKG11LMRemoteLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG11LMRemoteLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG11LMRemoteLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"WXKG11LMRemote"},{"location":"controllers/WXKG11LMRemote/#light","text":"Class: WXKG11LMRemoteLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ ZHA Predefined actions single 1002 single toggle double 1004 double on_full_brightness hold 1001 hold hold_brightness_toggle release 1003 release release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ ZHA example_app : module : controllerx class : WXKG11LMRemoteLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXKG11LMRemoteLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG11LMRemoteLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG11LMRemoteLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/WXKG11LMSensor/","text":"Picture Controller types Integrations Light \u2014 WXKG11LMSensorSwitchLightController deCONZ (deconz) ZHA (zha) Light Class: WXKG11LMSensorSwitchLightController Default delay: 350ms Default mapping: deCONZ ZHA Predefined actions 1002 single toggle 1004 double on_full_brightness 1005 triple on_min_brightness 1006 quadruple set_half_brightness deCONZ ZHA example_app : module : controllerx class : WXKG11LMSensorSwitchLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG11LMSensorSwitchLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"WXKG11LMSensor"},{"location":"controllers/WXKG11LMSensor/#light","text":"Class: WXKG11LMSensorSwitchLightController Default delay: 350ms Default mapping: deCONZ ZHA Predefined actions 1002 single toggle 1004 double on_full_brightness 1005 triple on_min_brightness 1006 quadruple set_half_brightness deCONZ ZHA example_app : module : controllerx class : WXKG11LMSensorSwitchLightController integration : deconz controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG11LMSensorSwitchLightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/WXKG12LM/","text":"Picture Controller types Integrations Light \u2014 WXKG12LMLightController Zigbee2MQTT (z2m) deCONZ (deconz) Light Class: WXKG12LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ Predefined actions single 1002 toggle double 1004 on_full_brightness shake 1007 on_min_brightness hold 1001 hold_brightness_toggle release 1003 release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : WXKG12LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXKG12LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG12LMLightController integration : deconz controller : my_controller light : light.my_entity_id","title":"WXKG12LM"},{"location":"controllers/WXKG12LM/#light","text":"Class: WXKG12LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT deCONZ Predefined actions single 1002 toggle double 1004 on_full_brightness shake 1007 on_min_brightness hold 1001 hold_brightness_toggle release 1003 release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) deCONZ example_app : module : controllerx class : WXKG12LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : WXKG12LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id example_app : module : controllerx class : WXKG12LMLightController integration : deconz controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/Z31BRL/","text":"Picture Controller types Integrations Light \u2014 Z31BRLLightController deCONZ (deconz) Light Class: Z31BRLLightController Default delay: 350ms Default mapping: deCONZ Predefined actions 1002 toggle 2002 click_brightness_up 3002 click_brightness_down deCONZ example_app : module : controllerx class : Z31BRLLightController integration : deconz controller : my_controller light : light.my_entity_id","title":"Z31BRL"},{"location":"controllers/Z31BRL/#light","text":"Class: Z31BRLLightController Default delay: 350ms Default mapping: deCONZ Predefined actions 1002 toggle 2002 click_brightness_up 3002 click_brightness_down deCONZ example_app : module : controllerx class : Z31BRLLightController integration : deconz controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/ZB3009/","text":"Picture Controller types Integrations Light \u2014 ZB3009LightController Zigbee2MQTT (z2m) Light Class: ZB3009LightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions \"on\" , \"off\" toggle brightness_move_up hold_brightness_up brightness_move_down hold_brightness_down brightness_stop release color_temperature_move_down click_colortemp_down color_temperature_move_up click_colortemp_up color_temperature_move colortemp_from_controller color_move xycolor_from_controller Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : ZB3009LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : ZB3009LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"ZB3009"},{"location":"controllers/ZB3009/#light","text":"Class: ZB3009LightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions \"on\" , \"off\" toggle brightness_move_up hold_brightness_up brightness_move_down hold_brightness_down brightness_stop release color_temperature_move_down click_colortemp_down color_temperature_move_up click_colortemp_up color_temperature_move colortemp_from_controller color_move xycolor_from_controller Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : ZB3009LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : ZB3009LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/ZB5121/","text":"Picture Controller types Integrations Light \u2014 ZB5121LightController ZHA (zha) Light Class: ZB5121LightController Default delay: 350ms Default mapping: ZHA Predefined actions \"on\" on \"off\" off step_with_on_off_0_32_0 click_brightness_up move_with_on_off_0_50 hold_brightness_up step_with_on_off_1_32_0 click_brightness_down move_with_on_off_1_50 hold_brightness_down stop release ZHA example_app : module : controllerx class : ZB5121LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"ZB5121"},{"location":"controllers/ZB5121/#light","text":"Class: ZB5121LightController Default delay: 350ms Default mapping: ZHA Predefined actions \"on\" on \"off\" off step_with_on_off_0_32_0 click_brightness_up move_with_on_off_0_50 hold_brightness_up step_with_on_off_1_32_0 click_brightness_down move_with_on_off_1_50 hold_brightness_down stop release ZHA example_app : module : controllerx class : ZB5121LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/ZB5122/","text":"Picture Controller types Integrations Light \u2014 ZB5122LightController ZHA (zha) Light Class: ZB5122LightController Default delay: 350ms Default mapping: ZHA Predefined actions \"on\" on \"off\" off hold_brightness_up hold_brightness_up hold_brightness_down hold_brightness_down stop , stop_move_hue , stop_move_step release move_to_color click_xycolor_up move_hue hold_xycolor_up move_to_color_temp colortemp_from_controller move_color_temp hold_colortemp_toggle ZHA example_app : module : controllerx class : ZB5122LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"ZB5122"},{"location":"controllers/ZB5122/#light","text":"Class: ZB5122LightController Default delay: 350ms Default mapping: ZHA Predefined actions \"on\" on \"off\" off hold_brightness_up hold_brightness_up hold_brightness_down hold_brightness_down stop , stop_move_hue , stop_move_step release move_to_color click_xycolor_up move_hue hold_xycolor_up move_to_color_temp colortemp_from_controller move_color_temp hold_colortemp_toggle ZHA example_app : module : controllerx class : ZB5122LightController integration : zha controller : 00:11:22:33:44:55:66:77:88 light : light.my_entity_id","title":"Light"},{"location":"controllers/ZNXNKG02LM/","text":"Picture Controller types Integrations Light \u2014 ZNXNKG02LMLightController Media Player \u2014 ZNXNKG02LMMediaPlayerController Zigbee2MQTT (z2m) Light Class: ZNXNKG02LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions single toggle double on_full_brightness hold hold_color_toggle release , stop_rotating release start_rotating brightness_from_controller_angle Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : ZNXNKG02LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : ZNXNKG02LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id Media Player Class: ZNXNKG02LMMediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT Predefined actions single play_pause double next_track hold previous_track release , stop_rotating release start_rotating volume_from_controller_angle Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : ZNXNKG02LMMediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : ZNXNKG02LMMediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id","title":"ZNXNKG02LM"},{"location":"controllers/ZNXNKG02LM/#light","text":"Class: ZNXNKG02LMLightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions single toggle double on_full_brightness hold hold_color_toggle release , stop_rotating release start_rotating brightness_from_controller_angle Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : ZNXNKG02LMLightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : ZNXNKG02LMLightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/ZNXNKG02LM/#media-player","text":"Class: ZNXNKG02LMMediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT Predefined actions single play_pause double next_track hold previous_track release , stop_rotating release start_rotating volume_from_controller_angle Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : ZNXNKG02LMMediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : ZNXNKG02LMMediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id","title":"Media Player"},{"location":"controllers/ZS23000278/","text":"Picture Controller types Integrations Light \u2014 ZS23000278LightController Zigbee2MQTT (z2m) Light Class: ZS23000278LightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions \"on\" on \"off\" off brightness_step_up click_brightness_up brightness_step_down click_brightness_down brightness_move_to_level brightness_from_controller_level brightness_move_up hold_brightness_up brightness_move_down hold_brightness_down brightness_stop release color_temperature_move colortemp_from_controller color_temperature_move_up click_colortemp_up color_temperature_move_down click_colortemp_down color_move xycolor_from_controller Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : ZS23000278LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : ZS23000278LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"ZS23000278"},{"location":"controllers/ZS23000278/#light","text":"Class: ZS23000278LightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions \"on\" on \"off\" off brightness_step_up click_brightness_up brightness_step_down click_brightness_down brightness_move_to_level brightness_from_controller_level brightness_move_up hold_brightness_up brightness_move_down hold_brightness_down brightness_stop release color_temperature_move colortemp_from_controller color_temperature_move_up click_colortemp_up color_temperature_move_down click_colortemp_down color_move xycolor_from_controller Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : ZS23000278LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : ZS23000278LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/ZYCT202/","text":"Picture Controller types Integrations Light \u2014 ZYCT202LightController Media Player \u2014 ZYCT202MediaPlayerController Zigbee2MQTT (z2m) Light Class: ZYCT202LightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions \"on\" on up-press hold_brightness_up down-press hold_brightness_down \"off\" off stop release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : ZYCT202LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : ZYCT202LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id Media Player Class: ZYCT202MediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT Predefined actions \"on\" , \"off\" play_pause up-press hold_volume_up down-press hold_volume_down stop release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : ZYCT202MediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : ZYCT202MediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id","title":"ZYCT202"},{"location":"controllers/ZYCT202/#light","text":"Class: ZYCT202LightController Default delay: 350ms Default mapping: Zigbee2MQTT Predefined actions \"on\" on up-press hold_brightness_up down-press hold_brightness_down \"off\" off stop release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : ZYCT202LightController integration : z2m controller : sensor.my_controller_action light : light.my_entity_id example_app : module : controllerx class : ZYCT202LightController integration : name : z2m listen_to : mqtt controller : my_controller light : light.my_entity_id","title":"Light"},{"location":"controllers/ZYCT202/#media-player","text":"Class: ZYCT202MediaPlayerController Default delay: 500ms Default mapping: Zigbee2MQTT Predefined actions \"on\" , \"off\" play_pause up-press hold_volume_up down-press hold_volume_down stop release Zigbee2MQTT (HA entity) Zigbee2MQTT (mqtt) example_app : module : controllerx class : ZYCT202MediaPlayerController integration : z2m controller : sensor.my_controller_action media_player : media_player.my_entity_id example_app : module : controllerx class : ZYCT202MediaPlayerController integration : name : z2m listen_to : mqtt controller : my_controller media_player : media_player.my_entity_id","title":"Media Player"},{"location":"examples/","text":"The purpose of this page is to show some real examples for the configuration. These are configurations placed in /config/appdaemon/apps/apps.yaml Basic E1524/E1810 controller with z2m that controls all the livingroom lights. livingroom_controller : module : controllerx class : E1810Controller controller : sensor.livingroom_controller_action integration : z2m light : group.livingroom_lights E1524/E1810 controller integrated with Zigbee2MQTT, but using mqtt directly instead of the z2m integration. office_light : module : controllerx class : E1810Controller controller : office_controller # This is the Z2M friendly name of the device integration : name : z2m listen_to : mqtt light : light.office Controlling a media player with E1744 with deCONZ: bedroom_speaker : module : controllerx class : E1744MediaPlayerController controller : symfonisk_controller integration : deconz media_player : media_player.bedroom_speaker Controlling a light (just on/off) with E1743 with ZHA: bedroom_light : module : controllerx class : E1743Controller controller : 00:67:88:56:06:78:9b:3f integration : zha light : light.simple_light actions : - \"on\" - \"off\" Controlling two lights with Aqara double key wireless switch (z2m): controller_left_switch : module : controllerx class : DoubleKeyWirelessAqaraController controller : sensor.controller_action light : light.light1 integration : z2m manual_steps : 7 actions : - left - left_double - left_long controller_right_switch : module : controllerx class : DoubleKeyWirelessAqaraController controller : sensor.controller_action light : light.light2 integration : z2m manual_steps : 7 actions : - right - right_double - right_long Controlling just the color with E1810 and z2m because toggle and brightness is controlled with zigbee groups. example_app : module : controllerx class : E1810Controller controller : sensor.controller_action integration : z2m light : light.light1 actions : - arrow_left_hold - arrow_left_release - arrow_right_hold - arrow_right_release - arrow_right_click - arrow_left_click Controlling a simple light with Lutron Caseta Pro Pico, but giving the light a slower transition of 800ms: example_app : module : controllerx class : LutronCasetaProPicoLightController integration : state controller : sensor.controller_action light : light.example_light transition : 800 Hue Bridge HA integration for the lights and z2m for E1810 IKEA controller. hallway_light_group_no_toggle : # all actions, but toggle/hold for smooth operation with light groups on Hue Bridge # use HA groups to control dimming and color/color temp change # use Hue bridge light group for even and syncronized on/off function module : controllerx class : E1810Controller controller : sensor.0x90fd9ffffe17d796_action integration : z2m # transition: 1000 # transition attribute works on Hue bridge smooth_power_on : true light : group.hallway # HA group. ControllerX syncs values from first group entity with remaining entities in group actions : - arrow_left_hold - arrow_left_release - arrow_right_hold - arrow_right_release - arrow_right_click - arrow_left_click - brightness_up_click - brightness_down_click - brightness_up_release - brightness_down_release - brightness_up_hold - brightness_down_hold hallway_light_group_toggle : # toggle/hold for smooth operation with light groups on Hue Bridge # use Hue bridge light group for even and syncronized on/off function module : controllerx class : E1810Controller controller : sensor.0x90fd9ffffe17d796_action integration : z2m # transition: 1000 # transition attribute works on Hue bridge light : light.hallway # Hue light group. On/off completely in sync, as zigbee group commands are used by Hue bridge actions : - toggle - toggle_hold Regular use of E1743 controller for a light, but delaying the off action for 10 seconds. The use case could be for when we have a switch at the beginning of the corridor and we do not want the light to turn off until a certain period of time. corridor_controller : module : controllerx class : E1743Controller controller : corridor_controller integration : deconz light : light.corridor action_delay : 2002 : 10 Using a xy color light bulb as a color temperature one when it does support it. office : module : controllerx class : E1810Controller controller : office_controller # This is the Z2M friendly name of the device integration : name : z2m listen_to : mqtt light : name : light.office color_mode : color_temp Using a xy color light bulb as a color temperature one when it does NOT support it. office : module : controllerx class : E1810Controller controller : zigbee2mqtt/office_controller/action integration : mqtt light : light.office color_wheel : color_temp_wheel Advanced Controlling different lights with the same controller depending where you are. livingroom_controller : module : controllerx class : E1810Controller controller : controller_id integration : deconz light : light.light1 constrain_input_select : input_select.where_am_i,livingroom controller_bedroom : module : controllerx class : E1810Controller controller : controller_id integration : deconz light : light.light2 constrain_input_select : input_select.where_am_i,bedroom controller_bathroom : module : controllerx class : E1810Controller controller : controller_id integration : deconz light : light.light3 constrain_input_select : input_select.where_am_i,bathroom Controlling different lights with the E1810 controller. Using brightness buttons for one light, arrows for another one and the center to turn off a group of lights. light1_controller : module : controllerx class : LightController controller : e1810_controller integration : deconz light : light.light1 mapping : 2002 : \"on\" 3002 : \"off\" 2001 : hold_brightness_up 2003 : release 3001 : hold_brightness_down 3003 : release light2_controller : module : controllerx class : LightController controller : e1810_controller integration : deconz light : light.light2 mapping : 4002 : \"on\" 5002 : \"off\" 4001 : hold_brightness_down 4003 : release 5001 : hold_brightness_up 5003 : release all_lights_controller : module : controllerx class : LightController controller : e1810_controller integration : deconz light : group.all_lights mapping : 1002 : \"off\" Extending the functionality of the smooth power onfor the E1810, so when clicked or hold each button when the light is off, it sets the light to its minimum or maximum brightness or color, depending on the button pressed. This assumes you have a light with support to color temperature. livingroom_light_on : module : controllerx class : E1810Controller controller : sensor.livingroom_controller_action integration : z2m light : light.livingroom constrain_input_boolean : light.livingroom,on livingroom_light_off : module : controllerx class : LightController controller : sensor.livingroom_controller_action integration : z2m light : light.livingroom mapping : toggle : toggle brightness_up_click : on_full_brightness brightness_down_click : on_min_brightness brightness_up_hold : on_full_brightness brightness_down_hold : on_min_brightness arrow_right_click : on_full_color_temp arrow_left_click : on_min_color_temp arrow_right_hold : on_full_color_temp arrow_left_hold : on_min_color_temp constrain_input_boolean : light.livingroom,off Customising Aqara magic cube with deCONZ. The key values were extracted from the deCONZ section in here and the values were extracted from the predefined media player action list . example_app : module : controllerx class : MediaPlayerController controller : my_magic_cube_id integration : name : deconz type : gesture media_player : media_player.livingroom_speaker mapping : 1 : play_pause # Shake 8 : click_volume_down # Rotate left 7 : click_volume_up # Rotate right 3 : next_track # Flip90 4 : previous_track # Flip180 Customising Aqara magic cube with z2m. This makes use of the mapping attribute to turn on different HA scenes. cube_bedroom : module : controllerx class : Controller controller : sensor.cube_bedroom_action integration : z2m mapping : flip90 : service : scene.turn_on data : entity_id : scene.bedroom1 flip180 : service : scene.turn_on data : entity_id : scene.bedroom2 tap : service : scene.turn_on data : entity_id : scene.bedroom3 Customising WXKG01LM de Aqara. We want to toggle the light and turn it on always to brightness 20 (min: 0, max: 255). For this we create one instance app configuration for the default behaviour of the controller, but excluding single which toggles the light. Then we create a custom controller with the mapping attribute to give a behaviour to the single action. mando_aqara_salon : module : controllerx class : WXKG01LMLightController controller : sensor.0x00158d00027b6d79_click integration : z2m light : light.0x000d6ffffec2620d_light merge_mapping : single : # Give an action to the `single` event service : light.toggle data : entity_id : light.0x000d6ffffec2620d_light brightness : 20 Customising the E1810 to invert the click and hold actions and control a group of sonos devices. By default it skips track when pressing, whit this it skips source by pressing. sonos_speaker : module : controllerx class : MediaPlayerController controller : sensor.0x90fd9ffffe0cbd69_action integration : z2m media_player : group.sonos_all mapping : toggle : play_pause brightness_up_click : click_volume_up brightness_down_click : click_volume_down brightness_up_hold : hold_volume_up brightness_down_hold : hold_volume_down brightness_up_release : release brightness_up_release : release arrow_right_click : next_source arrow_left_click : previous_source arrow_right_hold : next_track arrow_left_hold : previous_track This next configuration shows the use of multiple click functionality, and merge_mapping . We want to use the E1810 for a light ( light.light1 ) and toggle another light ( light.light2 ) when clicking twice the toggle button. We could do this in one application configuration as you can see in the multiple click page , but we will do it separatelly to show that the first config needs to change the toggle for toggle$1 to be detected as a multiple-clickable action, otherwise when the center button is clicked twice, it will also toggle light.light1 . example_app_1 : module : controllerx class : E1810Controller controller : my_controller integration : name : z2m listen_to : mqtt light : light.light1 merge_mapping : toggle$1 : toggle example_app_2 : module : controllerx class : E1810Controller controller : my_controller integration : name : z2m listen_to : mqtt light : light.light2 mapping : toggle$2 : toggle The following configuration is a tricky one, but at the same time it also shows the power of ControllerX to adapt to any use case. Imagine we want the following for our Symfonisk controller (E1744) with deCONZ: 1 click: Toggle light on/off. 2 click: Toggle between (pre-defined) Warm - and Cold-White. 3 click: \"switch to alternate behavior\" - instead of the default dimming-behavior when turning left/right - change color-temperature by turning turning left makes light colder (more blueish) and right make it warmer (more reds). rotate left/right: This will depend on the state when clicking 3 times. Assuming you have created the following input_booleans in HA ( input_boolean.light_mode , input_boolean.light_colortemp_mode ) we can use the following configuration: example_app : module : controllerx class : E1744LightController controller : symfonisk_controller integration : deconz light : light.livingroom_lamp automatic_steps : 15 delay : 150 mapping : 2001 : hold_brightness_up # Right turn 3001 : hold_brightness_down # Left turn 2003 : release # Stop right turn 3003 : release # Stop left turn constrain_input_boolean : input_boolean.light_mode,on example_app2 : module : controllerx class : E1744LightController controller : symfonisk_controller integration : deconz light : light.livingroom_lamp automatic_steps : 15 delay : 150 mapping : 2001 : hold_color_up # Right turn 3001 : hold_color_down # Left turn 2003 : release # Stop right turn 3003 : release # Stop left turn constrain_input_boolean : input_boolean.light_mode,off example_app3 : module : controllerx class : E1744LightController controller : symfonisk_controller integration : deconz light : light.livingroom_lamp min_color_temp : 200 mapping : 1004 : on_min_color_temp # 2 clicks constrain_input_boolean : input_boolean.light_colortemp_mode,on example_app4 : module : controllerx class : E1744LightController controller : symfonisk_controller integration : deconz light : light.livingroom_lamp max_color_temp : 400 mapping : 1004 : on_full_color_temp # 2 clicks constrain_input_boolean : input_boolean.light_colortemp_mode,off example_app5 : module : controllerx class : E1744LightController controller : symfonisk_controller integration : deconz light : light.livingroom_lamp mapping : 1002 : toggle # 1 clicks 1004 : # 2 clicks service : input_boolean.toggle data : entity_id : input_boolean.light_colortemp_mode 1005 : # 3 clicks service : input_boolean.toggle data : entity_id : input_boolean.light_mode The following example shows the potential of templating render. Let's say we want to execute different predefined actions every time we click a button (E1810 in this case). First, we can create an input select through UI or YAML in HA: input_select : light_state : options : - on_min_brightness - on_full_brightness - set_half_brightness Then we can define the following ControllerX config to change the option of the input_select and apply the predefined action that is selected: example_app : module : controllerx class : E1810Controller controller : livingroom_controller integration : name : z2m listen_to : mqtt light : light.my_light mapping : toggle : - service : input_select.select_next data : entity_id : input_select.light_state - action : \"{{ states('input_select.light_state') }}\"","title":"Examples"},{"location":"examples/#basic","text":"E1524/E1810 controller with z2m that controls all the livingroom lights. livingroom_controller : module : controllerx class : E1810Controller controller : sensor.livingroom_controller_action integration : z2m light : group.livingroom_lights E1524/E1810 controller integrated with Zigbee2MQTT, but using mqtt directly instead of the z2m integration. office_light : module : controllerx class : E1810Controller controller : office_controller # This is the Z2M friendly name of the device integration : name : z2m listen_to : mqtt light : light.office Controlling a media player with E1744 with deCONZ: bedroom_speaker : module : controllerx class : E1744MediaPlayerController controller : symfonisk_controller integration : deconz media_player : media_player.bedroom_speaker Controlling a light (just on/off) with E1743 with ZHA: bedroom_light : module : controllerx class : E1743Controller controller : 00:67:88:56:06:78:9b:3f integration : zha light : light.simple_light actions : - \"on\" - \"off\" Controlling two lights with Aqara double key wireless switch (z2m): controller_left_switch : module : controllerx class : DoubleKeyWirelessAqaraController controller : sensor.controller_action light : light.light1 integration : z2m manual_steps : 7 actions : - left - left_double - left_long controller_right_switch : module : controllerx class : DoubleKeyWirelessAqaraController controller : sensor.controller_action light : light.light2 integration : z2m manual_steps : 7 actions : - right - right_double - right_long Controlling just the color with E1810 and z2m because toggle and brightness is controlled with zigbee groups. example_app : module : controllerx class : E1810Controller controller : sensor.controller_action integration : z2m light : light.light1 actions : - arrow_left_hold - arrow_left_release - arrow_right_hold - arrow_right_release - arrow_right_click - arrow_left_click Controlling a simple light with Lutron Caseta Pro Pico, but giving the light a slower transition of 800ms: example_app : module : controllerx class : LutronCasetaProPicoLightController integration : state controller : sensor.controller_action light : light.example_light transition : 800 Hue Bridge HA integration for the lights and z2m for E1810 IKEA controller. hallway_light_group_no_toggle : # all actions, but toggle/hold for smooth operation with light groups on Hue Bridge # use HA groups to control dimming and color/color temp change # use Hue bridge light group for even and syncronized on/off function module : controllerx class : E1810Controller controller : sensor.0x90fd9ffffe17d796_action integration : z2m # transition: 1000 # transition attribute works on Hue bridge smooth_power_on : true light : group.hallway # HA group. ControllerX syncs values from first group entity with remaining entities in group actions : - arrow_left_hold - arrow_left_release - arrow_right_hold - arrow_right_release - arrow_right_click - arrow_left_click - brightness_up_click - brightness_down_click - brightness_up_release - brightness_down_release - brightness_up_hold - brightness_down_hold hallway_light_group_toggle : # toggle/hold for smooth operation with light groups on Hue Bridge # use Hue bridge light group for even and syncronized on/off function module : controllerx class : E1810Controller controller : sensor.0x90fd9ffffe17d796_action integration : z2m # transition: 1000 # transition attribute works on Hue bridge light : light.hallway # Hue light group. On/off completely in sync, as zigbee group commands are used by Hue bridge actions : - toggle - toggle_hold Regular use of E1743 controller for a light, but delaying the off action for 10 seconds. The use case could be for when we have a switch at the beginning of the corridor and we do not want the light to turn off until a certain period of time. corridor_controller : module : controllerx class : E1743Controller controller : corridor_controller integration : deconz light : light.corridor action_delay : 2002 : 10 Using a xy color light bulb as a color temperature one when it does support it. office : module : controllerx class : E1810Controller controller : office_controller # This is the Z2M friendly name of the device integration : name : z2m listen_to : mqtt light : name : light.office color_mode : color_temp Using a xy color light bulb as a color temperature one when it does NOT support it. office : module : controllerx class : E1810Controller controller : zigbee2mqtt/office_controller/action integration : mqtt light : light.office color_wheel : color_temp_wheel","title":"Basic"},{"location":"examples/#advanced","text":"Controlling different lights with the same controller depending where you are. livingroom_controller : module : controllerx class : E1810Controller controller : controller_id integration : deconz light : light.light1 constrain_input_select : input_select.where_am_i,livingroom controller_bedroom : module : controllerx class : E1810Controller controller : controller_id integration : deconz light : light.light2 constrain_input_select : input_select.where_am_i,bedroom controller_bathroom : module : controllerx class : E1810Controller controller : controller_id integration : deconz light : light.light3 constrain_input_select : input_select.where_am_i,bathroom Controlling different lights with the E1810 controller. Using brightness buttons for one light, arrows for another one and the center to turn off a group of lights. light1_controller : module : controllerx class : LightController controller : e1810_controller integration : deconz light : light.light1 mapping : 2002 : \"on\" 3002 : \"off\" 2001 : hold_brightness_up 2003 : release 3001 : hold_brightness_down 3003 : release light2_controller : module : controllerx class : LightController controller : e1810_controller integration : deconz light : light.light2 mapping : 4002 : \"on\" 5002 : \"off\" 4001 : hold_brightness_down 4003 : release 5001 : hold_brightness_up 5003 : release all_lights_controller : module : controllerx class : LightController controller : e1810_controller integration : deconz light : group.all_lights mapping : 1002 : \"off\" Extending the functionality of the smooth power onfor the E1810, so when clicked or hold each button when the light is off, it sets the light to its minimum or maximum brightness or color, depending on the button pressed. This assumes you have a light with support to color temperature. livingroom_light_on : module : controllerx class : E1810Controller controller : sensor.livingroom_controller_action integration : z2m light : light.livingroom constrain_input_boolean : light.livingroom,on livingroom_light_off : module : controllerx class : LightController controller : sensor.livingroom_controller_action integration : z2m light : light.livingroom mapping : toggle : toggle brightness_up_click : on_full_brightness brightness_down_click : on_min_brightness brightness_up_hold : on_full_brightness brightness_down_hold : on_min_brightness arrow_right_click : on_full_color_temp arrow_left_click : on_min_color_temp arrow_right_hold : on_full_color_temp arrow_left_hold : on_min_color_temp constrain_input_boolean : light.livingroom,off Customising Aqara magic cube with deCONZ. The key values were extracted from the deCONZ section in here and the values were extracted from the predefined media player action list . example_app : module : controllerx class : MediaPlayerController controller : my_magic_cube_id integration : name : deconz type : gesture media_player : media_player.livingroom_speaker mapping : 1 : play_pause # Shake 8 : click_volume_down # Rotate left 7 : click_volume_up # Rotate right 3 : next_track # Flip90 4 : previous_track # Flip180 Customising Aqara magic cube with z2m. This makes use of the mapping attribute to turn on different HA scenes. cube_bedroom : module : controllerx class : Controller controller : sensor.cube_bedroom_action integration : z2m mapping : flip90 : service : scene.turn_on data : entity_id : scene.bedroom1 flip180 : service : scene.turn_on data : entity_id : scene.bedroom2 tap : service : scene.turn_on data : entity_id : scene.bedroom3 Customising WXKG01LM de Aqara. We want to toggle the light and turn it on always to brightness 20 (min: 0, max: 255). For this we create one instance app configuration for the default behaviour of the controller, but excluding single which toggles the light. Then we create a custom controller with the mapping attribute to give a behaviour to the single action. mando_aqara_salon : module : controllerx class : WXKG01LMLightController controller : sensor.0x00158d00027b6d79_click integration : z2m light : light.0x000d6ffffec2620d_light merge_mapping : single : # Give an action to the `single` event service : light.toggle data : entity_id : light.0x000d6ffffec2620d_light brightness : 20 Customising the E1810 to invert the click and hold actions and control a group of sonos devices. By default it skips track when pressing, whit this it skips source by pressing. sonos_speaker : module : controllerx class : MediaPlayerController controller : sensor.0x90fd9ffffe0cbd69_action integration : z2m media_player : group.sonos_all mapping : toggle : play_pause brightness_up_click : click_volume_up brightness_down_click : click_volume_down brightness_up_hold : hold_volume_up brightness_down_hold : hold_volume_down brightness_up_release : release brightness_up_release : release arrow_right_click : next_source arrow_left_click : previous_source arrow_right_hold : next_track arrow_left_hold : previous_track This next configuration shows the use of multiple click functionality, and merge_mapping . We want to use the E1810 for a light ( light.light1 ) and toggle another light ( light.light2 ) when clicking twice the toggle button. We could do this in one application configuration as you can see in the multiple click page , but we will do it separatelly to show that the first config needs to change the toggle for toggle$1 to be detected as a multiple-clickable action, otherwise when the center button is clicked twice, it will also toggle light.light1 . example_app_1 : module : controllerx class : E1810Controller controller : my_controller integration : name : z2m listen_to : mqtt light : light.light1 merge_mapping : toggle$1 : toggle example_app_2 : module : controllerx class : E1810Controller controller : my_controller integration : name : z2m listen_to : mqtt light : light.light2 mapping : toggle$2 : toggle The following configuration is a tricky one, but at the same time it also shows the power of ControllerX to adapt to any use case. Imagine we want the following for our Symfonisk controller (E1744) with deCONZ: 1 click: Toggle light on/off. 2 click: Toggle between (pre-defined) Warm - and Cold-White. 3 click: \"switch to alternate behavior\" - instead of the default dimming-behavior when turning left/right - change color-temperature by turning turning left makes light colder (more blueish) and right make it warmer (more reds). rotate left/right: This will depend on the state when clicking 3 times. Assuming you have created the following input_booleans in HA ( input_boolean.light_mode , input_boolean.light_colortemp_mode ) we can use the following configuration: example_app : module : controllerx class : E1744LightController controller : symfonisk_controller integration : deconz light : light.livingroom_lamp automatic_steps : 15 delay : 150 mapping : 2001 : hold_brightness_up # Right turn 3001 : hold_brightness_down # Left turn 2003 : release # Stop right turn 3003 : release # Stop left turn constrain_input_boolean : input_boolean.light_mode,on example_app2 : module : controllerx class : E1744LightController controller : symfonisk_controller integration : deconz light : light.livingroom_lamp automatic_steps : 15 delay : 150 mapping : 2001 : hold_color_up # Right turn 3001 : hold_color_down # Left turn 2003 : release # Stop right turn 3003 : release # Stop left turn constrain_input_boolean : input_boolean.light_mode,off example_app3 : module : controllerx class : E1744LightController controller : symfonisk_controller integration : deconz light : light.livingroom_lamp min_color_temp : 200 mapping : 1004 : on_min_color_temp # 2 clicks constrain_input_boolean : input_boolean.light_colortemp_mode,on example_app4 : module : controllerx class : E1744LightController controller : symfonisk_controller integration : deconz light : light.livingroom_lamp max_color_temp : 400 mapping : 1004 : on_full_color_temp # 2 clicks constrain_input_boolean : input_boolean.light_colortemp_mode,off example_app5 : module : controllerx class : E1744LightController controller : symfonisk_controller integration : deconz light : light.livingroom_lamp mapping : 1002 : toggle # 1 clicks 1004 : # 2 clicks service : input_boolean.toggle data : entity_id : input_boolean.light_colortemp_mode 1005 : # 3 clicks service : input_boolean.toggle data : entity_id : input_boolean.light_mode The following example shows the potential of templating render. Let's say we want to execute different predefined actions every time we click a button (E1810 in this case). First, we can create an input select through UI or YAML in HA: input_select : light_state : options : - on_min_brightness - on_full_brightness - set_half_brightness Then we can define the following ControllerX config to change the option of the input_select and apply the predefined action that is selected: example_app : module : controllerx class : E1810Controller controller : livingroom_controller integration : name : z2m listen_to : mqtt light : light.my_light mapping : toggle : - service : input_select.select_next data : entity_id : input_select.light_state - action : \"{{ states('input_select.light_state') }}\"","title":"Advanced"},{"location":"examples/sonos-display/","text":"Using ControllerX - Controlling your Sonos speakers have never been easier \ud83d\ude0e But the occasional wish for a visual check on what\u2019s actually playing, volume setting, media artist/title, active speakers in group etc. is still there \ud83d\udc40 Leaving you with no other choice than adding a display integration as the obvious solution for this need \ud83d\ude09 All it takes is an ESP8266 with ESPHome software, an appropriate display, a handfull (well actually 2 handfulls and then some) of HA sensors and you\u2019re all set to go \ud83d\ude80 ESPHome is a system framework for ESP8266 units that has support for several I2C OLED/E-ink display types and numerous sensors, has direct HA integration via add-on and easy, yet powerful YAML configuration. Read more about ESPHome and how to set it up in HA here: https://esphome.io/ Current v1.1 display code uses newly merged display on/off and brightness commands. Use ESPHome version 1.15.0b4 or newer ! YAML has been tested on both NodeMCUv2 , Wemos D1 Mini and NodeMCU with integrated display using both SSD1306 & SSD1309 displays (I2C connected). Hardware: I initially used the simple and inexpensive (less than 2 US$ ) SSD1306 0,96\" OLED display for this build. Resolution is only 128x64. But still enough, when using several pages to be displayed continously. The SSD1306 has a 'big brother' in the SSD1309 display. This display has identical resolution as SSD1306, is priced at some 14 US$, can use same drivers/library as SSD1306 but is much, much larger at 2,42\". I really like this good sized and simple I2C display and ended up using this display in the final build, as it's much easier to read from a distance \ud83d\ude42 An optional PIR sensor or microwave radar sensor can be added for automatic dimming (brightness control) and turning the display on/off completely. The RCWL 0516 sensor is cheap, but can be somewhat difficult to use in 'tight' builds as it's somewhat sensitive to many things - WiFi in particular. So you could experience some false triggers using this sensor if fitted very close to the ESP8266. AM 312 is a cheap and simple 'no nonsense' PIR sensor that just always works as expected. Sensor can also be used for other purposes as well in HA \ud83d\ude42 Sensor is configured in YAML using pin D5 (GPIO14). Display is set to dim down after 5 minutes with no PIR triggers and completely off after additional 10 minutes without registered movement. Please note that (at least on my display version) SSD1309 display can't be turned completely off with id(display_id).set_brightness(0) command, but this works perfectly on my SSD1306 display. Instead SSD1309 has to be turned on/off with specific id(display_id).turn_on() / id(display_id).turn_off() commands. Check what works on your display and revise implementation method/ESPHome yaml config code accordingly. I've collected some hardware link examples below. These are just some random sellers I've picked. Not necessarily the cheapest or best sellers. Wemos D1 mini \u2013 ESP8266 0,96\" 12864 SSD1306 OLED display 2,42\u201d 12864 SSD1309 OLED display (direct replacement for the much smaller 0,96\u201d SSD1306 display and can use same library) Alternatively you can use a Wemos NodeMCU ESP8266 with integrated 0,96\" OLED display Optional sensors to dim display when no movement is detected. Movement sensor 1: RCWL 0516 Microwave Micro Wave Radar Sensor Board Movement sensor 2: AM312 # PIR Motion Human Sensor One note on the SSD1309 display In order to get display to work with I2C instead of SPI, you need to do a bit of soldering. On the specific display type I bought, you need to bridge (short) R5 and move R4 to R3. Remember that display will NOT work unless RES is connected to RST on ESP8266 (or any available pin and controlled in ESPHome sw). Note: Display only supports 3,3v on VCC. Some have reported that display tolerates 5v (some might). I wouldn\u2019t take that risk, though! I\u2019ve kept both CS and DS \u2018floating\u2019. Haven\u2019t had any I2C address issues so far. Use pull-up/down resistors if you experience issues. Connections: SSD1306/1309 --> Wemos D1 mini VCC: 3,3v !!! (SSD1306 only: 3,3v-5v) GND: GND SDA: D1 SCL: D2 SSD1309 only --> Wemos D1 mini RES: D0 or RST CS : NC (No Connection - 'floating'. Default I2C address 0x3c) DC : NC (No Connection - 'floating') Display setup: My current display setup consists of four pages that all are displayed for 5 seconds. Following information is displayed on the screen: All pages: Source (if not present, display \u2018Sonos/Playlist\u2019), mute sign, volume setting and play/pause/idle status. Also displays shuffle sign when active for playlists Page 1: Active main/passive speakers. Page 2: Media artist/media title (if not available from stream, display time instead) Page 3: Time Page 4: Outdoor temperature sensor value True Type Fonts: Three 'standard' Calibri TT fonts are used plus a 'special' version of Heydings Icons font in which I've included some Heydings Controls icons as well. If you experience some strange characters on the display, you probably need to edit the glyphs in ESPHome YAML and add whatever language specific characters you find are missing. Calibri TTF fonts link Heydings Icons special file link Copy Calibri Bold, Calibri Regular, Calibri Light fonts plus the special Heydings Icons Symbols font file to the ESPHome folder /config/esphome/ Home Assistant sensors: Below you\u2019ll find the HA template sensors needed in configuration.yaml for ESPHome display to work. ESPHome will establish some four HA sensors as well, presented on HA frontend: PIR sensor, connection status, WiFi strength and display on/off sensor. If display on/off is turned off from HA, then triggering PIR will not turn on display or alter brightness. Note: media_artist and media_title attributes from HA's Sonos integration could be swapped for some radio stations, as these attributes are split from one combined string in the stream. Some radio stations have artist - title order, others use title - artist. You really can't tell... My danish radio stations (source list) all use the 'swapped' version, so my templates below swap these two attributes for radio stations. Enter your main speaker as trigger entity ID for all templates but the first two (search for media_player.office and replace with your main speaker entity). Without this specific hardcoded trigger entity, templates simply doesn't always update correctly. So unfortunately they're needed for now, until I hopefully find a 'cleaner' and more dynamic solution. # Sonos sensors sensor : - platform : template sensors : sonos_main_friendly : friendly_name : \"Sonos main Friendly\" entity_id : group.sonos_all value_template : \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'friendly_name') }}\" sonos_passives_friendly : friendly_name : \"Sonos passives Friendly\" entity_id : group.sonos_all value_template : >- {% for entity_id in state_attr(\"group.sonos_all\", \"entity_id\")[1:] -%} {% set friendly_name = state_attr(entity_id, \"friendly_name\") %} {%- if loop.last %}{{ friendly_name }}{% else %}{{ friendly_name }}, {% endif -%} {%- endfor %} media_title : # Swap title/artist if 'source' attribute is not present = radio entity_id : media_player.office # Sonos main speaker value_template : >- {% if is_state('sensor.media_source' , \"no source\") %} {{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_title') }} {% else %} {{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_artist') }} {% endif %} media_artist : # Swap title/artist if 'source' attribute is not present = radio entity_id : media_player.office # Sonos main speaker value_template : >- {% if is_state('sensor.media_source' , \"no source\") %} {{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_artist') }} {% else %} {{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_title') }} {% endif %} media_album_name : entity_id : media_player.office # Sonos main speaker value_template : \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_album_name') }}\" media_source : # Remove all after 'DR P4 Fyn' as source (to fit on display) entity_id : media_player.office # Sonos main speaker value_template : >- {% if state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'source') %} {{states.media_player.office.attributes.source.split('96.8')[0]}} {% else %} no source {% endif %} volume : entity_id : media_player.office # Sonos main speaker value_template : \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'volume_level')|float * 100 }}\" sonos_main_group_entities : entity_id : media_player.office # Sonos main speaker value_template : \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'sonos_group') }}\" Home Assistant group: Here you define your Sonos speaker entities. main speaker has to be entered as first entity and all that's actually needed. Active passive speakers will dynamically be added on HA restart or when group configuration is changed (via Sonos app/HA service calls eg.) If you're only using one speaker, you still need to create the group in groups.yaml and populate with that single main speaker entity, as the group entity is needed in the code. One note on main speaker, passives and Sonos groups Your defined main speaker actually doesn't need to be the main speaker. As long as it's part of the group (main or passive), then display will still show data for the group. But if defined main speaker is removed from the group, it will be a 'single speaker group' on it's own, and display will reflect main speaker data only. sonos_all : name : sonos_all entities : - media_player.office # This HAS to be your main speaker # - media_player.kitchen # Optional - passive speaker #1 # - media_player.livingroom # Optional - passive speaker #2 Home Assistant automations: First automation is identical with the one I've already used in my ControllerX Sonos group setup example link . Second automation is purely optional, and not really directly related to the display. It's just a quick shortcut to easily reset active speakers within group, volume and source playing to some defaults you've defined in the automation. Really nice when you have teenagers in the house, messing with active speaker entities in the group, playlists and volume all the time... \ud83d\ude09 The automation is written for an Ikea E1810 remote with z2m ControllerX HA integration. Here toggle_hold (Press and hold center button for appx. 3.5 seconds) is used as trigger. - id : Dynamic Sonos groups alias : Dynamic Sonos groups trigger : platform : state entity_id : sensor.sonos_main_group_entities # Same as defined in configuration.yaml platform : homeassistant event : start action : - service : group.set data_template : object_id : sonos_all # Name of Sonos group in groups.yaml entities : \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'sonos_group') | join(',') }}\" - id : Sonos reset to defaults settings alias : Sonos reset to defaults settings trigger : platform : state entity_id : sensor.your_E1810_sensor_action to : 'toggle_hold' action : - service : sonos.join data : main : media_player.office # This HAS to be your main speaker entity_id : - media_player.kitchen # passive speaker #1 - media_player.livingroom # passive speaker #2 - service : media_player.volume_set # Reset volume to 25 for all speakers data_template : entity_id : - media_player.office - media_player.kitchen - media_player.livingroom volume_level : 0.25 - service : media_player.select_source # Reset to your default choice of source data : entity_id : media_player.office # This HAS to be your main speaker source : 'DR P4 Fyn 96.8 (Nyheder)' - service : media_player.media_play # Start playing entity_id : media_player.office # This HAS to be your main speaker ESPHome YAML configuration: As ESPHome currently don't support attributes, all data to be displayed has to be in separate HA sensors. Hence the huge amount of sensors. If you're not using a movement sensor in your build, you could (but actually don't need to) revise YAML. If you experience issues with the 'floating' GPIO used for the PIR sensor, just pull pin D5 permanently low or high. Two entities needs to be entered. Your Sonos main speaker and optional temperature sensor. If temperature sensor is omitted, you can just revise YAML and delete page 3 & 4 from the display lambda configuration. Also remember to revise interval page count from 4 to 2. Revise sonos_status and outdoor_temp sensors in YAML below, to match your HA entities for Sonos main speaker and outdoor temperature sensor. Create a new ESPHome node and configure it with your ESP8266 board settings and WiFi credentials. Edit node and copy/paste revised YAML below to your node. Remember to insert your node's autogenerated WiFi ap settings to YAML. Save it, upload and enjoy! \ud83c\udf89\ud83d\ude0e One final note on current YAML configuration ESPHome is at max with all these included sensors, schedulers running and the quite extensive display lambda. Addding just one extra sensor to current YAML, will make ESPHome crash on boot. Omitting fast_connect: true from WiFi configuration in YAML will also send ESPHome into an eternal stack trace error boot loop \ud83d\ude80\ud83d\udc80 So 'tweak' YAML with care! \ud83d\ude01\ud83d\ude09 substitutions : devicename : sonos_display friendly_name : Sonos Display device_description : Sonos SSD1306/1309 display for Sonos groups esphome : name : $devicename comment : ${device_description} platform : ESP8266 board : d1_mini wifi : ssid : \"your_ssid\" password : \"your_password\" fast_connect : true # Mandatory for fast WiFi connect to avoid stack trace error on boot manual_ip : static_ip : 192.168.XX.XX # Enter your static IP address. Needed for fast WiFi connect to avoid stack trace error on boot gateway : 192.168.XX.XX # Enter your gateway subnet : 255.255.255.0 # Enter your subnet # Enable fallback hotspot (captive portal) in case wifi connection fails. Replace with your own node settings ap : ssid : \"Sonos Display Fallback Hotspot\" password : \"your_autogenerated_password\" captive_portal : # Enable logging logger : # Enable Home Assistant API api : ota : time : - platform : homeassistant id : esptime switch : # ** Not used - Currently ESPHome can't handle more sensors/switches than already installed *** #- platform: restart # name: \"${friendly_name} Restart\" # icon: \"mdi:restart\" - platform : template name : \"${friendly_name} On/Off\" id : sonos_display turn_on_action : - switch.template.publish : id : sonos_display state : ON - lambda : |- id(sonos).turn_on(); id(sonos).set_brightness(1); turn_off_action : - switch.template.publish : id : sonos_display state : OFF - lambda : |- id(sonos).turn_off(); sensor : # Outdoor temperature sensor - only used in display lambda page 4 - platform : homeassistant id : outdoor_temp entity_id : sensor.your_temperature_sensor internal : true - platform : homeassistant id : sonos_volume entity_id : sensor.volume internal : true # Create WiFi signal sensor in HA - platform : wifi_signal name : \"${friendly_name} WiFi Signal\" update_interval : 60s text_sensor : # Sonos main speaker - platform : homeassistant id : sonos_status entity_id : media_player.your_main_speaker internal : true - platform : homeassistant id : media_source entity_id : sensor.media_source internal : true - platform : homeassistant id : media_artist entity_id : sensor.media_artist internal : true - platform : homeassistant id : media_title entity_id : sensor.media_title internal : true # ** Not yet used - Currently ESPHome can't handle more sensors than already installed *** #- platform: homeassistant # id: media_album_title # entity_id: sensor.media_album_title // Not in use yet # internal: true - platform : homeassistant id : sonos_main entity_id : sensor.sonos_main_friendly internal : true - platform : homeassistant id : sonos_passives entity_id : sensor.sonos_passives_friendly internal : true binary_sensor : - platform : homeassistant id : mute entity_id : binary_sensor.is_volume_muted internal : true - platform : homeassistant id : shuffle entity_id : binary_sensor.shuffle internal : true - platform : gpio pin : D5 name : \"${friendly_name} PIR\" device_class : motion on_press : then : - binary_sensor.template.publish : id : dim_display state : ON - binary_sensor.template.publish : id : display_off state : ON on_release : then : - binary_sensor.template.publish : id : dim_display state : OFF - binary_sensor.template.publish : id : display_off state : OFF # Create HA connected sensor - platform : status name : \"${friendly_name} Status\" - platform : template id : dim_display filters : - delayed_off : 5min # Dim display after 5 minutes on_press : # brightness is float (from 0 to 1). 1 = 100% then : - lambda : |- if (id(sonos_display).state == true) { id(sonos).turn_on(); id(sonos).set_brightness(1); } on_release : # brightness is float (from 0 to 1). 0.01 = 1% then : - lambda : |- id(sonos).set_brightness(0.01); - platform : template id : display_off filters : - delayed_off : 15min # Turn off display after 15 minutes on_release : then : - lambda : |- id(sonos).turn_off(); font : - file : \"Calibri Bold.ttf\" id : font_large size : 23 glyphs : '!%\"()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz\u2588\u00a3$@\u00e6\u00f8\u00e5\u00c6\u00d8\u00c5&# '' \u00b4\u2019?\u00fc\u00f6\u00e4\u00e9' - file : \"Calibri Regular.ttf\" id : font_medium size : 19 glyphs : '!%\"()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz\u2588\u00a3$@\u00e6\u00f8\u00e5\u00c6\u00d8\u00c5&# '' \u00b4\u2019?\u00fc\u00f6\u00e4\u00e9' - file : \"Calibri Light.ttf\" id : font_small size : 11 glyphs : '!%\"()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz\u2588\u00a3$@\u00e6\u00f8\u00e5\u00c6\u00d8\u00c5&# '' \u00b4\u2019?\u00fc\u00f6\u00e4\u00e9' - file : \"Calibri Bold.ttf\" id : font_small_bold size : 12 glyphs : '!%\"()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz\u2588\u00a3$@\u00e6\u00f8\u00e5\u00c6\u00d8\u00c5&# '' \u00b4\u2019?\u00fc\u00f6\u00e4\u00e9' - file : \"HeydingsIconsSymbols.ttf\" id : font_icons_large size : 23 glyphs : \"0679HADJabjsmx\" - file : \"HeydingsIconsSymbols.ttf\" id : font_icons_medium size : 19 glyphs : \"0679HADJabjsmx\" - file : \"HeydingsIconsSymbols.ttf\" id : font_icons_14 size : 14 glyphs : \"0679HADJabjsmx\" - file : \"HeydingsIconsSymbols.ttf\" id : font_icons_small size : 11 glyphs : \"0679HADJabjsmx\" globals : - id : display_page type : int restore_value : no initial_value : \"0\" # On first boot, value=0 initiates display.turn_on() command. Can't run as on_boot command interval : - interval : 5s # Show each page for 5 seconds then : - lambda : |- if (id(display_page) == 0) { id(sonos_display).turn_on(); } if (id(display_page) < 4) { id(display_page)++; } else { id(display_page) = 1; } i2c : sda : D1 scl : D2 frequency : 100khz # Default 50kHz. Min. setting at 100kHz needed. Otherwise lambda is so slow that warnings appear in log display : - platform : ssd1306_i2c model : \"SSD1306 128x64\" reset_pin : D0 address : 0x3C # Default address for most SSD1306/1309 displays brightness : 100% update_interval : 1s id : sonos pages : lambda : |- if (id(media_source).state != \"no source\") { it.printf(64, 0, id(font_large), TextAlign::TOP_CENTER, \"%.12s\", id(media_source).state.c_str()); } else { if (id(display_page) == 1 or (id(display_page) == 3)) { it.printf(64, 0, id(font_large), TextAlign::TOP_CENTER, \"Sonos\"); // if no source list attribute, display Sonos Playlist instead } else { it.printf(64, 0, id(font_large), TextAlign::TOP_CENTER, \"Playlist\"); // if no source list attribute, display Sonos Playlist instead } if (id(shuffle).state) { it.printf(127, 17, id(font_icons_large), TextAlign::BOTTOM_RIGHT, \"x\"); // shuffle playlist sign at top right position } } if (id(mute).state) { it.printf(0, 20, id(font_icons_medium), TextAlign::TOP_LEFT, \"0\"); // speaker mute sign } else { it.printf(0, 20, id(font_icons_medium), TextAlign::TOP_LEFT, \"m\"); // speaker on sign } it.printf(21, 22, id(font_medium), TextAlign::TOP_LEFT, \"%.f\", id(sonos_volume).state); if (id(sonos_status).state == \"playing\") { it.printf(127, 18, id(font_icons_medium), TextAlign::TOP_RIGHT, \"6\"); // pause sign } else if (id(sonos_status).state == \"paused\") { it.printf(127, 18, id(font_icons_medium), TextAlign::TOP_RIGHT, \"7\"); // play sign } else { it.printf(127, 18, id(font_icons_medium), TextAlign::TOP_RIGHT, \"9\"); // stop sign } it.printf(107, 22, id(font_medium), TextAlign::TOP_RIGHT, \"%s\", id(sonos_status).state.c_str()); if (id(display_page) == 1) { it.printf(00, 53, id(font_icons_small), TextAlign::BOTTOM_LEFT, \"s\"); // star sign for main speaker it.printf(64, 53, id(font_small_bold), TextAlign::BOTTOM_CENTER, \"%s\", id(sonos_main).state.c_str()); it.printf(00, 65, id(font_icons_small), TextAlign::BOTTOM_LEFT, \"a\"); // chain sign for passive speaker(s) it.printf(64, 65, id(font_small), TextAlign::BOTTOM_CENTER, \"%s\", id(sonos_passives).state.c_str()); } else if (id(display_page) == 2) { if (id(media_title).state != \"None\") { it.printf(73, 53, id(font_small), TextAlign::BOTTOM_CENTER, \"%.24s\", id(media_title).state.c_str()); it.printf(73, 65, id(font_small), TextAlign::BOTTOM_CENTER, \"%.24s\", id(media_artist).state.c_str()); it.printf(00, 51, id(font_icons_14), TextAlign::BOTTOM_LEFT, \"j\"); // note sign (title) it.printf(00, 65, id(font_icons_small), TextAlign::BOTTOM_LEFT, \"A\"); // person sign (artist) } else { it.strftime(64, 42, id(font_large), TextAlign::TOP_CENTER, \"%H:%M:%S\", id(esptime).now()); } } else if (id(display_page) == 3) { it.strftime(64, 42, id(font_large), TextAlign::TOP_CENTER, \"%H:%M:%S\", id(esptime).now()); } else { it.printf(64, 42, id(font_large), TextAlign::TOP_CENTER, \"Out: %.1f\u00b0C\", id(outdoor_temp).state); } Change log Intitial version published July, 2020 v1.1 published September, 2020 Added optional sensor for brightness control & display on/off Added 'shuffle' & 'mute' signs When idle, display 'stop' sign and 'idle' text Revised display lambda page code Four ESPHome sensors exposed in HA Connected status WiFi strength Display on/off PIR Future plans: Design 2,9\" E-paper display version Improve/simplify HA sensor templates (if possible) Remove need for main entity everywhere in config files Thank you Xavi for providing the perfect solution for some of my templating issues \ud83d\udc4d\ud83d\ude0e September, 2020 @htvekov","title":"SONOS/SYMFONISK Display example"},{"location":"examples/sonos-display/#hardware","text":"I initially used the simple and inexpensive (less than 2 US$ ) SSD1306 0,96\" OLED display for this build. Resolution is only 128x64. But still enough, when using several pages to be displayed continously. The SSD1306 has a 'big brother' in the SSD1309 display. This display has identical resolution as SSD1306, is priced at some 14 US$, can use same drivers/library as SSD1306 but is much, much larger at 2,42\". I really like this good sized and simple I2C display and ended up using this display in the final build, as it's much easier to read from a distance \ud83d\ude42 An optional PIR sensor or microwave radar sensor can be added for automatic dimming (brightness control) and turning the display on/off completely. The RCWL 0516 sensor is cheap, but can be somewhat difficult to use in 'tight' builds as it's somewhat sensitive to many things - WiFi in particular. So you could experience some false triggers using this sensor if fitted very close to the ESP8266. AM 312 is a cheap and simple 'no nonsense' PIR sensor that just always works as expected. Sensor can also be used for other purposes as well in HA \ud83d\ude42 Sensor is configured in YAML using pin D5 (GPIO14). Display is set to dim down after 5 minutes with no PIR triggers and completely off after additional 10 minutes without registered movement. Please note that (at least on my display version) SSD1309 display can't be turned completely off with id(display_id).set_brightness(0) command, but this works perfectly on my SSD1306 display. Instead SSD1309 has to be turned on/off with specific id(display_id).turn_on() / id(display_id).turn_off() commands. Check what works on your display and revise implementation method/ESPHome yaml config code accordingly. I've collected some hardware link examples below. These are just some random sellers I've picked. Not necessarily the cheapest or best sellers. Wemos D1 mini \u2013 ESP8266 0,96\" 12864 SSD1306 OLED display 2,42\u201d 12864 SSD1309 OLED display (direct replacement for the much smaller 0,96\u201d SSD1306 display and can use same library) Alternatively you can use a Wemos NodeMCU ESP8266 with integrated 0,96\" OLED display Optional sensors to dim display when no movement is detected. Movement sensor 1: RCWL 0516 Microwave Micro Wave Radar Sensor Board Movement sensor 2: AM312 # PIR Motion Human Sensor One note on the SSD1309 display In order to get display to work with I2C instead of SPI, you need to do a bit of soldering. On the specific display type I bought, you need to bridge (short) R5 and move R4 to R3. Remember that display will NOT work unless RES is connected to RST on ESP8266 (or any available pin and controlled in ESPHome sw). Note: Display only supports 3,3v on VCC. Some have reported that display tolerates 5v (some might). I wouldn\u2019t take that risk, though! I\u2019ve kept both CS and DS \u2018floating\u2019. Haven\u2019t had any I2C address issues so far. Use pull-up/down resistors if you experience issues. Connections: SSD1306/1309 --> Wemos D1 mini VCC: 3,3v !!! (SSD1306 only: 3,3v-5v) GND: GND SDA: D1 SCL: D2 SSD1309 only --> Wemos D1 mini RES: D0 or RST CS : NC (No Connection - 'floating'. Default I2C address 0x3c) DC : NC (No Connection - 'floating')","title":"Hardware:"},{"location":"examples/sonos-display/#display-setup","text":"My current display setup consists of four pages that all are displayed for 5 seconds. Following information is displayed on the screen: All pages: Source (if not present, display \u2018Sonos/Playlist\u2019), mute sign, volume setting and play/pause/idle status. Also displays shuffle sign when active for playlists Page 1: Active main/passive speakers. Page 2: Media artist/media title (if not available from stream, display time instead) Page 3: Time Page 4: Outdoor temperature sensor value","title":"Display setup:"},{"location":"examples/sonos-display/#true-type-fonts","text":"Three 'standard' Calibri TT fonts are used plus a 'special' version of Heydings Icons font in which I've included some Heydings Controls icons as well. If you experience some strange characters on the display, you probably need to edit the glyphs in ESPHome YAML and add whatever language specific characters you find are missing. Calibri TTF fonts link Heydings Icons special file link Copy Calibri Bold, Calibri Regular, Calibri Light fonts plus the special Heydings Icons Symbols font file to the ESPHome folder /config/esphome/","title":"True Type Fonts:"},{"location":"examples/sonos-display/#home-assistant-sensors","text":"Below you\u2019ll find the HA template sensors needed in configuration.yaml for ESPHome display to work. ESPHome will establish some four HA sensors as well, presented on HA frontend: PIR sensor, connection status, WiFi strength and display on/off sensor. If display on/off is turned off from HA, then triggering PIR will not turn on display or alter brightness. Note: media_artist and media_title attributes from HA's Sonos integration could be swapped for some radio stations, as these attributes are split from one combined string in the stream. Some radio stations have artist - title order, others use title - artist. You really can't tell... My danish radio stations (source list) all use the 'swapped' version, so my templates below swap these two attributes for radio stations. Enter your main speaker as trigger entity ID for all templates but the first two (search for media_player.office and replace with your main speaker entity). Without this specific hardcoded trigger entity, templates simply doesn't always update correctly. So unfortunately they're needed for now, until I hopefully find a 'cleaner' and more dynamic solution. # Sonos sensors sensor : - platform : template sensors : sonos_main_friendly : friendly_name : \"Sonos main Friendly\" entity_id : group.sonos_all value_template : \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'friendly_name') }}\" sonos_passives_friendly : friendly_name : \"Sonos passives Friendly\" entity_id : group.sonos_all value_template : >- {% for entity_id in state_attr(\"group.sonos_all\", \"entity_id\")[1:] -%} {% set friendly_name = state_attr(entity_id, \"friendly_name\") %} {%- if loop.last %}{{ friendly_name }}{% else %}{{ friendly_name }}, {% endif -%} {%- endfor %} media_title : # Swap title/artist if 'source' attribute is not present = radio entity_id : media_player.office # Sonos main speaker value_template : >- {% if is_state('sensor.media_source' , \"no source\") %} {{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_title') }} {% else %} {{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_artist') }} {% endif %} media_artist : # Swap title/artist if 'source' attribute is not present = radio entity_id : media_player.office # Sonos main speaker value_template : >- {% if is_state('sensor.media_source' , \"no source\") %} {{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_artist') }} {% else %} {{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_title') }} {% endif %} media_album_name : entity_id : media_player.office # Sonos main speaker value_template : \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'media_album_name') }}\" media_source : # Remove all after 'DR P4 Fyn' as source (to fit on display) entity_id : media_player.office # Sonos main speaker value_template : >- {% if state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'source') %} {{states.media_player.office.attributes.source.split('96.8')[0]}} {% else %} no source {% endif %} volume : entity_id : media_player.office # Sonos main speaker value_template : \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'volume_level')|float * 100 }}\" sonos_main_group_entities : entity_id : media_player.office # Sonos main speaker value_template : \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'sonos_group') }}\"","title":"Home Assistant sensors:"},{"location":"examples/sonos-display/#home-assistant-group","text":"Here you define your Sonos speaker entities. main speaker has to be entered as first entity and all that's actually needed. Active passive speakers will dynamically be added on HA restart or when group configuration is changed (via Sonos app/HA service calls eg.) If you're only using one speaker, you still need to create the group in groups.yaml and populate with that single main speaker entity, as the group entity is needed in the code. One note on main speaker, passives and Sonos groups Your defined main speaker actually doesn't need to be the main speaker. As long as it's part of the group (main or passive), then display will still show data for the group. But if defined main speaker is removed from the group, it will be a 'single speaker group' on it's own, and display will reflect main speaker data only. sonos_all : name : sonos_all entities : - media_player.office # This HAS to be your main speaker # - media_player.kitchen # Optional - passive speaker #1 # - media_player.livingroom # Optional - passive speaker #2","title":"Home Assistant group:"},{"location":"examples/sonos-display/#home-assistant-automations","text":"First automation is identical with the one I've already used in my ControllerX Sonos group setup example link . Second automation is purely optional, and not really directly related to the display. It's just a quick shortcut to easily reset active speakers within group, volume and source playing to some defaults you've defined in the automation. Really nice when you have teenagers in the house, messing with active speaker entities in the group, playlists and volume all the time... \ud83d\ude09 The automation is written for an Ikea E1810 remote with z2m ControllerX HA integration. Here toggle_hold (Press and hold center button for appx. 3.5 seconds) is used as trigger. - id : Dynamic Sonos groups alias : Dynamic Sonos groups trigger : platform : state entity_id : sensor.sonos_main_group_entities # Same as defined in configuration.yaml platform : homeassistant event : start action : - service : group.set data_template : object_id : sonos_all # Name of Sonos group in groups.yaml entities : \"{{ state_attr(state_attr('group.sonos_all', 'entity_id')[0], 'sonos_group') | join(',') }}\" - id : Sonos reset to defaults settings alias : Sonos reset to defaults settings trigger : platform : state entity_id : sensor.your_E1810_sensor_action to : 'toggle_hold' action : - service : sonos.join data : main : media_player.office # This HAS to be your main speaker entity_id : - media_player.kitchen # passive speaker #1 - media_player.livingroom # passive speaker #2 - service : media_player.volume_set # Reset volume to 25 for all speakers data_template : entity_id : - media_player.office - media_player.kitchen - media_player.livingroom volume_level : 0.25 - service : media_player.select_source # Reset to your default choice of source data : entity_id : media_player.office # This HAS to be your main speaker source : 'DR P4 Fyn 96.8 (Nyheder)' - service : media_player.media_play # Start playing entity_id : media_player.office # This HAS to be your main speaker","title":"Home Assistant automations:"},{"location":"examples/sonos-display/#esphome-yaml-configuration","text":"As ESPHome currently don't support attributes, all data to be displayed has to be in separate HA sensors. Hence the huge amount of sensors. If you're not using a movement sensor in your build, you could (but actually don't need to) revise YAML. If you experience issues with the 'floating' GPIO used for the PIR sensor, just pull pin D5 permanently low or high. Two entities needs to be entered. Your Sonos main speaker and optional temperature sensor. If temperature sensor is omitted, you can just revise YAML and delete page 3 & 4 from the display lambda configuration. Also remember to revise interval page count from 4 to 2. Revise sonos_status and outdoor_temp sensors in YAML below, to match your HA entities for Sonos main speaker and outdoor temperature sensor. Create a new ESPHome node and configure it with your ESP8266 board settings and WiFi credentials. Edit node and copy/paste revised YAML below to your node. Remember to insert your node's autogenerated WiFi ap settings to YAML. Save it, upload and enjoy! \ud83c\udf89\ud83d\ude0e One final note on current YAML configuration ESPHome is at max with all these included sensors, schedulers running and the quite extensive display lambda. Addding just one extra sensor to current YAML, will make ESPHome crash on boot. Omitting fast_connect: true from WiFi configuration in YAML will also send ESPHome into an eternal stack trace error boot loop \ud83d\ude80\ud83d\udc80 So 'tweak' YAML with care! \ud83d\ude01\ud83d\ude09 substitutions : devicename : sonos_display friendly_name : Sonos Display device_description : Sonos SSD1306/1309 display for Sonos groups esphome : name : $devicename comment : ${device_description} platform : ESP8266 board : d1_mini wifi : ssid : \"your_ssid\" password : \"your_password\" fast_connect : true # Mandatory for fast WiFi connect to avoid stack trace error on boot manual_ip : static_ip : 192.168.XX.XX # Enter your static IP address. Needed for fast WiFi connect to avoid stack trace error on boot gateway : 192.168.XX.XX # Enter your gateway subnet : 255.255.255.0 # Enter your subnet # Enable fallback hotspot (captive portal) in case wifi connection fails. Replace with your own node settings ap : ssid : \"Sonos Display Fallback Hotspot\" password : \"your_autogenerated_password\" captive_portal : # Enable logging logger : # Enable Home Assistant API api : ota : time : - platform : homeassistant id : esptime switch : # ** Not used - Currently ESPHome can't handle more sensors/switches than already installed *** #- platform: restart # name: \"${friendly_name} Restart\" # icon: \"mdi:restart\" - platform : template name : \"${friendly_name} On/Off\" id : sonos_display turn_on_action : - switch.template.publish : id : sonos_display state : ON - lambda : |- id(sonos).turn_on(); id(sonos).set_brightness(1); turn_off_action : - switch.template.publish : id : sonos_display state : OFF - lambda : |- id(sonos).turn_off(); sensor : # Outdoor temperature sensor - only used in display lambda page 4 - platform : homeassistant id : outdoor_temp entity_id : sensor.your_temperature_sensor internal : true - platform : homeassistant id : sonos_volume entity_id : sensor.volume internal : true # Create WiFi signal sensor in HA - platform : wifi_signal name : \"${friendly_name} WiFi Signal\" update_interval : 60s text_sensor : # Sonos main speaker - platform : homeassistant id : sonos_status entity_id : media_player.your_main_speaker internal : true - platform : homeassistant id : media_source entity_id : sensor.media_source internal : true - platform : homeassistant id : media_artist entity_id : sensor.media_artist internal : true - platform : homeassistant id : media_title entity_id : sensor.media_title internal : true # ** Not yet used - Currently ESPHome can't handle more sensors than already installed *** #- platform: homeassistant # id: media_album_title # entity_id: sensor.media_album_title // Not in use yet # internal: true - platform : homeassistant id : sonos_main entity_id : sensor.sonos_main_friendly internal : true - platform : homeassistant id : sonos_passives entity_id : sensor.sonos_passives_friendly internal : true binary_sensor : - platform : homeassistant id : mute entity_id : binary_sensor.is_volume_muted internal : true - platform : homeassistant id : shuffle entity_id : binary_sensor.shuffle internal : true - platform : gpio pin : D5 name : \"${friendly_name} PIR\" device_class : motion on_press : then : - binary_sensor.template.publish : id : dim_display state : ON - binary_sensor.template.publish : id : display_off state : ON on_release : then : - binary_sensor.template.publish : id : dim_display state : OFF - binary_sensor.template.publish : id : display_off state : OFF # Create HA connected sensor - platform : status name : \"${friendly_name} Status\" - platform : template id : dim_display filters : - delayed_off : 5min # Dim display after 5 minutes on_press : # brightness is float (from 0 to 1). 1 = 100% then : - lambda : |- if (id(sonos_display).state == true) { id(sonos).turn_on(); id(sonos).set_brightness(1); } on_release : # brightness is float (from 0 to 1). 0.01 = 1% then : - lambda : |- id(sonos).set_brightness(0.01); - platform : template id : display_off filters : - delayed_off : 15min # Turn off display after 15 minutes on_release : then : - lambda : |- id(sonos).turn_off(); font : - file : \"Calibri Bold.ttf\" id : font_large size : 23 glyphs : '!%\"()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz\u2588\u00a3$@\u00e6\u00f8\u00e5\u00c6\u00d8\u00c5&# '' \u00b4\u2019?\u00fc\u00f6\u00e4\u00e9' - file : \"Calibri Regular.ttf\" id : font_medium size : 19 glyphs : '!%\"()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz\u2588\u00a3$@\u00e6\u00f8\u00e5\u00c6\u00d8\u00c5&# '' \u00b4\u2019?\u00fc\u00f6\u00e4\u00e9' - file : \"Calibri Light.ttf\" id : font_small size : 11 glyphs : '!%\"()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz\u2588\u00a3$@\u00e6\u00f8\u00e5\u00c6\u00d8\u00c5&# '' \u00b4\u2019?\u00fc\u00f6\u00e4\u00e9' - file : \"Calibri Bold.ttf\" id : font_small_bold size : 12 glyphs : '!%\"()+,-_.:\u00b00123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz\u2588\u00a3$@\u00e6\u00f8\u00e5\u00c6\u00d8\u00c5&# '' \u00b4\u2019?\u00fc\u00f6\u00e4\u00e9' - file : \"HeydingsIconsSymbols.ttf\" id : font_icons_large size : 23 glyphs : \"0679HADJabjsmx\" - file : \"HeydingsIconsSymbols.ttf\" id : font_icons_medium size : 19 glyphs : \"0679HADJabjsmx\" - file : \"HeydingsIconsSymbols.ttf\" id : font_icons_14 size : 14 glyphs : \"0679HADJabjsmx\" - file : \"HeydingsIconsSymbols.ttf\" id : font_icons_small size : 11 glyphs : \"0679HADJabjsmx\" globals : - id : display_page type : int restore_value : no initial_value : \"0\" # On first boot, value=0 initiates display.turn_on() command. Can't run as on_boot command interval : - interval : 5s # Show each page for 5 seconds then : - lambda : |- if (id(display_page) == 0) { id(sonos_display).turn_on(); } if (id(display_page) < 4) { id(display_page)++; } else { id(display_page) = 1; } i2c : sda : D1 scl : D2 frequency : 100khz # Default 50kHz. Min. setting at 100kHz needed. Otherwise lambda is so slow that warnings appear in log display : - platform : ssd1306_i2c model : \"SSD1306 128x64\" reset_pin : D0 address : 0x3C # Default address for most SSD1306/1309 displays brightness : 100% update_interval : 1s id : sonos pages : lambda : |- if (id(media_source).state != \"no source\") { it.printf(64, 0, id(font_large), TextAlign::TOP_CENTER, \"%.12s\", id(media_source).state.c_str()); } else { if (id(display_page) == 1 or (id(display_page) == 3)) { it.printf(64, 0, id(font_large), TextAlign::TOP_CENTER, \"Sonos\"); // if no source list attribute, display Sonos Playlist instead } else { it.printf(64, 0, id(font_large), TextAlign::TOP_CENTER, \"Playlist\"); // if no source list attribute, display Sonos Playlist instead } if (id(shuffle).state) { it.printf(127, 17, id(font_icons_large), TextAlign::BOTTOM_RIGHT, \"x\"); // shuffle playlist sign at top right position } } if (id(mute).state) { it.printf(0, 20, id(font_icons_medium), TextAlign::TOP_LEFT, \"0\"); // speaker mute sign } else { it.printf(0, 20, id(font_icons_medium), TextAlign::TOP_LEFT, \"m\"); // speaker on sign } it.printf(21, 22, id(font_medium), TextAlign::TOP_LEFT, \"%.f\", id(sonos_volume).state); if (id(sonos_status).state == \"playing\") { it.printf(127, 18, id(font_icons_medium), TextAlign::TOP_RIGHT, \"6\"); // pause sign } else if (id(sonos_status).state == \"paused\") { it.printf(127, 18, id(font_icons_medium), TextAlign::TOP_RIGHT, \"7\"); // play sign } else { it.printf(127, 18, id(font_icons_medium), TextAlign::TOP_RIGHT, \"9\"); // stop sign } it.printf(107, 22, id(font_medium), TextAlign::TOP_RIGHT, \"%s\", id(sonos_status).state.c_str()); if (id(display_page) == 1) { it.printf(00, 53, id(font_icons_small), TextAlign::BOTTOM_LEFT, \"s\"); // star sign for main speaker it.printf(64, 53, id(font_small_bold), TextAlign::BOTTOM_CENTER, \"%s\", id(sonos_main).state.c_str()); it.printf(00, 65, id(font_icons_small), TextAlign::BOTTOM_LEFT, \"a\"); // chain sign for passive speaker(s) it.printf(64, 65, id(font_small), TextAlign::BOTTOM_CENTER, \"%s\", id(sonos_passives).state.c_str()); } else if (id(display_page) == 2) { if (id(media_title).state != \"None\") { it.printf(73, 53, id(font_small), TextAlign::BOTTOM_CENTER, \"%.24s\", id(media_title).state.c_str()); it.printf(73, 65, id(font_small), TextAlign::BOTTOM_CENTER, \"%.24s\", id(media_artist).state.c_str()); it.printf(00, 51, id(font_icons_14), TextAlign::BOTTOM_LEFT, \"j\"); // note sign (title) it.printf(00, 65, id(font_icons_small), TextAlign::BOTTOM_LEFT, \"A\"); // person sign (artist) } else { it.strftime(64, 42, id(font_large), TextAlign::TOP_CENTER, \"%H:%M:%S\", id(esptime).now()); } } else if (id(display_page) == 3) { it.strftime(64, 42, id(font_large), TextAlign::TOP_CENTER, \"%H:%M:%S\", id(esptime).now()); } else { it.printf(64, 42, id(font_large), TextAlign::TOP_CENTER, \"Out: %.1f\u00b0C\", id(outdoor_temp).state); }","title":"ESPHome YAML configuration:"},{"location":"examples/sonos-display/#change-log","text":"Intitial version published July, 2020 v1.1 published September, 2020 Added optional sensor for brightness control & display on/off Added 'shuffle' & 'mute' signs When idle, display 'stop' sign and 'idle' text Revised display lambda page code Four ESPHome sensors exposed in HA Connected status WiFi strength Display on/off PIR Future plans: Design 2,9\" E-paper display version Improve/simplify HA sensor templates (if possible) Remove need for main entity everywhere in config files Thank you Xavi for providing the perfect solution for some of my templating issues \ud83d\udc4d\ud83d\ude0e September, 2020 @htvekov","title":"Change log"},{"location":"examples/sonos/","text":"SONOS/SYMFONISK single speaker ControllerX can 'out of the box' control single speakers with following small app setup. Supports: Toggle play/pause, volume up/down, previous/next song (in playlist) and previous/next favourites from Sonos app (source list). This favourites list can consist of both radio stations, playlists, podcasts etc. Source list is 'circular'. Meaning that choosing next when at last source in list, will skip to first source in list - and vice versa. office_sonos_controller : module : controllerx class : E1810MediaPlayerController controller : sensor.controller_action integration : z2m volume_steps : 20 # default setting is 10. This will increase default steps to 20 from no volume to full volume media_player : media_player.office SONOS/SYMFONISK groups ControllerX supports Sonos groups as well. If media_player in app is set to a group, then ControllerX will read the Sonos source list from FIRST entity_id in group. So this has to be your chosen main speaker! This setup will work perfectly, if you only use static groups that are never altered (via Sonos app/HA or otherwise). But if your Sonos group alters through the day (other family members redefines group speakers to their liking), you need a dynamic group setting. This can easily be achieved by adding only one sensor and one small automation to your HA configuration. HA configuration.yaml - platform : template sensors : sonos_main_group_entities : value_template : \"{{ state_attr('media_player.office', 'sonos_group') }}\" #main speaker HA automation.yaml id : dynamic_sonos_groups alias : dynamic_sonos_groups trigger : platform : state entity_id : sensor.sonos_main_group_entities # Same as defined in configuration.yaml action : - service : group.set data_template : object_id : sonos_all #name of sonos group in groups.yaml entities : \"{{ state_attr('media_player.office', 'sonos_group') | join(',') }}\" #main speaker HA groups.yaml name : sonos_all entities : - media_player.office #this HAS to be your main speaker - media_player.kitchen #passive speaker #1 - media_player.livingroom #passive speaker #2 And with the following ControllerX configuration, you will be able to control the dynamic group in HA, which will be changed immediately if group is altered eg. from Sonos app. This app version below, has 'flipped' the arrow functions. So click will change source and hold will change previous/next song in playlist. This behaviour will most likely fit better for users that primarily uses favourites (radio stations). Appdeamon apps.yaml sonos_group : module : controllerx class : MediaPlayerController controller : sensor.controller_action integration : z2m volume_steps : 20 media_player : group.sonos_all #Sonos group in groups.yaml mapping : toggle : play_pause brightness_up_click : click_volume_up brightness_down_click : click_volume_down brightness_up_hold : hold_volume_up brightness_down_hold : hold_volume_down brightness_up_release : release brightness_down_release : release arrow_right_click : next_source arrow_left_click : previous_source arrow_right_hold : next_track arrow_left_hold : previous_track This example was provided by @htvekov","title":"SONOS/SYMFONISK Examples"},{"location":"examples/sonos/#sonossymfonisk-single-speaker","text":"ControllerX can 'out of the box' control single speakers with following small app setup. Supports: Toggle play/pause, volume up/down, previous/next song (in playlist) and previous/next favourites from Sonos app (source list). This favourites list can consist of both radio stations, playlists, podcasts etc. Source list is 'circular'. Meaning that choosing next when at last source in list, will skip to first source in list - and vice versa. office_sonos_controller : module : controllerx class : E1810MediaPlayerController controller : sensor.controller_action integration : z2m volume_steps : 20 # default setting is 10. This will increase default steps to 20 from no volume to full volume media_player : media_player.office","title":"SONOS/SYMFONISK single speaker"},{"location":"examples/sonos/#sonossymfonisk-groups","text":"ControllerX supports Sonos groups as well. If media_player in app is set to a group, then ControllerX will read the Sonos source list from FIRST entity_id in group. So this has to be your chosen main speaker! This setup will work perfectly, if you only use static groups that are never altered (via Sonos app/HA or otherwise). But if your Sonos group alters through the day (other family members redefines group speakers to their liking), you need a dynamic group setting. This can easily be achieved by adding only one sensor and one small automation to your HA configuration.","title":"SONOS/SYMFONISK groups"},{"location":"examples/sonos/#ha-configurationyaml","text":"- platform : template sensors : sonos_main_group_entities : value_template : \"{{ state_attr('media_player.office', 'sonos_group') }}\" #main speaker","title":"HA configuration.yaml"},{"location":"examples/sonos/#ha-automationyaml","text":"id : dynamic_sonos_groups alias : dynamic_sonos_groups trigger : platform : state entity_id : sensor.sonos_main_group_entities # Same as defined in configuration.yaml action : - service : group.set data_template : object_id : sonos_all #name of sonos group in groups.yaml entities : \"{{ state_attr('media_player.office', 'sonos_group') | join(',') }}\" #main speaker","title":"HA automation.yaml"},{"location":"examples/sonos/#ha-groupsyaml","text":"name : sonos_all entities : - media_player.office #this HAS to be your main speaker - media_player.kitchen #passive speaker #1 - media_player.livingroom #passive speaker #2 And with the following ControllerX configuration, you will be able to control the dynamic group in HA, which will be changed immediately if group is altered eg. from Sonos app. This app version below, has 'flipped' the arrow functions. So click will change source and hold will change previous/next song in playlist. This behaviour will most likely fit better for users that primarily uses favourites (radio stations).","title":"HA groups.yaml"},{"location":"examples/sonos/#appdeamon-appsyaml","text":"sonos_group : module : controllerx class : MediaPlayerController controller : sensor.controller_action integration : z2m volume_steps : 20 media_player : group.sonos_all #Sonos group in groups.yaml mapping : toggle : play_pause brightness_up_click : click_volume_up brightness_down_click : click_volume_down brightness_up_hold : hold_volume_up brightness_down_hold : hold_volume_down brightness_up_release : release brightness_down_release : release arrow_right_click : next_source arrow_left_click : previous_source arrow_right_hold : next_track arrow_left_hold : previous_track This example was provided by @htvekov","title":"Appdeamon apps.yaml"},{"location":"examples/tasmota-switchmode11/","text":"Updated August, 2020. Changelog at last page TASMOTA SWITCHMODE 11/12 WALL SWITCH IMPLEMENTATION WITH HOME ASSISTANT / CONTROLLERX Want to make your 'dumb' wall switches smart and at the same time improve installation of smart lights WAF \ud83d\udc69\u200d\ud83e\uddb0 ? Then the solution could be to 'Tasmotize' your wall switches, and use Home Asssistant with ControllerX app to control the smart light connected to that switch. With this setup, you'll be able to toggle, turn lights on at full brightness, sync and dim your lights directly from your wall switch. Today, many WIFI switches are so small, that they can fit behind wall outlets/switches or in ceiling outlets. Personally, I've used Shelly One devices and Itead Sonoff Mini's . Both are easy to flash with Tasmota using either USB-to-UART adapter or directly OTA. No soldering is actually needed these days. The flash part and build instructions are to comprehensive to elaborate on further in this documentation. Instructions are 'out there' - Google it! \ud83d\ude09 One of my Sonoff Mini installations behind a wall switch. Danish wall switch modules are typically not larger than appx. 50x50mm pr. module (outside measurements). I\u2019ve LK Opus 66 installed, which is a slightly larger type measuring 66mm in width. Still I can squeeze a Sonoff Mini in behind a \u2018typical\u2019 double module wall switch. Shelly devices are a bit smaller, round in shape and in general easier to fit than the Sonoff Mini\u2019s. One final warning: Using Shelly/Sonoff devices behind wall switches/outlets involves fiddling with \u26a1HIGH VOLTAGE\u26a1 that could potentially INJURE OR KILL YOU \ud83e\ude78\ud83d\ude31\ud83d\udc80 , if not handled/installed correctly !! Furthermore, local building code might prohibit use of such devices in wall outlets and unauthorized installation will most likely be illegal in most countries. If you don't know EXACTLY what you're doing - then DON'T proceed with this project !! Now you've been warned !! Following example is with a Shelly One device, placed in the wall socket behind the switch, to control an Ikea WS bulb in the ceiling outlet. The bulb is connected to Home Assistant via Zigbee2MQTT. I've refitted my wall switch with a spring, so it'll act like a push button. The Switchmode11/12 option in Tasmota, gives the user six different switch commands to be used for automation. With ControllerX only four of these commands are needed, as ControllerX internally controls changes in dimming direction. These commands (events) are send directly to ControllerX via MQTT. Switchmode11/12 Tasmota output commands are: Switchstate=2: toggle (Normal TOGGLE function. One single press) Switchstate=4: inc-dec (HOLD function. Send after delay defined with Setoption32) Switchstate=5: inv (INVERSE dim direction function. Not used in this implementation, as ControllerX handles this internally) Switchstate=6: clear (Delayed RELEASE function. Send when button is released AFTER delay defined with Setoption32. Not used in this implementation) Switchstate=7: clear (Normal RELEASE function. Send immediately after button is released Switchstate=8: double (DOUBLE press function. Two consecutive presses within time delay defined with SetOption32 Requirements: Tasmota: v8.4.0.2 or newer ControllerX: v3.4.0b1 or newer Shelly device Tasmota setup (Use switchmode 11 !!): Module type: Shelly 1 (46): Sonoff Mini device Tasmota setup (Use switchmode 12 !!): Module type: Sonoff Basic (1) GPIO4: Switch1 (9) Setup ControllerX app: Both examples listed below will: toggle light(s) upon single button press dim light(s) up/down when button is held Turn light(s) on at full brightness upon double press First example is with two separate controllers. This will also handle HOLD FROM LIGHTS OFF situation. Which, when lights are off, will SYNC light/lights when button is held for 0,8 sec. ControllerX apps.yaml example no. 1: controller_switchmode11_on : module : controllerx class : LightController controller : tasmota_topic # Normally z2m friendly name. Here topic used in Tasmota rules integration : state name : z2m listen_to : mqtt action_key : action # Defaults to action if not specified light : light.your_light # define your own light entity constrain_input_boolean : light.your_light,on # This whole configuration will work when the light is on mapping : toggle : toggle inc-dec : hold_brightness_toggle clear : release double : on_full_brightness controller_switchmode11_off : module : controllerx class : LightController controller : tasmota_topic # Normally z2m friendly name. Here topic used in Tasmota rules integration : state name : z2m listen_to : mqtt action_key : action # Defaults to action if not specified light : light.your_light # define your own light entity constrain_input_boolean : light.your_light,off # This whole configuration will work when the light is off mapping : toggle : toggle inc-dec : sync double : on_full_brightness Second example is a more simple setup, where smooth_power_on is enabled instead, when button is held from lights off position. ControllerX apps.yaml example no. 2: tasmota_switchmode11 : module : controllerx class : LightController controller : tasmota_topic # Normally z2m friendly name. Here topic used in Tasmota rules integration : state name : z2m listen_to : mqtt action_key : action # Defaults to action if not specified smooth_power_on : true # enable 'smooth power on' feature when button is held from lights off delay : 250 # change delay if you want faster/slower dimming response (default: 350 ms.) light : light.your_light # define your own light entity mapping : toggle : toggle inc-dec : hold_brightness_toggle clear : release double : on_full_brightness Notes on Appdaemon and HA's state machine: Things unfortunately take time when HA's state machine is involved! This can for some be notisable (for others not), when Appdaemon apps has to check HA states by eg. using constrain_input_boolean's (as in example 1) or change HA states by toggling lights. In my setup, using a constrain_input_boolean adds some 100 ms. delay on execution. Not much on its own, but still worth to keep in mind. Toggling lights via HA automation is also some 100 ms. faster than toggling through Appdaemon/ControllerX. So in order to get the fastest possible toggle of lights, I'm personally using a simple HA automation for toggling lights and let ControllerX handle everything else \ud83d\ude42 Optional HA toggle automation below. Remember to remove toggle from mapping in Appdaemon/ControllerX apps.yaml \ud83d\ude09 # Toggle lights through HA using direct MQTT events. Quicker responce than using platform state or directly in appdaemon ControllerX app - alias : tasmota_switchmode11_toggle trigger : platform : mqtt topic : zigbee2mqtt/tasmota_topic payload : \"{\\\"action\\\": \\\"toggle\\\"}\" # escape characters needed ! action : service : light.toggle data : entity_id : light.your_light Setup needed commands and rules in Tasmota software via console: Powerretain1 1 Retain Tasmota power settings i HA in event of power outage Setoption1 1 Allow only single, double and hold press button actions Setoption32 8 Delay for HOLD button (in 0,1 sec.). I use 8 = 0,8 sec. Max value allowed is 63 !! Setoption34 50 Minimize delay between backlog commands to 50 ms. (Default 200 ms.) Switchtopic 0 Disable switchtopic. Needed when using rules in Tasmota. Switchmode1 11 Set Tasmota to switchmode11 RULE1 on switch1#state=2 do publish zigbee2mqtt/tasmota_topic {\"action\": \"toggle\"} endon on switch1#state=8 do publish zigbee2mqtt/tasmota_topic {\"action\": \"double\"} endon on switch1#state=7 do backlog publish zigbee2mqtt/tasmota_topic {\"action\": \"clear\"};rule3 1 endon RULE2 on mqtt#disconnected do rule1 0 endon on mqtt#connected do rule1 1 endon RULE3 5 on switch1#state=4 do backlog publish zigbee2mqtt/tasmota_topic {\"action\": \"inc-dec\"};rule3 0 endon NB: Note the extra decimal '5' in RULE3 !! RULE1 sends the TOGGLE and DOUBLE press command via MQTT . CLEAR command is fired upon button release and RULE3 is enabled again (ready for next HOLD command). RULE2 handles the 'fall back' to direct switch control if MQTT server is unavailable. Nice WAF feature, if HA/MQTT server is down. Then lights still can be toggled on/off using the wall switch. RULE3 sends the HOLD command and disables itselves (to ensure only one HOLD command is fired). RULE3 is set as 'run once' in Tasmota (with the decimal 5 after the rule number) to prevent some extra HOLD commands gets fired before rule is disabled. Rules also needs to be 'escaped', if used with HA automation. Tasmota will automatically add needed escape characters, if rules are entered without. Changelog: doc v1.0: Initial example documentation May, 2020 doc v1.1: Deprecated use of custom controllers in example. These will shortly be deprecated as well in ControllerX Changed from HA sensor state to official z2m MQTT event implementation using JSON objects (speed improvement!) New switchmode 11/12 DOUBLE press command implemented This example was provided by @htvekov","title":"Tasmota SwitchMode 11/12 Example - v1.1"},{"location":"examples/tasmota-switchmode11/#tasmota-switchmode-1112-wall-switch-implementation-with-home-assistant-controllerx","text":"Want to make your 'dumb' wall switches smart and at the same time improve installation of smart lights WAF \ud83d\udc69\u200d\ud83e\uddb0 ? Then the solution could be to 'Tasmotize' your wall switches, and use Home Asssistant with ControllerX app to control the smart light connected to that switch. With this setup, you'll be able to toggle, turn lights on at full brightness, sync and dim your lights directly from your wall switch. Today, many WIFI switches are so small, that they can fit behind wall outlets/switches or in ceiling outlets. Personally, I've used Shelly One devices and Itead Sonoff Mini's . Both are easy to flash with Tasmota using either USB-to-UART adapter or directly OTA. No soldering is actually needed these days. The flash part and build instructions are to comprehensive to elaborate on further in this documentation. Instructions are 'out there' - Google it! \ud83d\ude09 One of my Sonoff Mini installations behind a wall switch. Danish wall switch modules are typically not larger than appx. 50x50mm pr. module (outside measurements). I\u2019ve LK Opus 66 installed, which is a slightly larger type measuring 66mm in width. Still I can squeeze a Sonoff Mini in behind a \u2018typical\u2019 double module wall switch. Shelly devices are a bit smaller, round in shape and in general easier to fit than the Sonoff Mini\u2019s. One final warning: Using Shelly/Sonoff devices behind wall switches/outlets involves fiddling with \u26a1HIGH VOLTAGE\u26a1 that could potentially INJURE OR KILL YOU \ud83e\ude78\ud83d\ude31\ud83d\udc80 , if not handled/installed correctly !! Furthermore, local building code might prohibit use of such devices in wall outlets and unauthorized installation will most likely be illegal in most countries. If you don't know EXACTLY what you're doing - then DON'T proceed with this project !! Now you've been warned !! Following example is with a Shelly One device, placed in the wall socket behind the switch, to control an Ikea WS bulb in the ceiling outlet. The bulb is connected to Home Assistant via Zigbee2MQTT. I've refitted my wall switch with a spring, so it'll act like a push button. The Switchmode11/12 option in Tasmota, gives the user six different switch commands to be used for automation. With ControllerX only four of these commands are needed, as ControllerX internally controls changes in dimming direction. These commands (events) are send directly to ControllerX via MQTT.","title":"TASMOTA SWITCHMODE 11/12 WALL SWITCH IMPLEMENTATION WITH HOME ASSISTANT / CONTROLLERX"},{"location":"examples/tasmota-switchmode11/#switchmode1112-tasmota-output-commands-are","text":"Switchstate=2: toggle (Normal TOGGLE function. One single press) Switchstate=4: inc-dec (HOLD function. Send after delay defined with Setoption32) Switchstate=5: inv (INVERSE dim direction function. Not used in this implementation, as ControllerX handles this internally) Switchstate=6: clear (Delayed RELEASE function. Send when button is released AFTER delay defined with Setoption32. Not used in this implementation) Switchstate=7: clear (Normal RELEASE function. Send immediately after button is released Switchstate=8: double (DOUBLE press function. Two consecutive presses within time delay defined with SetOption32","title":"Switchmode11/12 Tasmota output commands are:"},{"location":"examples/tasmota-switchmode11/#requirements","text":"Tasmota: v8.4.0.2 or newer ControllerX: v3.4.0b1 or newer","title":"Requirements:"},{"location":"examples/tasmota-switchmode11/#shelly-device-tasmota-setup-use-switchmode-11","text":"Module type: Shelly 1 (46):","title":"Shelly device Tasmota setup (Use switchmode 11 !!):"},{"location":"examples/tasmota-switchmode11/#sonoff-mini-device-tasmota-setup-use-switchmode-12","text":"Module type: Sonoff Basic (1) GPIO4: Switch1 (9)","title":"Sonoff Mini device Tasmota setup (Use switchmode 12 !!):"},{"location":"examples/tasmota-switchmode11/#setup-controllerx-app","text":"Both examples listed below will: toggle light(s) upon single button press dim light(s) up/down when button is held Turn light(s) on at full brightness upon double press First example is with two separate controllers. This will also handle HOLD FROM LIGHTS OFF situation. Which, when lights are off, will SYNC light/lights when button is held for 0,8 sec.","title":"Setup ControllerX app:"},{"location":"examples/tasmota-switchmode11/#controllerx-appsyaml-example-no-1","text":"controller_switchmode11_on : module : controllerx class : LightController controller : tasmota_topic # Normally z2m friendly name. Here topic used in Tasmota rules integration : state name : z2m listen_to : mqtt action_key : action # Defaults to action if not specified light : light.your_light # define your own light entity constrain_input_boolean : light.your_light,on # This whole configuration will work when the light is on mapping : toggle : toggle inc-dec : hold_brightness_toggle clear : release double : on_full_brightness controller_switchmode11_off : module : controllerx class : LightController controller : tasmota_topic # Normally z2m friendly name. Here topic used in Tasmota rules integration : state name : z2m listen_to : mqtt action_key : action # Defaults to action if not specified light : light.your_light # define your own light entity constrain_input_boolean : light.your_light,off # This whole configuration will work when the light is off mapping : toggle : toggle inc-dec : sync double : on_full_brightness Second example is a more simple setup, where smooth_power_on is enabled instead, when button is held from lights off position.","title":"ControllerX apps.yaml example no. 1:"},{"location":"examples/tasmota-switchmode11/#controllerx-appsyaml-example-no-2","text":"tasmota_switchmode11 : module : controllerx class : LightController controller : tasmota_topic # Normally z2m friendly name. Here topic used in Tasmota rules integration : state name : z2m listen_to : mqtt action_key : action # Defaults to action if not specified smooth_power_on : true # enable 'smooth power on' feature when button is held from lights off delay : 250 # change delay if you want faster/slower dimming response (default: 350 ms.) light : light.your_light # define your own light entity mapping : toggle : toggle inc-dec : hold_brightness_toggle clear : release double : on_full_brightness","title":"ControllerX apps.yaml example no. 2:"},{"location":"examples/tasmota-switchmode11/#notes-on-appdaemon-and-has-state-machine","text":"Things unfortunately take time when HA's state machine is involved! This can for some be notisable (for others not), when Appdaemon apps has to check HA states by eg. using constrain_input_boolean's (as in example 1) or change HA states by toggling lights. In my setup, using a constrain_input_boolean adds some 100 ms. delay on execution. Not much on its own, but still worth to keep in mind. Toggling lights via HA automation is also some 100 ms. faster than toggling through Appdaemon/ControllerX. So in order to get the fastest possible toggle of lights, I'm personally using a simple HA automation for toggling lights and let ControllerX handle everything else \ud83d\ude42 Optional HA toggle automation below. Remember to remove toggle from mapping in Appdaemon/ControllerX apps.yaml \ud83d\ude09 # Toggle lights through HA using direct MQTT events. Quicker responce than using platform state or directly in appdaemon ControllerX app - alias : tasmota_switchmode11_toggle trigger : platform : mqtt topic : zigbee2mqtt/tasmota_topic payload : \"{\\\"action\\\": \\\"toggle\\\"}\" # escape characters needed ! action : service : light.toggle data : entity_id : light.your_light","title":"Notes on Appdaemon and HA's state machine:"},{"location":"examples/tasmota-switchmode11/#setup-needed-commands-and-rules-in-tasmota-software-via-console","text":"Powerretain1 1 Retain Tasmota power settings i HA in event of power outage Setoption1 1 Allow only single, double and hold press button actions Setoption32 8 Delay for HOLD button (in 0,1 sec.). I use 8 = 0,8 sec. Max value allowed is 63 !! Setoption34 50 Minimize delay between backlog commands to 50 ms. (Default 200 ms.) Switchtopic 0 Disable switchtopic. Needed when using rules in Tasmota. Switchmode1 11 Set Tasmota to switchmode11 RULE1 on switch1#state=2 do publish zigbee2mqtt/tasmota_topic {\"action\": \"toggle\"} endon on switch1#state=8 do publish zigbee2mqtt/tasmota_topic {\"action\": \"double\"} endon on switch1#state=7 do backlog publish zigbee2mqtt/tasmota_topic {\"action\": \"clear\"};rule3 1 endon RULE2 on mqtt#disconnected do rule1 0 endon on mqtt#connected do rule1 1 endon RULE3 5 on switch1#state=4 do backlog publish zigbee2mqtt/tasmota_topic {\"action\": \"inc-dec\"};rule3 0 endon NB: Note the extra decimal '5' in RULE3 !! RULE1 sends the TOGGLE and DOUBLE press command via MQTT . CLEAR command is fired upon button release and RULE3 is enabled again (ready for next HOLD command). RULE2 handles the 'fall back' to direct switch control if MQTT server is unavailable. Nice WAF feature, if HA/MQTT server is down. Then lights still can be toggled on/off using the wall switch. RULE3 sends the HOLD command and disables itselves (to ensure only one HOLD command is fired). RULE3 is set as 'run once' in Tasmota (with the decimal 5 after the rule number) to prevent some extra HOLD commands gets fired before rule is disabled. Rules also needs to be 'escaped', if used with HA automation. Tasmota will automatically add needed escape characters, if rules are entered without.","title":"Setup needed commands and rules in Tasmota software via console:"},{"location":"examples/tasmota-switchmode11/#changelog","text":"doc v1.0: Initial example documentation May, 2020 doc v1.1: Deprecated use of custom controllers in example. These will shortly be deprecated as well in ControllerX Changed from HA sensor state to official z2m MQTT event implementation using JSON objects (speed improvement!) New switchmode 11/12 DOUBLE press command implemented This example was provided by @htvekov","title":"Changelog:"},{"location":"others/extract-controller-id/","text":"The purpose of this page is to indicate what value the controller attribute should have depending on the integration used. Click here to know more about the integrations. Zigbee2MQTT The name you need to add to the controller parameter can be found in Configuration > Integrations > MQTT and then select the controller. Then you will see the action sensor that by default finishes in _action . The parameter you need is the entity id of the sensor. deCONZ In case of deCONZ, you can go to Developer Tools > Events then down the bottom you can subscribe for deconz_event and start listening. Then press any button and you will see event of the button, you will need to copy the id inside the data object. ZHA In case of ZHA, you can go to Developer Tools > Events then down the bottom you can subscribe for zha_event and start listening. Then press any button and you will see event of the button, you will need to copy the device_ieee inside the data object. It is a number like the following 00:67:88:56:06:78:9b:3f. MQTT In case of using MQTT integration, the controller attribute must have the MQTT topic to listen from. It is important that the topic payload contains directly the action name and not a JSON. This means that in case of using the MQTT integration with a z2m controller, then the topic to listen to must be zigbee2mqtt/<friendly name>/action or zigbee2mqtt/<friendly name>/click . You can see the topic on the Zigbee2MQTT logs. Homematic In case of Homematic, you can go to Developer Tools > Events then down the bottom you can subscribe for homematic.keypress and start listening. Then press any button and you will see event of the button, you will need to copy the name inside the data object.","title":"How to extract the controller parameter"},{"location":"others/extract-controller-id/#zigbee2mqtt","text":"The name you need to add to the controller parameter can be found in Configuration > Integrations > MQTT and then select the controller. Then you will see the action sensor that by default finishes in _action . The parameter you need is the entity id of the sensor.","title":"Zigbee2MQTT"},{"location":"others/extract-controller-id/#deconz","text":"In case of deCONZ, you can go to Developer Tools > Events then down the bottom you can subscribe for deconz_event and start listening. Then press any button and you will see event of the button, you will need to copy the id inside the data object.","title":"deCONZ"},{"location":"others/extract-controller-id/#zha","text":"In case of ZHA, you can go to Developer Tools > Events then down the bottom you can subscribe for zha_event and start listening. Then press any button and you will see event of the button, you will need to copy the device_ieee inside the data object. It is a number like the following 00:67:88:56:06:78:9b:3f.","title":"ZHA"},{"location":"others/extract-controller-id/#mqtt","text":"In case of using MQTT integration, the controller attribute must have the MQTT topic to listen from. It is important that the topic payload contains directly the action name and not a JSON. This means that in case of using the MQTT integration with a z2m controller, then the topic to listen to must be zigbee2mqtt/<friendly name>/action or zigbee2mqtt/<friendly name>/click . You can see the topic on the Zigbee2MQTT logs.","title":"MQTT"},{"location":"others/extract-controller-id/#homematic","text":"In case of Homematic, you can go to Developer Tools > Events then down the bottom you can subscribe for homematic.keypress and start listening. Then press any button and you will see event of the button, you will need to copy the name inside the data object.","title":"Homematic"},{"location":"others/run-appdaemon/","text":"AppDaemon let's you run Home Assistant automation with Python code, instead of yaml configuration. When it comes simple automations, yaml or the Automation editor are great, but if the automation gets more complicated, then it gets more difficult to control through yaml, this is where AppDaemon comes into place. This is the reason this project is built on top of AppDaemon. Now you might be convinced, but you have no idea of how to install it and set it up. If you are using Home Assistant with the Supervisor, you can install the addon called AppDaemon from the addon store. You can follow the addon instructions and once is up and running, you can check the installation page.","title":"What's AppDaemon and why I need it"},{"location":"others/update/","text":"Note that AppDaemon will need to be restarted when installing a new version of ControllerX. This is due to AppDaemon not reimporting the modules again. If AppDaemon server is not restarted, then it will keep executing the old version.","title":"Update ControllerX"},{"location":"start/configuration/","text":"This is an example configuration template to place in /config/appdaemon/apps/apps.yaml : example_app : module : controllerx class : <class of your controller> controller : <controller entity id> integration : <z2m | deconz | zha> light : <light, group entity id> or: example_app : module : controllerx class : <class of your controller> controller : <controller entity id> integration : <z2m | deconz | zha> light : name : <light, group entity id> color_mode : auto | xy_color | color_temp or: example_app : module : controllerx class : <class of your controller> controller : <controller entity id> integration : <z2m | deconz | zha> media_player : <media player, group entity id> or: example_app : module : controllerx class : <class of your controller> controller : <controller entity id> integration : <z2m | deconz | zha> switch : <switch, group entity id> Parameters These are the generic app parameters for all type of controllers. You can see the rest in here . key type value description module * string controllerx The Python module class * string E1810Controller The Python class. Check the classes for each controller on the supported controllers page. controller * string | list sensor.controller or hue_switch1, hue_switch2 This is the controller id, which will depend on the integration. See here to know how to get the controller id. integration * string | dict z2m , deconz or zha This is the integration that the device was integrated. actions list All actions This is a list of actions to be included and controlled by the app. To see which actions has each controller check the individual controller pages in here . This attribute cannot be used together with excluded_actions . excluded_actions list Empty list This is a list of actions to be excluded. To see which actions has each controller check the individual controller pages in here . This attribute cannot be used together with actions . action_delta dict | int 300 This is the threshold time between the previous action and the next one (being the same action). If the time difference between the two actions is less than this attribute, then the action won't be called. I recommend changing this if you see the same action being called twice. A different action_delta per action can be defined in a mapping. multiple_click_delay int 500 Indicates the delay (in milliseconds) when a multiple click action should be trigger. The higher the number, the more time there can be between clicks, but there will be more delay for the action to be triggered. action_delay dict | int 0 This can be used to set a delay to each action. By default, the delay for all actions is 0. If defining a map, the key for the map is the action and the value is the delay in seconds. Otherwise, we can set a default time like action_delay: 10 , and this will add a delay to all actions. previous_state dict | str - This can be used to restrict when an action is performed depending on the previous state of the entity. This is just applicable for state and z2m (with not MQTT) integrations. For example, it can be used when we want the action to be triggered only with a specific previous state. mapping dict - This can be used to replace the behaviour of the controller and manually select what each button should be doing. By default it will ignore this parameter. Read more about it in here . The functionality included in this attribute will remove the default mapping. merge_mapping dict - This can be used to merge the default mapping from the controller and manually select what each button should be doing. By default it will ignore this parameter. Read more about it in here . The functionality included in this attribute is added on top of the default mapping. mode dict | int single This has the purpose of defining what to do when an ation(s) is/are executing. The options and the behaviour is the same as Home Assistant automation modes since it is based on that. The only difference is that queued only queues 1 task after the one is being executed. One can define a mapping for each action event with different modes. Integration dictionary for integration attribute. key type value description name * string z2m , deconz or zha This is the integration that the device was integrated. In addition, you can add arguments. Each integration has its own arguments. * Required fields Explained with YAML example_app : # It can be anything module : controllerx # `class` value depends on the controller you want to use # Check the classes for each controller on the supported controllers page # Supported controller page: https://xaviml.github.io/controllerx/controllers/ class : Controller # or E1810Controller, LightController, HueDimmerController, etc. # `controller` value depends on the integration used (z2m, deconz, zha). # Check https://xaviml.github.io/controllerx/others/extract-controller-id for more info controller : sensor.my_controller_action # or my_controller_id or 00:67:88:56:06:78:9b:3f # `integration` is the integration used for your controller # It can be used as object like: # integration: # name: z2m # listen_to: mqtt # Check https://xaviml.github.io/controllerx/others/integrations for more info integration : z2m # or deconz, mqtt, zha, state # `actions` and `excluded_actions` can be used to indicate which actions from the default mapping # will be used or not. These 2 attributes cannot be used at the same time. actions : # or excluded_actions. This is optional. - toggle - brightness_up_click # `action_delta` is the threshold to avoid firing the same action twice action_delta : 300 # default. This is optional. # `multiple_click_delay` is used for the multiclick functionality # Check https://xaviml.github.io/controllerx/advanced/multiple-clicks for more info multiple_click_delay : 500 # default. This is optional. # `action_delay` lets you configure delays to existing actions action_delay : # This is optional. toggle : 10 # This will fire `toggle` action in 10 seconds after pressed. # `mode` allows you to define the strategy when an action is already executing # Possible values are `single`, `restart`, `queued` and `parallel` mode : single # default. This is optional. # `mapping` and `merge_mapping` let you override the default behaviour of your controller. # `merge_mapping` updates the default mapping, and `mapping` overrides it completely. # Check https://xaviml.github.io/controllerx/advanced/custom-controllers for more info merge_mapping : # or `mapping`. This is optional. brightness_up_click : toggle_full_brightness # use predefined actions toggle : # or HA service calls service : scene.turn_on data : entity_id : scene.my_scene toggle$2 : # This scripts will be called when toggle is fired twice within 500ms (multiple_click_delay) - service : script.my_script - service : script.my_script_with_arguments data : my_attr : test # From here on, we can include specific attribute from type controllers like # Light, MediaPlayer, Switch or Cover controller for example # Check https://xaviml.github.io/controllerx/start/type-configuration for more info light : light.my_light # or media_player, switch, cover","title":"Configuration"},{"location":"start/configuration/#parameters","text":"These are the generic app parameters for all type of controllers. You can see the rest in here . key type value description module * string controllerx The Python module class * string E1810Controller The Python class. Check the classes for each controller on the supported controllers page. controller * string | list sensor.controller or hue_switch1, hue_switch2 This is the controller id, which will depend on the integration. See here to know how to get the controller id. integration * string | dict z2m , deconz or zha This is the integration that the device was integrated. actions list All actions This is a list of actions to be included and controlled by the app. To see which actions has each controller check the individual controller pages in here . This attribute cannot be used together with excluded_actions . excluded_actions list Empty list This is a list of actions to be excluded. To see which actions has each controller check the individual controller pages in here . This attribute cannot be used together with actions . action_delta dict | int 300 This is the threshold time between the previous action and the next one (being the same action). If the time difference between the two actions is less than this attribute, then the action won't be called. I recommend changing this if you see the same action being called twice. A different action_delta per action can be defined in a mapping. multiple_click_delay int 500 Indicates the delay (in milliseconds) when a multiple click action should be trigger. The higher the number, the more time there can be between clicks, but there will be more delay for the action to be triggered. action_delay dict | int 0 This can be used to set a delay to each action. By default, the delay for all actions is 0. If defining a map, the key for the map is the action and the value is the delay in seconds. Otherwise, we can set a default time like action_delay: 10 , and this will add a delay to all actions. previous_state dict | str - This can be used to restrict when an action is performed depending on the previous state of the entity. This is just applicable for state and z2m (with not MQTT) integrations. For example, it can be used when we want the action to be triggered only with a specific previous state. mapping dict - This can be used to replace the behaviour of the controller and manually select what each button should be doing. By default it will ignore this parameter. Read more about it in here . The functionality included in this attribute will remove the default mapping. merge_mapping dict - This can be used to merge the default mapping from the controller and manually select what each button should be doing. By default it will ignore this parameter. Read more about it in here . The functionality included in this attribute is added on top of the default mapping. mode dict | int single This has the purpose of defining what to do when an ation(s) is/are executing. The options and the behaviour is the same as Home Assistant automation modes since it is based on that. The only difference is that queued only queues 1 task after the one is being executed. One can define a mapping for each action event with different modes. Integration dictionary for integration attribute. key type value description name * string z2m , deconz or zha This is the integration that the device was integrated. In addition, you can add arguments. Each integration has its own arguments. * Required fields","title":"Parameters"},{"location":"start/configuration/#explained-with-yaml","text":"example_app : # It can be anything module : controllerx # `class` value depends on the controller you want to use # Check the classes for each controller on the supported controllers page # Supported controller page: https://xaviml.github.io/controllerx/controllers/ class : Controller # or E1810Controller, LightController, HueDimmerController, etc. # `controller` value depends on the integration used (z2m, deconz, zha). # Check https://xaviml.github.io/controllerx/others/extract-controller-id for more info controller : sensor.my_controller_action # or my_controller_id or 00:67:88:56:06:78:9b:3f # `integration` is the integration used for your controller # It can be used as object like: # integration: # name: z2m # listen_to: mqtt # Check https://xaviml.github.io/controllerx/others/integrations for more info integration : z2m # or deconz, mqtt, zha, state # `actions` and `excluded_actions` can be used to indicate which actions from the default mapping # will be used or not. These 2 attributes cannot be used at the same time. actions : # or excluded_actions. This is optional. - toggle - brightness_up_click # `action_delta` is the threshold to avoid firing the same action twice action_delta : 300 # default. This is optional. # `multiple_click_delay` is used for the multiclick functionality # Check https://xaviml.github.io/controllerx/advanced/multiple-clicks for more info multiple_click_delay : 500 # default. This is optional. # `action_delay` lets you configure delays to existing actions action_delay : # This is optional. toggle : 10 # This will fire `toggle` action in 10 seconds after pressed. # `mode` allows you to define the strategy when an action is already executing # Possible values are `single`, `restart`, `queued` and `parallel` mode : single # default. This is optional. # `mapping` and `merge_mapping` let you override the default behaviour of your controller. # `merge_mapping` updates the default mapping, and `mapping` overrides it completely. # Check https://xaviml.github.io/controllerx/advanced/custom-controllers for more info merge_mapping : # or `mapping`. This is optional. brightness_up_click : toggle_full_brightness # use predefined actions toggle : # or HA service calls service : scene.turn_on data : entity_id : scene.my_scene toggle$2 : # This scripts will be called when toggle is fired twice within 500ms (multiple_click_delay) - service : script.my_script - service : script.my_script_with_arguments data : my_attr : test # From here on, we can include specific attribute from type controllers like # Light, MediaPlayer, Switch or Cover controller for example # Check https://xaviml.github.io/controllerx/start/type-configuration for more info light : light.my_light # or media_player, switch, cover","title":"Explained with YAML"},{"location":"start/installation/","text":"AppDaemon installation Before installing ControllerX, we will need to install AppDaemon first. For this, you can follow the official documentation for it. I personally recommend to install the AppDaemon addon from the Add-on store on your Home Assistant. Once the addon is installed, you can run it and it will set up everything for you. It will create a folder in /config/appdaemon with the needed structure for AppDaemon to run. You can read here what's AppDaemon and why is needed. ControllerX installation Once you have AppDaemon up and running (check the logs), you can proceed to install ControllerX either manually or through HACS. It is important to have AppDaemon up and running before installing ControllerX. HACS The easiest way to add this to your Home Assistant installation is using HACS with Enable AppDaemon apps discovery & tracking checked. If you don't have it enabled, go to Configuration > Integrations > HACS (Options) . You will find ControllerX in the Automation section on HACS. Once installed, restart AppDaemon addon/server and go to the configuration page. Manual Download the latest version , and then place the controllerx folder in your machine /config/appdaemon/apps/controllerx . The controllerx.py needs to be in /config/appdaemon/apps/controllerx/controllerx.py . Once copied, restart AppDaemon addon/server.","title":"Installation"},{"location":"start/installation/#appdaemon-installation","text":"Before installing ControllerX, we will need to install AppDaemon first. For this, you can follow the official documentation for it. I personally recommend to install the AppDaemon addon from the Add-on store on your Home Assistant. Once the addon is installed, you can run it and it will set up everything for you. It will create a folder in /config/appdaemon with the needed structure for AppDaemon to run. You can read here what's AppDaemon and why is needed.","title":"AppDaemon installation"},{"location":"start/installation/#controllerx-installation","text":"Once you have AppDaemon up and running (check the logs), you can proceed to install ControllerX either manually or through HACS. It is important to have AppDaemon up and running before installing ControllerX.","title":"ControllerX installation"},{"location":"start/installation/#hacs","text":"The easiest way to add this to your Home Assistant installation is using HACS with Enable AppDaemon apps discovery & tracking checked. If you don't have it enabled, go to Configuration > Integrations > HACS (Options) . You will find ControllerX in the Automation section on HACS. Once installed, restart AppDaemon addon/server and go to the configuration page.","title":"HACS"},{"location":"start/installation/#manual","text":"Download the latest version , and then place the controllerx folder in your machine /config/appdaemon/apps/controllerx . The controllerx.py needs to be in /config/appdaemon/apps/controllerx/controllerx.py . Once copied, restart AppDaemon addon/server.","title":"Manual"},{"location":"start/integrations/","text":"Integrations is a way to abstract the logic from the event extraction in ControllerX. Each integration is resposible for listening the state or event and decoding the events in a way that ControllerX understands. Here you can see which value the controller should have for each of this integrations: Zigbee2MQTT This integration( z2m ) is meant to be used for zigbee2mqtt. It listens the states from the HA sensor entities. You can add listen_to attribute to indicate if it listens for HA states ( ha ) or MQTT topics ( mqtt ). Default is ha . If you want to use the mqtt , then you will need to change the appdaemon.yaml as it is stated in the MQTT integration section. Imagine we have the following configuration already created for a z2m controller listening to HA state: livingroom_controller : module : controllerx class : E1810Controller controller : sensor.livingroom_controller_action integration : z2m light : light.bedroom Then, if we want to listen to the MQTT topic directly (skipping the HA state machine), we will need to change to: livingroom_controller : module : controllerx class : E1810Controller controller : livingroom_controller integration : name : z2m listen_to : mqtt action_key : action # By default is `action` already light : light.bedroom Three things to clarify when using the z2m integration listening to MQTT: appdaemon.yaml needs to be changed by adding the MQTT plugin (see MQTT section below). The Zigbee2MQTT friendly name from the z2m needs to be specified in the controller attribute. action_key is the key inside the topic payload that contains the fired action from the controller. It is normally action or click . By default will be action . action_group is a list of allowed action groups for the controller configuration. Read more about it here . deCONZ This integration( deconz ) listens to deconz_event events and actions gets fired by default with the event attribute from the data object. However, you can change the attribute to listen to by adding a type attribute. In addition, you can select which attribute to listen to ( id or unique_id ) with listen_to . This is an example: example_app : module : controllerx class : MFKZQ01LMLightController controller : magic_cube integration : name : deconz listen_to : unique_id # defaults to `id` type : gesture # defaults to `event` light : light.example_light ZHA This integration( zha ) listens to zha_event events and concatenates the command with the argument for the action string. It does not have any additional arguments. MQTT This integration ( mqtt ) listens for the topic sent from the controller attribute. Although this integration makes sense to use together with custom controllers , it works with the actions from zigbee2mqtt. This means that if you have a configuration like the following: livingroom_controller : module : controllerx class : E1810Controller controller : sensor.livingroom_controller_action integration : z2m light : light.bedroom You can remove the layer of HA state and therefore gain some speed by changing it for: livingroom_controller : module : controllerx class : E1810Controller # This is the action topic from z2m controller : zigbee2mqtt/livingroom_controller/action integration : mqtt light : light.bedroom By doing this, ControllerX will be listening directly from MQTT rather than Home Assistant (which listens from MQTT). Not only can you use this with zigbee2mqtt, but also with any other MQTT integration. This works for JSON and non-JSON values in the payload. If an specific attribute needs to be extracted from JSON payload, the key (which works like action_key from Zigbee2MQTT integration) attribute can be used: example_app : module : controllerx class : LightController controller : - zigbee2mqtt/stairway_sensor01_occupancy - zigbee2mqtt/stairway_sensor02_occupancy light : light.stairway integration : name : mqtt key : occupancy mapping : \"true\" : \"on\" \"false\" : \"off\" This example will turn on the light when the following payload is shown for one of the 2 topics in the controller key: { \"battery\" : 99 , \"illuminance\" : 0 , \"illuminance_lux\" : 0 , \"linkquality\" : 255 , \"occupancy\" : true , \"temperature\" : 27 , \"voltage\" : 2985 } By default, mqtt will read non-JSON values. Last but not least, MQTT needs to be configured on appdaemon.yaml by adding the MQTT plugin, apart from the HASS plugin. The whole file should look like the following: --- secrets : /config/secrets.yaml appdaemon : latitude : X.XXXXXXX longitude : X.XXXXXXX elevation : XXXX time_zone : XXXXXXXX # You can add `missing_app_warnings` if you don't want any # warning spam from ControllerX when starting AppDaemon missing_app_warnings : 0 plugins : HASS : type : hass MQTT : type : mqtt namespace : mqtt # This is important client_host : <Host without indicating the port (e.g. 192.168.1.10)> client_user : XXXXX client_password : XXXXX http : url : http://127.0.0.1:5050 admin : api : hadashboard : State This integration ( state ) listens for the state of a sensor and the action is fired with the changed event. You can add attribute parameter if you want to listen to state change on the state attribute level. Read more about the options in here . An example could be: example_app : module : controllerx class : LightController controller : sensor.my_custom_button integration : name : state attribute : click light : light.example_light mapping : 1_click : \"on\" 2_click : \"off\" Lutron Cas\u00e9ta This integration( lutron_caseta ) listens to lutron_caseta_button_event events. It creates an action like button_<number>_<action type> . It does not have any additional arguments. Homematic This integration ( homematic ) listens to homematic.keypress events. It created an action like <action_type>_<channel> . It does not have any additional arguments.","title":"Integrations"},{"location":"start/integrations/#zigbee2mqtt","text":"This integration( z2m ) is meant to be used for zigbee2mqtt. It listens the states from the HA sensor entities. You can add listen_to attribute to indicate if it listens for HA states ( ha ) or MQTT topics ( mqtt ). Default is ha . If you want to use the mqtt , then you will need to change the appdaemon.yaml as it is stated in the MQTT integration section. Imagine we have the following configuration already created for a z2m controller listening to HA state: livingroom_controller : module : controllerx class : E1810Controller controller : sensor.livingroom_controller_action integration : z2m light : light.bedroom Then, if we want to listen to the MQTT topic directly (skipping the HA state machine), we will need to change to: livingroom_controller : module : controllerx class : E1810Controller controller : livingroom_controller integration : name : z2m listen_to : mqtt action_key : action # By default is `action` already light : light.bedroom Three things to clarify when using the z2m integration listening to MQTT: appdaemon.yaml needs to be changed by adding the MQTT plugin (see MQTT section below). The Zigbee2MQTT friendly name from the z2m needs to be specified in the controller attribute. action_key is the key inside the topic payload that contains the fired action from the controller. It is normally action or click . By default will be action . action_group is a list of allowed action groups for the controller configuration. Read more about it here .","title":"Zigbee2MQTT"},{"location":"start/integrations/#deconz","text":"This integration( deconz ) listens to deconz_event events and actions gets fired by default with the event attribute from the data object. However, you can change the attribute to listen to by adding a type attribute. In addition, you can select which attribute to listen to ( id or unique_id ) with listen_to . This is an example: example_app : module : controllerx class : MFKZQ01LMLightController controller : magic_cube integration : name : deconz listen_to : unique_id # defaults to `id` type : gesture # defaults to `event` light : light.example_light","title":"deCONZ"},{"location":"start/integrations/#zha","text":"This integration( zha ) listens to zha_event events and concatenates the command with the argument for the action string. It does not have any additional arguments.","title":"ZHA"},{"location":"start/integrations/#mqtt","text":"This integration ( mqtt ) listens for the topic sent from the controller attribute. Although this integration makes sense to use together with custom controllers , it works with the actions from zigbee2mqtt. This means that if you have a configuration like the following: livingroom_controller : module : controllerx class : E1810Controller controller : sensor.livingroom_controller_action integration : z2m light : light.bedroom You can remove the layer of HA state and therefore gain some speed by changing it for: livingroom_controller : module : controllerx class : E1810Controller # This is the action topic from z2m controller : zigbee2mqtt/livingroom_controller/action integration : mqtt light : light.bedroom By doing this, ControllerX will be listening directly from MQTT rather than Home Assistant (which listens from MQTT). Not only can you use this with zigbee2mqtt, but also with any other MQTT integration. This works for JSON and non-JSON values in the payload. If an specific attribute needs to be extracted from JSON payload, the key (which works like action_key from Zigbee2MQTT integration) attribute can be used: example_app : module : controllerx class : LightController controller : - zigbee2mqtt/stairway_sensor01_occupancy - zigbee2mqtt/stairway_sensor02_occupancy light : light.stairway integration : name : mqtt key : occupancy mapping : \"true\" : \"on\" \"false\" : \"off\" This example will turn on the light when the following payload is shown for one of the 2 topics in the controller key: { \"battery\" : 99 , \"illuminance\" : 0 , \"illuminance_lux\" : 0 , \"linkquality\" : 255 , \"occupancy\" : true , \"temperature\" : 27 , \"voltage\" : 2985 } By default, mqtt will read non-JSON values. Last but not least, MQTT needs to be configured on appdaemon.yaml by adding the MQTT plugin, apart from the HASS plugin. The whole file should look like the following: --- secrets : /config/secrets.yaml appdaemon : latitude : X.XXXXXXX longitude : X.XXXXXXX elevation : XXXX time_zone : XXXXXXXX # You can add `missing_app_warnings` if you don't want any # warning spam from ControllerX when starting AppDaemon missing_app_warnings : 0 plugins : HASS : type : hass MQTT : type : mqtt namespace : mqtt # This is important client_host : <Host without indicating the port (e.g. 192.168.1.10)> client_user : XXXXX client_password : XXXXX http : url : http://127.0.0.1:5050 admin : api : hadashboard :","title":"MQTT"},{"location":"start/integrations/#state","text":"This integration ( state ) listens for the state of a sensor and the action is fired with the changed event. You can add attribute parameter if you want to listen to state change on the state attribute level. Read more about the options in here . An example could be: example_app : module : controllerx class : LightController controller : sensor.my_custom_button integration : name : state attribute : click light : light.example_light mapping : 1_click : \"on\" 2_click : \"off\"","title":"State"},{"location":"start/integrations/#lutron-caseta","text":"This integration( lutron_caseta ) listens to lutron_caseta_button_event events. It creates an action like button_<number>_<action type> . It does not have any additional arguments.","title":"Lutron Cas\u00e9ta"},{"location":"start/integrations/#homematic","text":"This integration ( homematic ) listens to homematic.keypress events. It created an action like <action_type>_<channel> . It does not have any additional arguments.","title":"Homematic"},{"location":"start/type-configuration/","text":"Each device supports a type of controller and this is what gives them the functionality over an entity. As for now, the two types of supported controllers are lights and media players. Here you can check the specific parameters that each type of controller needs. Check the configuration page for the generic parameters. Light controller This controller allows the devices to control light or group of lights. This allows you to: Turn on/off light(s) Toggle light(s) Manual increase/decrease of brightness and color Smooth increase/decrease (holding button) of brightness and color Color loop changing if the light supports xy color. key type value description light * string | dictionary group.livingroom_lights or light.kitchen The light (or group of lights) you want to control manual_steps int 10 Number of steps to go from min to max when clicking. If the value is 2 with one click you will set the light to 50% and with another one to 100%. automatic_steps int 10 Number of steps to go from min to max when smoothing. If the value is 2 with one click you will set the light to 50% and with another one to 100%. min_brightness int 1 The minimum brightness to set to the light. max_brightness int 255 The maximum brightness to set to the light. min_white_value int 1 The minimum white value to set to the light. max_white_value int 255 The maximum white value to set to the light. min_color_temp int 153 The minimum color temperature to set to the light. max_color_temp int 500 The maximum color temperature to set to the light. smooth_power_on boolean False If True the associated light will be set to minimum brightness when brightness up is clicked or hold ad light is off. delay int Controller specific Delay in milliseconds that takes between sending the instructions to the light (for the smooth functionality). Note that if leaving to 0, you might get uncommon behavior. max_loops int 50 Maximum number of loops when holding. The loop will stop either with a release action or reaching the max_loops value. hold_release_toggle boolean False If true , a hold action will work as a release when another hold is running. This is useful when you have a button with just one action event and you want to use the hold-release feature, then you just need to map that event to a hold action. transition int 300 Time in milliseconds that takes the light to transition from one state to another one. add_transition boolean True If true adds transition if supported, otherwise it does not adds the transition attribute. add_transition_turn_toggle boolean True If false does not add transition when turning on/off or toggling, otherwise it adds the transition attribute to the call. See FAQ #6 for a further explanation on the use of this parameter. color_wheel string | list default_color_wheel It defines the color wheel used when changing the xy color either when click or hold actions are used. Check down to know more about the options. supported_features int 0b101100 or 44 See below for the explanation. supported_color_modes list [\"xy\", \"rgb\"] It overrides the supported_color_modes that can be found in light attributes. Values can be color_temp , hs , xy , rgb , rgbw and rgbww . update_supported_features boolean False If true , it will check the supported features field everytime before calling any call service action. Useful in case the supported features of the device entity changes over the time. hold_toggle_direction_init string up It indicates the first direction of the hold toggle actions ( up or down ). * Required fields Light dictionary for the light attribute: key type value description name * string light.kitchen The light (or group of lights) you want to control color_mode string auto This attribute can take auto , xy_color or color_temp as value. auto will check first if the light supports xy_color and then color_temp . xy_color will cicle through different colors infinitely. color_temp will change the color temperature attribute of the light. If a light supports both, user can pick which action wants for the light(s). * Required fields Information about color_wheel attribute: This attribute can be either an string or a list. These are the possible string values: value description default_color_wheel These are the 24 colors that appear in the circle color of home assistant. color_temp_wheel These are the xy colors translated from color temperature (2000K to 6488K). They were extracted from here . Otherwise, a custom xy color list can be defined like the following: example_app : module : controllerx class : < device class or LightController > controller : < your controller id > integration : < your integration > light : light.your_light color_wheel : - [ 0.525 , 0.411 ] - [ 0.167 , 0.338 ] - [ 0.324 , 0.329 ] Media player controller This allows you to control media players. It supports volume, play/pause and skipping forward/backward the track and the source. key type value description media_player * string group.livingroom_speakers or media_player.bedroom_speaker The media player (or group of media players) you want to control volume_steps int 10 Number of steps to go from min to max when clicking or holding. If the value is 2 with one click you will set the volume to 50% and with another one to 100%. delay int Controller specific Delay in milliseconds that takes between sending the volume up/down instructions. Note that the maximum value is 1000 and if leaving to 0, you might get uncommon behavior. max_loops int 50 Maximum number of loops when holding. The loop will stop either with a release action or reaching the max_loops value. hold_release_toggle boolean False If true , a hold action will work as a release when another hold is running. This is useful when you have a button with just one action event and you want to use the hold-release feature, then you just need to map that event to a hold action. supported_features int 0b10111111 or 191 See below for the explanation. update_supported_features boolean False If true , it will check the supported features field everytime before calling any call service action. Useful in case the supported features of the device entity changes over the time. * Required fields Switch controller This allows you to control switch entities as well as input_boolean and binary_sensor . It supports turning on/off and toggling. key type value description switch * string group.switches or switch.dishwasher The switch (or group of switches) you want to control * Required fields Cover controller This allows you to control covers. It supports opening/closing and stop covers. key type value description cover * string group.all_covers or cover.kitchen The cover (or group of covers) you want to control open_position number 100 The open position (between 0 and 100) close_position number 0 The close position (between 0 and 100) cover_duration number - Duration of the cover to open and/or close in seconds, so toggle_open and toggle_close can stop the cover if the cover is still moving. This is recommended to be used when the cover does not report opening and closing states, otherwise, it is not necessary. supported_features int 0b10111111 or 191 See below for the explanation. update_supported_features boolean False If true , it will check the supported features field everytime before calling any call service action. Useful in case the supported features of the device entity changes over the time. * Required fields \"supported_features\" field This field will override the supported_features attribute from the entity (light, media player, etc). By default, ControllerX will check this value from Home Assistant, however, there are times that this attribute does not reflect properly the features that the entity supports. ControllerX automatically will select one action or another depending on this value, this is why it's important that reflects the supported features. This is defined as a bit field in Home Assistant, so its binary representation of the number will defined which features it supports. You can see the values for each entity below. Light feature value EFFECT 4 FLASH 8 TRANSITION 32 If you want to express support for everything, the value is 0b101100 or 44 . Media player feature value PAUSE 1 SEEK 2 VOLUME_SET 4 VOLUME_MUTE 8 PREVIOUS_TRACK 16 NEXT_TRACK 32 TURN_ON 128 TURN_OFF 256 PLAY_MEDIA 512 VOLUME_STEP 1024 SELECT_SOURCE 2048 STOP 4096 CLEAR_PLAYLIST 8192 PLAY 16384 SHUFFLE_SET 32768 SELECT_SOUND_MODE 65536 SUPPORT_BROWSE_MEDIA 131072 SUPPORT_REPEAT_SET 262144 SUPPORT_GROUPING 524288 If you want to express support for everything, the value is 0b1111111111110111111 or 524223 . Cover feature value OPEN 1 CLOSE 2 SET_COVER_POSITION 4 STOP 8 OPEN_TILT 16 CLOSE_TILT 32 STOP_TILT 64 SET_TILT_POSITION 128 If you want to express support for everything, the value is 0b11111111 or 255 .","title":"Type Configuration"},{"location":"start/type-configuration/#light-controller","text":"This controller allows the devices to control light or group of lights. This allows you to: Turn on/off light(s) Toggle light(s) Manual increase/decrease of brightness and color Smooth increase/decrease (holding button) of brightness and color Color loop changing if the light supports xy color. key type value description light * string | dictionary group.livingroom_lights or light.kitchen The light (or group of lights) you want to control manual_steps int 10 Number of steps to go from min to max when clicking. If the value is 2 with one click you will set the light to 50% and with another one to 100%. automatic_steps int 10 Number of steps to go from min to max when smoothing. If the value is 2 with one click you will set the light to 50% and with another one to 100%. min_brightness int 1 The minimum brightness to set to the light. max_brightness int 255 The maximum brightness to set to the light. min_white_value int 1 The minimum white value to set to the light. max_white_value int 255 The maximum white value to set to the light. min_color_temp int 153 The minimum color temperature to set to the light. max_color_temp int 500 The maximum color temperature to set to the light. smooth_power_on boolean False If True the associated light will be set to minimum brightness when brightness up is clicked or hold ad light is off. delay int Controller specific Delay in milliseconds that takes between sending the instructions to the light (for the smooth functionality). Note that if leaving to 0, you might get uncommon behavior. max_loops int 50 Maximum number of loops when holding. The loop will stop either with a release action or reaching the max_loops value. hold_release_toggle boolean False If true , a hold action will work as a release when another hold is running. This is useful when you have a button with just one action event and you want to use the hold-release feature, then you just need to map that event to a hold action. transition int 300 Time in milliseconds that takes the light to transition from one state to another one. add_transition boolean True If true adds transition if supported, otherwise it does not adds the transition attribute. add_transition_turn_toggle boolean True If false does not add transition when turning on/off or toggling, otherwise it adds the transition attribute to the call. See FAQ #6 for a further explanation on the use of this parameter. color_wheel string | list default_color_wheel It defines the color wheel used when changing the xy color either when click or hold actions are used. Check down to know more about the options. supported_features int 0b101100 or 44 See below for the explanation. supported_color_modes list [\"xy\", \"rgb\"] It overrides the supported_color_modes that can be found in light attributes. Values can be color_temp , hs , xy , rgb , rgbw and rgbww . update_supported_features boolean False If true , it will check the supported features field everytime before calling any call service action. Useful in case the supported features of the device entity changes over the time. hold_toggle_direction_init string up It indicates the first direction of the hold toggle actions ( up or down ). * Required fields Light dictionary for the light attribute: key type value description name * string light.kitchen The light (or group of lights) you want to control color_mode string auto This attribute can take auto , xy_color or color_temp as value. auto will check first if the light supports xy_color and then color_temp . xy_color will cicle through different colors infinitely. color_temp will change the color temperature attribute of the light. If a light supports both, user can pick which action wants for the light(s). * Required fields Information about color_wheel attribute: This attribute can be either an string or a list. These are the possible string values: value description default_color_wheel These are the 24 colors that appear in the circle color of home assistant. color_temp_wheel These are the xy colors translated from color temperature (2000K to 6488K). They were extracted from here . Otherwise, a custom xy color list can be defined like the following: example_app : module : controllerx class : < device class or LightController > controller : < your controller id > integration : < your integration > light : light.your_light color_wheel : - [ 0.525 , 0.411 ] - [ 0.167 , 0.338 ] - [ 0.324 , 0.329 ]","title":"Light controller"},{"location":"start/type-configuration/#media-player-controller","text":"This allows you to control media players. It supports volume, play/pause and skipping forward/backward the track and the source. key type value description media_player * string group.livingroom_speakers or media_player.bedroom_speaker The media player (or group of media players) you want to control volume_steps int 10 Number of steps to go from min to max when clicking or holding. If the value is 2 with one click you will set the volume to 50% and with another one to 100%. delay int Controller specific Delay in milliseconds that takes between sending the volume up/down instructions. Note that the maximum value is 1000 and if leaving to 0, you might get uncommon behavior. max_loops int 50 Maximum number of loops when holding. The loop will stop either with a release action or reaching the max_loops value. hold_release_toggle boolean False If true , a hold action will work as a release when another hold is running. This is useful when you have a button with just one action event and you want to use the hold-release feature, then you just need to map that event to a hold action. supported_features int 0b10111111 or 191 See below for the explanation. update_supported_features boolean False If true , it will check the supported features field everytime before calling any call service action. Useful in case the supported features of the device entity changes over the time. * Required fields","title":"Media player controller"},{"location":"start/type-configuration/#switch-controller","text":"This allows you to control switch entities as well as input_boolean and binary_sensor . It supports turning on/off and toggling. key type value description switch * string group.switches or switch.dishwasher The switch (or group of switches) you want to control * Required fields","title":"Switch controller"},{"location":"start/type-configuration/#cover-controller","text":"This allows you to control covers. It supports opening/closing and stop covers. key type value description cover * string group.all_covers or cover.kitchen The cover (or group of covers) you want to control open_position number 100 The open position (between 0 and 100) close_position number 0 The close position (between 0 and 100) cover_duration number - Duration of the cover to open and/or close in seconds, so toggle_open and toggle_close can stop the cover if the cover is still moving. This is recommended to be used when the cover does not report opening and closing states, otherwise, it is not necessary. supported_features int 0b10111111 or 191 See below for the explanation. update_supported_features boolean False If true , it will check the supported features field everytime before calling any call service action. Useful in case the supported features of the device entity changes over the time. * Required fields","title":"Cover controller"},{"location":"start/type-configuration/#supported_features-field","text":"This field will override the supported_features attribute from the entity (light, media player, etc). By default, ControllerX will check this value from Home Assistant, however, there are times that this attribute does not reflect properly the features that the entity supports. ControllerX automatically will select one action or another depending on this value, this is why it's important that reflects the supported features. This is defined as a bit field in Home Assistant, so its binary representation of the number will defined which features it supports. You can see the values for each entity below.","title":"\"supported_features\" field"},{"location":"start/type-configuration/#light","text":"feature value EFFECT 4 FLASH 8 TRANSITION 32 If you want to express support for everything, the value is 0b101100 or 44 .","title":"Light"},{"location":"start/type-configuration/#media-player","text":"feature value PAUSE 1 SEEK 2 VOLUME_SET 4 VOLUME_MUTE 8 PREVIOUS_TRACK 16 NEXT_TRACK 32 TURN_ON 128 TURN_OFF 256 PLAY_MEDIA 512 VOLUME_STEP 1024 SELECT_SOURCE 2048 STOP 4096 CLEAR_PLAYLIST 8192 PLAY 16384 SHUFFLE_SET 32768 SELECT_SOUND_MODE 65536 SUPPORT_BROWSE_MEDIA 131072 SUPPORT_REPEAT_SET 262144 SUPPORT_GROUPING 524288 If you want to express support for everything, the value is 0b1111111111110111111 or 524223 .","title":"Media player"},{"location":"start/type-configuration/#cover","text":"feature value OPEN 1 CLOSE 2 SET_COVER_POSITION 4 STOP 8 OPEN_TILT 16 CLOSE_TILT 32 STOP_TILT 64 SET_TILT_POSITION 128 If you want to express support for everything, the value is 0b11111111 or 255 .","title":"Cover"}]}